{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"p\", null, [_createTextVNode(\" Ask a yes/no question: \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.question = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.question]])]), _createElementVNode(\"p\", null, _toDisplayString($data.answer), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;6DACEA,oBAGI,6BAHD,0BAED,uCAA4B;+DAAZC,cAAQ;iDAARA,cAAQ,OAE1BD,oBAAmB,4BAAbC,YAAM","names":["_createElementVNode","$data"],"sourceRoot":"","sources":["/home/prism/Documents/todoapp/src/components/watcherTest.vue"],"sourcesContent":["<template>\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\" />\n  </p>\n  <p>{{ answer }}</p>\n</template>\n<script>\nexport default {\n  name: \"watcher-test\",\n  data() {\n    return {\n      question: \"\",\n      answer: \"Questions usually contain a question mark. ;-)\",\n    };\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes(\"?\")) {\n        this.getAnswer();\n      }\n    },\n  },\n  methods: {\n    async getAnswer() {\n      this.answer = \"Thinking...\";\n      try {\n        const res = await fetch(\"https://yesno.wtf/api\");\n        this.answer = (await res.json()).answer;\n      } catch (error) {\n        this.answer = \"Error! Could not reach the API. \" + error;\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}