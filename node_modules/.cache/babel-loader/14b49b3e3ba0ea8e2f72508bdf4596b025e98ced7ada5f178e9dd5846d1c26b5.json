{"ast":null,"code":"export default {\n  name: \"watcher-test\",\n  data() {\n    return {\n      question: \"\",\n      answer: \"Questions usually contain a question mark. ;-)\"\n    };\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes(\"?\")) {\n        this.getAnswer();\n      }\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.answer = \"Thinking...\";\n      try {\n        const res = await fetch(\"https://yesno.wtf/api\");\n        this.answer = (await res.json()).answer;\n      } catch (error) {\n        this.answer = \"Error! Could not reach the API. \" + error;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAIA,eAAe;EACbA,IAAI,EAAE,cAAc;EACpBC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACL;IACAF,QAAQ,CAACG,WAAW,EAAEC,WAAW,EAAE;MACjC,IAAID,WAAW,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B,IAAI,CAACC,SAAS,EAAE;MAClB;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAAS,GAAG;MAChB,IAAI,CAACL,MAAK,GAAI,aAAa;MAC3B,IAAI;QACF,MAAMO,GAAE,GAAI,MAAMC,KAAK,CAAC,uBAAuB,CAAC;QAChD,IAAI,CAACR,MAAK,GAAI,CAAC,MAAMO,GAAG,CAACE,IAAI,EAAE,EAAET,MAAM;MACzC,EAAE,OAAOU,KAAK,EAAE;QACd,IAAI,CAACV,MAAK,GAAI,kCAAiC,GAAIU,KAAK;MAC1D;IACF;EACF;AACF,CAAC","names":["name","data","question","answer","watch","newQuestion","oldQuestion","includes","getAnswer","methods","res","fetch","json","error"],"sourceRoot":"","sources":["/home/prism/Documents/todoapp/src/components/watcherTest.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n<script>\nexport default {\n  name: \"watcher-test\",\n  data() {\n    return {\n      question: \"\",\n      answer: \"Questions usually contain a question mark. ;-)\",\n    };\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes(\"?\")) {\n        this.getAnswer();\n      }\n    },\n  },\n  methods: {\n    async getAnswer() {\n      this.answer = \"Thinking...\";\n      try {\n        const res = await fetch(\"https://yesno.wtf/api\");\n        this.answer = (await res.json()).answer;\n      } catch (error) {\n        this.answer = \"Error! Could not reach the API. \" + error;\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}