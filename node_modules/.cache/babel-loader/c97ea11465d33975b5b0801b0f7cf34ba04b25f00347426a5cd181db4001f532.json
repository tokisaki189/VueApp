{"ast":null,"code":"import\"core-js/modules/es.array.push.js\";import{_getProvider,getApp,SDK_VERSION as SDK_VERSION$1,_registerComponent,registerVersion}from'@firebase/app';import{Component}from'@firebase/component';import{stringify,jsonEval,contains,assert,isNodeSdk,stringToByteArray,Sha1,base64,deepCopy,base64Encode,isMobileCordova,stringLength,Deferred,safeGet,isAdmin,isValidFormat,isEmpty,isReactNative,assertionError,map,querystring,errorPrefix,getModularInstance,getDefaultEmulatorHostnameAndPort,createMockUserToken}from'@firebase/util';import{Logger,LogLevel}from'@firebase/logger';const name=\"@firebase/database\";const version=\"0.14.3\";/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /** The semver (www.semver.org) version of the SDK. */let SDK_VERSION='';/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */function setSDKVersion(version){SDK_VERSION=version;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */class DOMStorageWrapper{/**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */constructor(domStorage_){this.domStorage_=domStorage_;// Use a prefix to avoid collisions with other stuff saved by the app.\nthis.prefix_='firebase:';}/**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */set(key,value){if(value==null){this.domStorage_.removeItem(this.prefixedName_(key));}else{this.domStorage_.setItem(this.prefixedName_(key),stringify(value));}}/**\r\n     * @returns The value that was stored under this key, or null\r\n     */get(key){const storedVal=this.domStorage_.getItem(this.prefixedName_(key));if(storedVal==null){return null;}else{return jsonEval(storedVal);}}remove(key){this.domStorage_.removeItem(this.prefixedName_(key));}prefixedName_(name){return this.prefix_+name;}toString(){return this.domStorage_.toString();}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */class MemoryStorage{constructor(){this.cache_={};this.isInMemoryStorage=true;}set(key,value){if(value==null){delete this.cache_[key];}else{this.cache_[key]=value;}}get(key){if(contains(this.cache_,key)){return this.cache_[key];}return null;}remove(key){delete this.cache_[key];}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */const createStoragefor=function(domStorageName){try{// NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n// so it must be inside the try/catch.\nif(typeof window!=='undefined'&&typeof window[domStorageName]!=='undefined'){// Need to test cache. Just because it's here doesn't mean it works\nconst domStorage=window[domStorageName];domStorage.setItem('firebase:sentinel','cache');domStorage.removeItem('firebase:sentinel');return new DOMStorageWrapper(domStorage);}}catch(e){}// Failed to create wrapper.  Just return in-memory storage.\n// TODO: log?\nreturn new MemoryStorage();};/** A storage object that lasts across sessions */const PersistentStorage=createStoragefor('localStorage');/** A storage object that only lasts one session */const SessionStorage=createStoragefor('sessionStorage');/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const logClient=new Logger('@firebase/database');/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */const LUIDGenerator=function(){let id=1;return function(){return id++;};}();/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */const sha1=function(str){const utf8Bytes=stringToByteArray(str);const sha1=new Sha1();sha1.update(utf8Bytes);const sha1Bytes=sha1.digest();return base64.encodeByteArray(sha1Bytes);};const buildLogMessage_=function(...varArgs){let message='';for(let i=0;i<varArgs.length;i++){const arg=varArgs[i];if(Array.isArray(arg)||arg&&typeof arg==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntypeof arg.length==='number'){message+=buildLogMessage_.apply(null,arg);}else if(typeof arg==='object'){message+=stringify(arg);}else{message+=arg;}message+=' ';}return message;};/**\r\n * Use this for all debug messages in Firebase.\r\n */let logger=null;/**\r\n * Flag to check for log availability on first log message\r\n */let firstLog_=true;/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */const enableLogging$1=function(logger_,persistent){assert(!persistent||logger_===true||logger_===false,\"Can't turn on custom loggers persistently.\");if(logger_===true){logClient.logLevel=LogLevel.VERBOSE;logger=logClient.log.bind(logClient);if(persistent){SessionStorage.set('logging_enabled',true);}}else if(typeof logger_==='function'){logger=logger_;}else{logger=null;SessionStorage.remove('logging_enabled');}};const log=function(...varArgs){if(firstLog_===true){firstLog_=false;if(logger===null&&SessionStorage.get('logging_enabled')===true){enableLogging$1(true);}}if(logger){const message=buildLogMessage_.apply(null,varArgs);logger(message);}};const logWrapper=function(prefix){return function(...varArgs){log(prefix,...varArgs);};};const error=function(...varArgs){const message='FIREBASE INTERNAL ERROR: '+buildLogMessage_(...varArgs);logClient.error(message);};const fatal=function(...varArgs){const message=`FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;logClient.error(message);throw new Error(message);};const warn=function(...varArgs){const message='FIREBASE WARNING: '+buildLogMessage_(...varArgs);logClient.warn(message);};/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */const warnIfPageIsSecure=function(){// Be very careful accessing browser globals. Who knows what may or may not exist.\nif(typeof window!=='undefined'&&window.location&&window.location.protocol&&window.location.protocol.indexOf('https:')!==-1){warn('Insecure Firebase access from a secure page. '+'Please use https in calls to new Firebase().');}};/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */const isInvalidJSONNumber=function(data){return typeof data==='number'&&(data!==data||// NaN\ndata===Number.POSITIVE_INFINITY||data===Number.NEGATIVE_INFINITY);};const executeWhenDOMReady=function(fn){if(isNodeSdk()||document.readyState==='complete'){fn();}else{// Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n// fire before onload), but fall back to onload.\nlet called=false;const wrappedFn=function(){if(!document.body){setTimeout(wrappedFn,Math.floor(10));return;}if(!called){called=true;fn();}};if(document.addEventListener){document.addEventListener('DOMContentLoaded',wrappedFn,false);// fallback to onload.\nwindow.addEventListener('load',wrappedFn,false);// eslint-disable-next-line @typescript-eslint/no-explicit-any\n}else if(document.attachEvent){// IE.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndocument.attachEvent('onreadystatechange',()=>{if(document.readyState==='complete'){wrappedFn();}});// fallback to onload.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nwindow.attachEvent('onload',wrappedFn);// jQuery has an extra hack for IE that we could employ (based on\n// http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n// I'm hoping we don't need it.\n}}};/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */const MIN_NAME='[MIN_NAME]';/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */const MAX_NAME='[MAX_NAME]';/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */const nameCompare=function(a,b){if(a===b){return 0;}else if(a===MIN_NAME||b===MAX_NAME){return-1;}else if(b===MIN_NAME||a===MAX_NAME){return 1;}else{const aAsInt=tryParseInt(a),bAsInt=tryParseInt(b);if(aAsInt!==null){if(bAsInt!==null){return aAsInt-bAsInt===0?a.length-b.length:aAsInt-bAsInt;}else{return-1;}}else if(bAsInt!==null){return 1;}else{return a<b?-1:1;}}};/**\r\n * @returns {!number} comparison result.\r\n */const stringCompare=function(a,b){if(a===b){return 0;}else if(a<b){return-1;}else{return 1;}};const requireKey=function(key,obj){if(obj&&key in obj){return obj[key];}else{throw new Error('Missing required key ('+key+') in object: '+stringify(obj));}};const ObjectToUniqueKey=function(obj){if(typeof obj!=='object'||obj===null){return stringify(obj);}const keys=[];// eslint-disable-next-line guard-for-in\nfor(const k in obj){keys.push(k);}// Export as json, but with the keys sorted.\nkeys.sort();let key='{';for(let i=0;i<keys.length;i++){if(i!==0){key+=',';}key+=stringify(keys[i]);key+=':';key+=ObjectToUniqueKey(obj[keys[i]]);}key+='}';return key;};/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */const splitStringBySize=function(str,segsize){const len=str.length;if(len<=segsize){return[str];}const dataSegs=[];for(let c=0;c<len;c+=segsize){if(c+segsize>len){dataSegs.push(str.substring(c,len));}else{dataSegs.push(str.substring(c,c+segsize));}}return dataSegs;};/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */function each(obj,fn){for(const key in obj){if(obj.hasOwnProperty(key)){fn(key,obj[key]);}}}/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */const doubleToIEEE754String=function(v){assert(!isInvalidJSONNumber(v),'Invalid JSON number');// MJL\nconst ebits=11,fbits=52;const bias=(1<<ebits-1)-1;let s,e,f,ln,i;// Compute sign, exponent, fraction\n// Skip NaN / Infinity handling --MJL.\nif(v===0){e=0;f=0;s=1/v===-Infinity?1:0;}else{s=v<0;v=Math.abs(v);if(v>=Math.pow(2,1-bias)){// Normalized\nln=Math.min(Math.floor(Math.log(v)/Math.LN2),bias);e=ln+bias;f=Math.round(v*Math.pow(2,fbits-ln)-Math.pow(2,fbits));}else{// Denormalized\ne=0;f=Math.round(v/Math.pow(2,1-bias-fbits));}}// Pack sign, exponent, fraction\nconst bits=[];for(i=fbits;i;i-=1){bits.push(f%2?1:0);f=Math.floor(f/2);}for(i=ebits;i;i-=1){bits.push(e%2?1:0);e=Math.floor(e/2);}bits.push(s?1:0);bits.reverse();const str=bits.join('');// Return the data as a hex string. --MJL\nlet hexByteString='';for(i=0;i<64;i+=8){let hexByte=parseInt(str.substr(i,8),2).toString(16);if(hexByte.length===1){hexByte='0'+hexByte;}hexByteString=hexByteString+hexByte;}return hexByteString.toLowerCase();};/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */const isChromeExtensionContentScript=function(){return!!(typeof window==='object'&&window['chrome']&&window['chrome']['extension']&&!/^chrome/.test(window.location.href));};/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */const isWindowsStoreApp=function(){// Check for the presence of a couple WinRT globals\nreturn typeof Windows==='object'&&typeof Windows.UI==='object';};/**\r\n * Converts a server error code to a Javascript Error\r\n */function errorForServerCode(code,query){let reason='Unknown Error';if(code==='too_big'){reason='The data requested exceeds the maximum size '+'that can be accessed with a single request.';}else if(code==='permission_denied'){reason=\"Client doesn't have permission to access the desired data.\";}else if(code==='unavailable'){reason='The service is unavailable';}const error=new Error(code+' at '+query._path.toString()+': '+reason);// eslint-disable-next-line @typescript-eslint/no-explicit-any\nerror.code=code.toUpperCase();return error;}/**\r\n * Used to test for integer-looking strings\r\n */const INTEGER_REGEXP_=new RegExp('^-?(0*)\\\\d{1,10}$');/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */const INTEGER_32_MIN=-2147483648;/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */const INTEGER_32_MAX=2147483647;/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */const tryParseInt=function(str){if(INTEGER_REGEXP_.test(str)){const intVal=Number(str);if(intVal>=INTEGER_32_MIN&&intVal<=INTEGER_32_MAX){return intVal;}}return null;};/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */const exceptionGuard=function(fn){try{fn();}catch(e){// Re-throw exception when it's safe.\nsetTimeout(()=>{// It used to be that \"throw e\" would result in a good console error with\n// relevant context, but as of Chrome 39, you just get the firebase.js\n// file/line number where we re-throw it, which is useless. So we log\n// e.stack explicitly.\nconst stack=e.stack||'';warn('Exception was thrown by user callback.',stack);throw e;},Math.floor(0));}};/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */const beingCrawled=function(){const userAgent=typeof window==='object'&&window['navigator']&&window['navigator']['userAgent']||'';// For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n// believe to support JavaScript/AJAX rendering.\n// NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n// would have seen the page\" is flaky if we don't treat it as a crawler.\nreturn userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0;};/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */const setTimeoutNonBlocking=function(fn,time){const timeout=setTimeout(fn,time);// Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\nif(typeof timeout==='number'&&// @ts-ignore Is only defined in Deno environments.\ntypeof Deno!=='undefined'&&// @ts-ignore Deno and unrefTimer are only defined in Deno environments.\nDeno['unrefTimer']){// @ts-ignore Deno and unrefTimer are only defined in Deno environments.\nDeno.unrefTimer(timeout);// eslint-disable-next-line @typescript-eslint/no-explicit-any\n}else if(typeof timeout==='object'&&timeout['unref']){// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntimeout['unref']();}return timeout;};/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */class AppCheckTokenProvider{constructor(appName_,appCheckProvider){this.appName_=appName_;this.appCheckProvider=appCheckProvider;this.appCheck=appCheckProvider===null||appCheckProvider===void 0?void 0:appCheckProvider.getImmediate({optional:true});if(!this.appCheck){appCheckProvider===null||appCheckProvider===void 0?void 0:appCheckProvider.get().then(appCheck=>this.appCheck=appCheck);}}getToken(forceRefresh){if(!this.appCheck){return new Promise((resolve,reject)=>{// Support delayed initialization of FirebaseAppCheck. This allows our\n// customers to initialize the RTDB SDK before initializing Firebase\n// AppCheck and ensures that all requests are authenticated if a token\n// becomes available before the timoeout below expires.\nsetTimeout(()=>{if(this.appCheck){this.getToken(forceRefresh).then(resolve,reject);}else{resolve(null);}},0);});}return this.appCheck.getToken(forceRefresh);}addTokenChangeListener(listener){var _a;(_a=this.appCheckProvider)===null||_a===void 0?void 0:_a.get().then(appCheck=>appCheck.addTokenListener(listener));}notifyForInvalidToken(){warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" `+'are invalid. This usually indicates your app was not initialized correctly.');}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */class FirebaseAuthTokenProvider{constructor(appName_,firebaseOptions_,authProvider_){this.appName_=appName_;this.firebaseOptions_=firebaseOptions_;this.authProvider_=authProvider_;this.auth_=null;this.auth_=authProvider_.getImmediate({optional:true});if(!this.auth_){authProvider_.onInit(auth=>this.auth_=auth);}}getToken(forceRefresh){if(!this.auth_){return new Promise((resolve,reject)=>{// Support delayed initialization of FirebaseAuth. This allows our\n// customers to initialize the RTDB SDK before initializing Firebase\n// Auth and ensures that all requests are authenticated if a token\n// becomes available before the timoeout below expires.\nsetTimeout(()=>{if(this.auth_){this.getToken(forceRefresh).then(resolve,reject);}else{resolve(null);}},0);});}return this.auth_.getToken(forceRefresh).catch(error=>{// TODO: Need to figure out all the cases this is raised and whether\n// this makes sense.\nif(error&&error.code==='auth/token-not-initialized'){log('Got auth/token-not-initialized error.  Treating as null token.');return null;}else{return Promise.reject(error);}});}addTokenChangeListener(listener){// TODO: We might want to wrap the listener and call it with no args to\n// avoid a leaky abstraction, but that makes removing the listener harder.\nif(this.auth_){this.auth_.addAuthTokenListener(listener);}else{this.authProvider_.get().then(auth=>auth.addAuthTokenListener(listener));}}removeTokenChangeListener(listener){this.authProvider_.get().then(auth=>auth.removeAuthTokenListener(listener));}notifyForInvalidToken(){let errorMessage='Provided authentication credentials for the app named \"'+this.appName_+'\" are invalid. This usually indicates your app was not '+'initialized correctly. ';if('credential'in this.firebaseOptions_){errorMessage+='Make sure the \"credential\" property provided to initializeApp() '+'is authorized to access the specified \"databaseURL\" and is from the correct '+'project.';}else if('serviceAccount'in this.firebaseOptions_){errorMessage+='Make sure the \"serviceAccount\" property provided to initializeApp() '+'is authorized to access the specified \"databaseURL\" and is from the correct '+'project.';}else{errorMessage+='Make sure the \"apiKey\" and \"databaseURL\" properties provided to '+'initializeApp() match the values provided for your app at '+'https://console.firebase.google.com/.';}warn(errorMessage);}}/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */class EmulatorTokenProvider{constructor(accessToken){this.accessToken=accessToken;}getToken(forceRefresh){return Promise.resolve({accessToken:this.accessToken});}addTokenChangeListener(listener){// Invoke the listener immediately to match the behavior in Firebase Auth\n// (see packages/auth/src/auth.js#L1807)\nlistener(this.accessToken);}removeTokenChangeListener(listener){}notifyForInvalidToken(){}}/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */EmulatorTokenProvider.OWNER='owner';/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const PROTOCOL_VERSION='5';const VERSION_PARAM='v';const TRANSPORT_SESSION_PARAM='s';const REFERER_PARAM='r';const FORGE_REF='f';// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE=/(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;const LAST_SESSION_PARAM='ls';const APPLICATION_ID_PARAM='p';const APP_CHECK_TOKEN_PARAM='ac';const WEBSOCKET='websocket';const LONG_POLLING='long_polling';/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A class that holds metadata about a Repo object\r\n */class RepoInfo{/**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */constructor(host,secure,namespace,webSocketOnly,nodeAdmin=false,persistenceKey='',includeNamespaceInQueryParams=false,isUsingEmulator=false){this.secure=secure;this.namespace=namespace;this.webSocketOnly=webSocketOnly;this.nodeAdmin=nodeAdmin;this.persistenceKey=persistenceKey;this.includeNamespaceInQueryParams=includeNamespaceInQueryParams;this.isUsingEmulator=isUsingEmulator;this._host=host.toLowerCase();this._domain=this._host.substr(this._host.indexOf('.')+1);this.internalHost=PersistentStorage.get('host:'+host)||this._host;}isCacheableHost(){return this.internalHost.substr(0,2)==='s-';}isCustomHost(){return this._domain!=='firebaseio.com'&&this._domain!=='firebaseio-demo.com';}get host(){return this._host;}set host(newHost){if(newHost!==this.internalHost){this.internalHost=newHost;if(this.isCacheableHost()){PersistentStorage.set('host:'+this._host,this.internalHost);}}}toString(){let str=this.toURLString();if(this.persistenceKey){str+='<'+this.persistenceKey+'>';}return str;}toURLString(){const protocol=this.secure?'https://':'http://';const query=this.includeNamespaceInQueryParams?`?ns=${this.namespace}`:'';return`${protocol}${this.host}/${query}`;}}function repoInfoNeedsQueryParam(repoInfo){return repoInfo.host!==repoInfo.internalHost||repoInfo.isCustomHost()||repoInfo.includeNamespaceInQueryParams;}/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */function repoInfoConnectionURL(repoInfo,type,params){assert(typeof type==='string','typeof type must == string');assert(typeof params==='object','typeof params must == object');let connURL;if(type===WEBSOCKET){connURL=(repoInfo.secure?'wss://':'ws://')+repoInfo.internalHost+'/.ws?';}else if(type===LONG_POLLING){connURL=(repoInfo.secure?'https://':'http://')+repoInfo.internalHost+'/.lp?';}else{throw new Error('Unknown connection type: '+type);}if(repoInfoNeedsQueryParam(repoInfo)){params['ns']=repoInfo.namespace;}const pairs=[];each(params,(key,value)=>{pairs.push(key+'='+value);});return connURL+pairs.join('&');}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Tracks a collection of stats.\r\n */class StatsCollection{constructor(){this.counters_={};}incrementCounter(name,amount=1){if(!contains(this.counters_,name)){this.counters_[name]=0;}this.counters_[name]+=amount;}get(){return deepCopy(this.counters_);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const collections={};const reporters={};function statsManagerGetCollection(repoInfo){const hashString=repoInfo.toString();if(!collections[hashString]){collections[hashString]=new StatsCollection();}return collections[hashString];}function statsManagerGetOrCreateReporter(repoInfo,creatorFunction){const hashString=repoInfo.toString();if(!reporters[hashString]){reporters[hashString]=creatorFunction();}return reporters[hashString];}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */class PacketReceiver{/**\r\n     * @param onMessage_\r\n     */constructor(onMessage_){this.onMessage_=onMessage_;this.pendingResponses=[];this.currentResponseNum=0;this.closeAfterResponse=-1;this.onClose=null;}closeAfter(responseNum,callback){this.closeAfterResponse=responseNum;this.onClose=callback;if(this.closeAfterResponse<this.currentResponseNum){this.onClose();this.onClose=null;}}/**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */handleResponse(requestNum,data){this.pendingResponses[requestNum]=data;while(this.pendingResponses[this.currentResponseNum]){const toProcess=this.pendingResponses[this.currentResponseNum];delete this.pendingResponses[this.currentResponseNum];for(let i=0;i<toProcess.length;++i){if(toProcess[i]){exceptionGuard(()=>{this.onMessage_(toProcess[i]);});}}if(this.currentResponseNum===this.closeAfterResponse){if(this.onClose){this.onClose();this.onClose=null;}break;}this.currentResponseNum++;}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM='start';const FIREBASE_LONGPOLL_CLOSE_COMMAND='close';const FIREBASE_LONGPOLL_COMMAND_CB_NAME='pLPCommand';const FIREBASE_LONGPOLL_DATA_CB_NAME='pRTLPCB';const FIREBASE_LONGPOLL_ID_PARAM='id';const FIREBASE_LONGPOLL_PW_PARAM='pw';const FIREBASE_LONGPOLL_SERIAL_PARAM='ser';const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM='cb';const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM='seg';const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET='ts';const FIREBASE_LONGPOLL_DATA_PARAM='d';const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM='dframe';//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE=1870;const SEG_HEADER_SIZE=30;//ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE=MAX_URL_DATA_SIZE-SEG_HEADER_SIZE;/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */const KEEPALIVE_REQUEST_INTERVAL=25000;/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */const LP_CONNECT_TIMEOUT=30000;/**\r\n * This class manages a single long-polling connection.\r\n */class BrowserPollConnection{/**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */constructor(connId,repoInfo,applicationId,appCheckToken,authToken,transportSessionId,lastSessionId){this.connId=connId;this.repoInfo=repoInfo;this.applicationId=applicationId;this.appCheckToken=appCheckToken;this.authToken=authToken;this.transportSessionId=transportSessionId;this.lastSessionId=lastSessionId;this.bytesSent=0;this.bytesReceived=0;this.everConnected_=false;this.log_=logWrapper(connId);this.stats_=statsManagerGetCollection(repoInfo);this.urlFn=params=>{// Always add the token if we have one.\nif(this.appCheckToken){params[APP_CHECK_TOKEN_PARAM]=this.appCheckToken;}return repoInfoConnectionURL(repoInfo,LONG_POLLING,params);};}/**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */open(onMessage,onDisconnect){this.curSegmentNum=0;this.onDisconnect_=onDisconnect;this.myPacketOrderer=new PacketReceiver(onMessage);this.isClosed_=false;this.connectTimeoutTimer_=setTimeout(()=>{this.log_('Timed out trying to connect.');// Make sure we clear the host cache\nthis.onClosed_();this.connectTimeoutTimer_=null;// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(LP_CONNECT_TIMEOUT));// Ensure we delay the creation of the iframe until the DOM is loaded.\nexecuteWhenDOMReady(()=>{if(this.isClosed_){return;}//Set up a callback that gets triggered once a connection is set up.\nthis.scriptTagHolder=new FirebaseIFrameScriptHolder((...args)=>{const[command,arg1,arg2,arg3,arg4]=args;this.incrementIncomingBytes_(args);if(!this.scriptTagHolder){return;// we closed the connection.\n}if(this.connectTimeoutTimer_){clearTimeout(this.connectTimeoutTimer_);this.connectTimeoutTimer_=null;}this.everConnected_=true;if(command===FIREBASE_LONGPOLL_START_PARAM){this.id=arg1;this.password=arg2;}else if(command===FIREBASE_LONGPOLL_CLOSE_COMMAND){// Don't clear the host cache. We got a response from the server, so we know it's reachable\nif(arg1){// We aren't expecting any more data (other than what the server's already in the process of sending us\n// through our already open polls), so don't send any more.\nthis.scriptTagHolder.sendNewPolls=false;// arg1 in this case is the last response number sent by the server. We should try to receive\n// all of the responses up to this one before closing\nthis.myPacketOrderer.closeAfter(arg1,()=>{this.onClosed_();});}else{this.onClosed_();}}else{throw new Error('Unrecognized command received: '+command);}},(...args)=>{const[pN,data]=args;this.incrementIncomingBytes_(args);this.myPacketOrderer.handleResponse(pN,data);},()=>{this.onClosed_();},this.urlFn);//Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n//from cache.\nconst urlParams={};urlParams[FIREBASE_LONGPOLL_START_PARAM]='t';urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=Math.floor(Math.random()*100000000);if(this.scriptTagHolder.uniqueCallbackIdentifier){urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM]=this.scriptTagHolder.uniqueCallbackIdentifier;}urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(this.transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=this.transportSessionId;}if(this.lastSessionId){urlParams[LAST_SESSION_PARAM]=this.lastSessionId;}if(this.applicationId){urlParams[APPLICATION_ID_PARAM]=this.applicationId;}if(this.appCheckToken){urlParams[APP_CHECK_TOKEN_PARAM]=this.appCheckToken;}if(typeof location!=='undefined'&&location.hostname&&FORGE_DOMAIN_RE.test(location.hostname)){urlParams[REFERER_PARAM]=FORGE_REF;}const connectURL=this.urlFn(urlParams);this.log_('Connecting via long-poll to '+connectURL);this.scriptTagHolder.addTag(connectURL,()=>{/* do nothing */});});}/**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */start(){this.scriptTagHolder.startLongPoll(this.id,this.password);this.addDisconnectPingFrame(this.id,this.password);}/**\r\n     * Forces long polling to be considered as a potential transport\r\n     */static forceAllow(){BrowserPollConnection.forceAllow_=true;}/**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */static forceDisallow(){BrowserPollConnection.forceDisallow_=true;}// Static method, use string literal so it can be accessed in a generic way\nstatic isAvailable(){if(isNodeSdk()){return false;}else if(BrowserPollConnection.forceAllow_){return true;}else{// NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n// the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\nreturn!BrowserPollConnection.forceDisallow_&&typeof document!=='undefined'&&document.createElement!=null&&!isChromeExtensionContentScript()&&!isWindowsStoreApp();}}/**\r\n     * No-op for polling\r\n     */markConnectionHealthy(){}/**\r\n     * Stops polling and cleans up the iframe\r\n     */shutdown_(){this.isClosed_=true;if(this.scriptTagHolder){this.scriptTagHolder.close();this.scriptTagHolder=null;}//remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\nif(this.myDisconnFrame){document.body.removeChild(this.myDisconnFrame);this.myDisconnFrame=null;}if(this.connectTimeoutTimer_){clearTimeout(this.connectTimeoutTimer_);this.connectTimeoutTimer_=null;}}/**\r\n     * Triggered when this transport is closed\r\n     */onClosed_(){if(!this.isClosed_){this.log_('Longpoll is closing itself');this.shutdown_();if(this.onDisconnect_){this.onDisconnect_(this.everConnected_);this.onDisconnect_=null;}}}/**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */close(){if(!this.isClosed_){this.log_('Longpoll is being closed.');this.shutdown_();}}/**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */send(data){const dataStr=stringify(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//first, lets get the base64-encoded data\nconst base64data=base64Encode(dataStr);//We can only fit a certain amount in each URL, so we need to split this request\n//up into multiple pieces if it doesn't fit in one request.\nconst dataSegs=splitStringBySize(base64data,MAX_PAYLOAD_SIZE);//Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n//of segments so that we can reassemble the packet on the server.\nfor(let i=0;i<dataSegs.length;i++){this.scriptTagHolder.enqueueSegment(this.curSegmentNum,dataSegs.length,dataSegs[i]);this.curSegmentNum++;}}/**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */addDisconnectPingFrame(id,pw){if(isNodeSdk()){return;}this.myDisconnFrame=document.createElement('iframe');const urlParams={};urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM]='t';urlParams[FIREBASE_LONGPOLL_ID_PARAM]=id;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=pw;this.myDisconnFrame.src=this.urlFn(urlParams);this.myDisconnFrame.style.display='none';document.body.appendChild(this.myDisconnFrame);}/**\r\n     * Used to track the bytes received by this client\r\n     */incrementIncomingBytes_(args){// TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\nconst bytesReceived=stringify(args).length;this.bytesReceived+=bytesReceived;this.stats_.incrementCounter('bytes_received',bytesReceived);}}/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/class FirebaseIFrameScriptHolder{/**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */constructor(commandCB,onMessageCB,onDisconnect,urlFn){this.onDisconnect=onDisconnect;this.urlFn=urlFn;//We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n//problems in some browsers.\nthis.outstandingRequests=new Set();//A queue of the pending segments waiting for transmission to the server.\nthis.pendingSegs=[];//A serial number. We use this for two things:\n// 1) A way to ensure the browser doesn't cache responses to polls\n// 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n//    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n//    JSONP code in the order it was added to the iframe.\nthis.currentSerial=Math.floor(Math.random()*100000000);// This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n// incoming data from the server that we're waiting for).\nthis.sendNewPolls=true;if(!isNodeSdk()){//Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n//iframes where we put the long-polling script tags. We have two callbacks:\n//   1) Command Callback - Triggered for control issues, like starting a connection.\n//   2) Message Callback - Triggered when new data arrives.\nthis.uniqueCallbackIdentifier=LUIDGenerator();window[FIREBASE_LONGPOLL_COMMAND_CB_NAME+this.uniqueCallbackIdentifier]=commandCB;window[FIREBASE_LONGPOLL_DATA_CB_NAME+this.uniqueCallbackIdentifier]=onMessageCB;//Create an iframe for us to add script tags to.\nthis.myIFrame=FirebaseIFrameScriptHolder.createIFrame_();// Set the iframe's contents.\nlet script='';// if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n// for ie9, but ie8 needs to do it again in the document itself.\nif(this.myIFrame.src&&this.myIFrame.src.substr(0,'javascript:'.length)==='javascript:'){const currentDomain=document.domain;script='<script>document.domain=\"'+currentDomain+'\";</script>';}const iframeContents='<html><body>'+script+'</body></html>';try{this.myIFrame.doc.open();this.myIFrame.doc.write(iframeContents);this.myIFrame.doc.close();}catch(e){log('frame writing exception');if(e.stack){log(e.stack);}log(e);}}else{this.commandCB=commandCB;this.onMessageCB=onMessageCB;}}/**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */static createIFrame_(){const iframe=document.createElement('iframe');iframe.style.display='none';// This is necessary in order to initialize the document inside the iframe\nif(document.body){document.body.appendChild(iframe);try{// If document.domain has been modified in IE, this will throw an error, and we need to set the\n// domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n// Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\nconst a=iframe.contentWindow.document;if(!a){// Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\nlog('No IE domain setting required');}}catch(e){const domain=document.domain;iframe.src=\"javascript:void((function(){document.open();document.domain='\"+domain+\"';document.close();})())\";}}else{// LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n// never gets hit.\nthrow'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';}// Get the document of the iframe in a browser-specific way.\nif(iframe.contentDocument){iframe.doc=iframe.contentDocument;// Firefox, Opera, Safari\n}else if(iframe.contentWindow){iframe.doc=iframe.contentWindow.document;// Internet Explorer\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n}else if(iframe.document){// eslint-disable-next-line @typescript-eslint/no-explicit-any\niframe.doc=iframe.document;//others?\n}return iframe;}/**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */close(){//Mark this iframe as dead, so no new requests are sent.\nthis.alive=false;if(this.myIFrame){//We have to actually remove all of the html inside this iframe before removing it from the\n//window, or IE will continue loading and executing the script tags we've already added, which\n//can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\nthis.myIFrame.doc.body.textContent='';setTimeout(()=>{if(this.myIFrame!==null){document.body.removeChild(this.myIFrame);this.myIFrame=null;}},Math.floor(0));}// Protect from being called recursively.\nconst onDisconnect=this.onDisconnect;if(onDisconnect){this.onDisconnect=null;onDisconnect();}}/**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */startLongPoll(id,pw){this.myID=id;this.myPW=pw;this.alive=true;//send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\nwhile(this.newRequest_()){}}/**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */newRequest_(){// We keep one outstanding request open all the time to receive data, but if we need to send data\n// (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n// close the old request.\nif(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){//construct our url\nthis.currentSerial++;const urlParams={};urlParams[FIREBASE_LONGPOLL_ID_PARAM]=this.myID;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=this.myPW;urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=this.currentSerial;let theURL=this.urlFn(urlParams);//Now add as much data as we can.\nlet curDataString='';let i=0;while(this.pendingSegs.length>0){//first, lets see if the next segment will fit.\nconst nextSeg=this.pendingSegs[0];if(nextSeg.d.length+SEG_HEADER_SIZE+curDataString.length<=MAX_URL_DATA_SIZE){//great, the segment will fit. Lets append it.\nconst theSeg=this.pendingSegs.shift();curDataString=curDataString+'&'+FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM+i+'='+theSeg.seg+'&'+FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET+i+'='+theSeg.ts+'&'+FIREBASE_LONGPOLL_DATA_PARAM+i+'='+theSeg.d;i++;}else{break;}}theURL=theURL+curDataString;this.addLongPollTag_(theURL,this.currentSerial);return true;}else{return false;}}/**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */enqueueSegment(segnum,totalsegs,data){//add this to the queue of segments to send.\nthis.pendingSegs.push({seg:segnum,ts:totalsegs,d:data});//send the data immediately if there isn't already data being transmitted, unless\n//startLongPoll hasn't been called yet.\nif(this.alive){this.newRequest_();}}/**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */addLongPollTag_(url,serial){//remember that we sent this request.\nthis.outstandingRequests.add(serial);const doNewRequest=()=>{this.outstandingRequests.delete(serial);this.newRequest_();};// If this request doesn't return on its own accord (by the server sending us some data), we'll\n// create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\nconst keepaliveTimeout=setTimeout(doNewRequest,Math.floor(KEEPALIVE_REQUEST_INTERVAL));const readyStateCB=()=>{// Request completed.  Cancel the keepalive.\nclearTimeout(keepaliveTimeout);// Trigger a new request so we can continue receiving data.\ndoNewRequest();};this.addTag(url,readyStateCB);}/**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */addTag(url,loadCB){if(isNodeSdk()){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nthis.doNodeLongPoll(url,loadCB);}else{setTimeout(()=>{try{// if we're already closed, don't add this poll\nif(!this.sendNewPolls){return;}const newScript=this.myIFrame.doc.createElement('script');newScript.type='text/javascript';newScript.async=true;newScript.src=url;// eslint-disable-next-line @typescript-eslint/no-explicit-any\nnewScript.onload=newScript.onreadystatechange=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst rstate=newScript.readyState;if(!rstate||rstate==='loaded'||rstate==='complete'){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nnewScript.onload=newScript.onreadystatechange=null;if(newScript.parentNode){newScript.parentNode.removeChild(newScript);}loadCB();}};newScript.onerror=()=>{log('Long-poll script failed to load: '+url);this.sendNewPolls=false;this.close();};this.myIFrame.doc.body.appendChild(newScript);}catch(e){// TODO: we should make this error visible somehow\n}},Math.floor(1));}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const WEBSOCKET_MAX_FRAME_SIZE=16384;const WEBSOCKET_KEEPALIVE_INTERVAL=45000;let WebSocketImpl=null;if(typeof MozWebSocket!=='undefined'){WebSocketImpl=MozWebSocket;}else if(typeof WebSocket!=='undefined'){WebSocketImpl=WebSocket;}/**\r\n * Create a new websocket connection with the given callbacks.\r\n */class WebSocketConnection{/**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */constructor(connId,repoInfo,applicationId,appCheckToken,authToken,transportSessionId,lastSessionId){this.connId=connId;this.applicationId=applicationId;this.appCheckToken=appCheckToken;this.authToken=authToken;this.keepaliveTimer=null;this.frames=null;this.totalFrames=0;this.bytesSent=0;this.bytesReceived=0;this.log_=logWrapper(this.connId);this.stats_=statsManagerGetCollection(repoInfo);this.connURL=WebSocketConnection.connectionURL_(repoInfo,transportSessionId,lastSessionId,appCheckToken,applicationId);this.nodeAdmin=repoInfo.nodeAdmin;}/**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */static connectionURL_(repoInfo,transportSessionId,lastSessionId,appCheckToken,applicationId){const urlParams={};urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(!isNodeSdk()&&typeof location!=='undefined'&&location.hostname&&FORGE_DOMAIN_RE.test(location.hostname)){urlParams[REFERER_PARAM]=FORGE_REF;}if(transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=transportSessionId;}if(lastSessionId){urlParams[LAST_SESSION_PARAM]=lastSessionId;}if(appCheckToken){urlParams[APP_CHECK_TOKEN_PARAM]=appCheckToken;}if(applicationId){urlParams[APPLICATION_ID_PARAM]=applicationId;}return repoInfoConnectionURL(repoInfo,WEBSOCKET,urlParams);}/**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */open(onMessage,onDisconnect){this.onDisconnect=onDisconnect;this.onMessage=onMessage;this.log_('Websocket connecting to '+this.connURL);this.everConnected_=false;// Assume failure until proven otherwise.\nPersistentStorage.set('previous_websocket_failure',true);try{let options;if(isNodeSdk()){const device=this.nodeAdmin?'AdminNode':'Node';// UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\noptions={headers:{'User-Agent':`Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,'X-Firebase-GMPID':this.applicationId||''}};// If using Node with admin creds, AppCheck-related checks are unnecessary.\n// Note that we send the credentials here even if they aren't admin credentials, which is\n// not a problem.\n// Note that this header is just used to bypass appcheck, and the token should still be sent\n// through the websocket connection once it is established.\nif(this.authToken){options.headers['Authorization']=`Bearer ${this.authToken}`;}if(this.appCheckToken){options.headers['X-Firebase-AppCheck']=this.appCheckToken;}// Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\nconst env=process['env'];const proxy=this.connURL.indexOf('wss://')===0?env['HTTPS_PROXY']||env['https_proxy']:env['HTTP_PROXY']||env['http_proxy'];if(proxy){options['proxy']={origin:proxy};}}this.mySock=new WebSocketImpl(this.connURL,[],options);}catch(e){this.log_('Error instantiating WebSocket.');const error=e.message||e.data;if(error){this.log_(error);}this.onClosed_();return;}this.mySock.onopen=()=>{this.log_('Websocket connected.');this.everConnected_=true;};this.mySock.onclose=()=>{this.log_('Websocket connection was disconnected.');this.mySock=null;this.onClosed_();};this.mySock.onmessage=m=>{this.handleIncomingFrame(m);};this.mySock.onerror=e=>{this.log_('WebSocket error.  Closing connection.');// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst error=e.message||e.data;if(error){this.log_(error);}this.onClosed_();};}/**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */start(){}static forceDisallow(){WebSocketConnection.forceDisallow_=true;}static isAvailable(){let isOldAndroid=false;if(typeof navigator!=='undefined'&&navigator.userAgent){const oldAndroidRegex=/Android ([0-9]{0,}\\.[0-9]{0,})/;const oldAndroidMatch=navigator.userAgent.match(oldAndroidRegex);if(oldAndroidMatch&&oldAndroidMatch.length>1){if(parseFloat(oldAndroidMatch[1])<4.4){isOldAndroid=true;}}}return!isOldAndroid&&WebSocketImpl!==null&&!WebSocketConnection.forceDisallow_;}/**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */static previouslyFailed(){// If our persistent storage is actually only in-memory storage,\n// we default to assuming that it previously failed to be safe.\nreturn PersistentStorage.isInMemoryStorage||PersistentStorage.get('previous_websocket_failure')===true;}markConnectionHealthy(){PersistentStorage.remove('previous_websocket_failure');}appendFrame_(data){this.frames.push(data);if(this.frames.length===this.totalFrames){const fullMess=this.frames.join('');this.frames=null;const jsonMess=jsonEval(fullMess);//handle the message\nthis.onMessage(jsonMess);}}/**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */handleNewFrameCount_(frameCount){this.totalFrames=frameCount;this.frames=[];}/**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */extractFrameCount_(data){assert(this.frames===null,'We already have a frame buffer');// TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n// currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\nif(data.length<=6){const frameCount=Number(data);if(!isNaN(frameCount)){this.handleNewFrameCount_(frameCount);return null;}}this.handleNewFrameCount_(1);return data;}/**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */handleIncomingFrame(mess){if(this.mySock===null){return;// Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n}const data=mess['data'];this.bytesReceived+=data.length;this.stats_.incrementCounter('bytes_received',data.length);this.resetKeepAlive();if(this.frames!==null){// we're buffering\nthis.appendFrame_(data);}else{// try to parse out a frame count, otherwise, assume 1 and process it\nconst remainingData=this.extractFrameCount_(data);if(remainingData!==null){this.appendFrame_(remainingData);}}}/**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */send(data){this.resetKeepAlive();const dataStr=stringify(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//We can only fit a certain amount in each websocket frame, so we need to split this request\n//up into multiple pieces if it doesn't fit in one request.\nconst dataSegs=splitStringBySize(dataStr,WEBSOCKET_MAX_FRAME_SIZE);//Send the length header\nif(dataSegs.length>1){this.sendString_(String(dataSegs.length));}//Send the actual data in segments.\nfor(let i=0;i<dataSegs.length;i++){this.sendString_(dataSegs[i]);}}shutdown_(){this.isClosed_=true;if(this.keepaliveTimer){clearInterval(this.keepaliveTimer);this.keepaliveTimer=null;}if(this.mySock){this.mySock.close();this.mySock=null;}}onClosed_(){if(!this.isClosed_){this.log_('WebSocket is closing itself');this.shutdown_();// since this is an internal close, trigger the close listener\nif(this.onDisconnect){this.onDisconnect(this.everConnected_);this.onDisconnect=null;}}}/**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */close(){if(!this.isClosed_){this.log_('WebSocket is being closed');this.shutdown_();}}/**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */resetKeepAlive(){clearInterval(this.keepaliveTimer);this.keepaliveTimer=setInterval(()=>{//If there has been no websocket activity for a while, send a no-op\nif(this.mySock){this.sendString_('0');}this.resetKeepAlive();// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));}/**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */sendString_(str){// Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n// calls for some unknown reason.  We treat these as an error and disconnect.\n// See https://app.asana.com/0/58926111402292/68021340250410\ntry{this.mySock.send(str);}catch(e){this.log_('Exception thrown from WebSocket.send():',e.message||e.data,'Closing connection.');setTimeout(this.onClosed_.bind(this),0);}}}/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */WebSocketConnection.responsesRequiredToBeHealthy=2;/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */WebSocketConnection.healthyTimeout=30000;/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */class TransportManager{/**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */constructor(repoInfo){this.initTransports_(repoInfo);}static get ALL_TRANSPORTS(){return[BrowserPollConnection,WebSocketConnection];}/**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */static get IS_TRANSPORT_INITIALIZED(){return this.globalTransportInitialized_;}initTransports_(repoInfo){const isWebSocketsAvailable=WebSocketConnection&&WebSocketConnection['isAvailable']();let isSkipPollConnection=isWebSocketsAvailable&&!WebSocketConnection.previouslyFailed();if(repoInfo.webSocketOnly){if(!isWebSocketsAvailable){warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");}isSkipPollConnection=true;}if(isSkipPollConnection){this.transports_=[WebSocketConnection];}else{const transports=this.transports_=[];for(const transport of TransportManager.ALL_TRANSPORTS){if(transport&&transport['isAvailable']()){transports.push(transport);}}TransportManager.globalTransportInitialized_=true;}}/**\r\n     * @returns The constructor for the initial transport to use\r\n     */initialTransport(){if(this.transports_.length>0){return this.transports_[0];}else{throw new Error('No transports available');}}/**\r\n     * @returns The constructor for the next transport, or null\r\n     */upgradeTransport(){if(this.transports_.length>1){return this.transports_[1];}else{return null;}}}// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_=false;/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT=60000;// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS=5000;// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE=10*1024;const BYTES_RECEIVED_HEALTHY_OVERRIDE=100*1024;const MESSAGE_TYPE='t';const MESSAGE_DATA='d';const CONTROL_SHUTDOWN='s';const CONTROL_RESET='r';const CONTROL_ERROR='e';const CONTROL_PONG='o';const SWITCH_ACK='a';const END_TRANSMISSION='n';const PING='p';const SERVER_HELLO='h';/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */class Connection{/**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */constructor(id,repoInfo_,applicationId_,appCheckToken_,authToken_,onMessage_,onReady_,onDisconnect_,onKill_,lastSessionId){this.id=id;this.repoInfo_=repoInfo_;this.applicationId_=applicationId_;this.appCheckToken_=appCheckToken_;this.authToken_=authToken_;this.onMessage_=onMessage_;this.onReady_=onReady_;this.onDisconnect_=onDisconnect_;this.onKill_=onKill_;this.lastSessionId=lastSessionId;this.connectionCount=0;this.pendingDataMessages=[];this.state_=0/* RealtimeState.CONNECTING */;this.log_=logWrapper('c:'+this.id+':');this.transportManager_=new TransportManager(repoInfo_);this.log_('Connection created');this.start_();}/**\r\n     * Starts a connection attempt\r\n     */start_(){const conn=this.transportManager_.initialTransport();this.conn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,null,this.lastSessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n// can consider the transport healthy.\nthis.primaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;const onMessageReceived=this.connReceiver_(this.conn_);const onConnectionLost=this.disconnReceiver_(this.conn_);this.tx_=this.conn_;this.rx_=this.conn_;this.secondaryConn_=null;this.isHealthy_=false;/*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */setTimeout(()=>{// this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\nthis.conn_&&this.conn_.open(onMessageReceived,onConnectionLost);},Math.floor(0));const healthyTimeoutMS=conn['healthyTimeout']||0;if(healthyTimeoutMS>0){this.healthyTimeout_=setTimeoutNonBlocking(()=>{this.healthyTimeout_=null;if(!this.isHealthy_){if(this.conn_&&this.conn_.bytesReceived>BYTES_RECEIVED_HEALTHY_OVERRIDE){this.log_('Connection exceeded healthy timeout but has received '+this.conn_.bytesReceived+' bytes.  Marking connection healthy.');this.isHealthy_=true;this.conn_.markConnectionHealthy();}else if(this.conn_&&this.conn_.bytesSent>BYTES_SENT_HEALTHY_OVERRIDE){this.log_('Connection exceeded healthy timeout but has sent '+this.conn_.bytesSent+' bytes.  Leaving connection alive.');// NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n// the server.\n}else{this.log_('Closing unhealthy connection after timeout.');this.close();}}// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(healthyTimeoutMS));}}nextTransportId_(){return'c:'+this.id+':'+this.connectionCount++;}disconnReceiver_(conn){return everConnected=>{if(conn===this.conn_){this.onConnectionLost_(everConnected);}else if(conn===this.secondaryConn_){this.log_('Secondary connection lost.');this.onSecondaryConnectionLost_();}else{this.log_('closing an old connection');}};}connReceiver_(conn){return message=>{if(this.state_!==2/* RealtimeState.DISCONNECTED */){if(conn===this.rx_){this.onPrimaryMessageReceived_(message);}else if(conn===this.secondaryConn_){this.onSecondaryMessageReceived_(message);}else{this.log_('message on old connection');}}};}/**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */sendRequest(dataMsg){// wrap in a data message envelope and send it on\nconst msg={t:'d',d:dataMsg};this.sendData_(msg);}tryCleanupConnection(){if(this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_){this.log_('cleaning up and promoting a connection: '+this.secondaryConn_.connId);this.conn_=this.secondaryConn_;this.secondaryConn_=null;// the server will shutdown the old connection\n}}onSecondaryControl_(controlData){if(MESSAGE_TYPE in controlData){const cmd=controlData[MESSAGE_TYPE];if(cmd===SWITCH_ACK){this.upgradeIfSecondaryHealthy_();}else if(cmd===CONTROL_RESET){// Most likely the session wasn't valid. Abandon the switch attempt\nthis.log_('Got a reset on secondary, closing it');this.secondaryConn_.close();// If we were already using this connection for something, than we need to fully close\nif(this.tx_===this.secondaryConn_||this.rx_===this.secondaryConn_){this.close();}}else if(cmd===CONTROL_PONG){this.log_('got pong on secondary.');this.secondaryResponsesRequired_--;this.upgradeIfSecondaryHealthy_();}}}onSecondaryMessageReceived_(parsedData){const layer=requireKey('t',parsedData);const data=requireKey('d',parsedData);if(layer==='c'){this.onSecondaryControl_(data);}else if(layer==='d'){// got a data message, but we're still second connection. Need to buffer it up\nthis.pendingDataMessages.push(data);}else{throw new Error('Unknown protocol layer: '+layer);}}upgradeIfSecondaryHealthy_(){if(this.secondaryResponsesRequired_<=0){this.log_('Secondary connection is healthy.');this.isHealthy_=true;this.secondaryConn_.markConnectionHealthy();this.proceedWithUpgrade_();}else{// Send a ping to make sure the connection is healthy.\nthis.log_('sending ping on secondary.');this.secondaryConn_.send({t:'c',d:{t:PING,d:{}}});}}proceedWithUpgrade_(){// tell this connection to consider itself open\nthis.secondaryConn_.start();// send ack\nthis.log_('sending client ack on secondary');this.secondaryConn_.send({t:'c',d:{t:SWITCH_ACK,d:{}}});// send end packet on primary transport, switch to sending on this one\n// can receive on this one, buffer responses until end received on primary transport\nthis.log_('Ending transmission on primary');this.conn_.send({t:'c',d:{t:END_TRANSMISSION,d:{}}});this.tx_=this.secondaryConn_;this.tryCleanupConnection();}onPrimaryMessageReceived_(parsedData){// Must refer to parsedData properties in quotes, so closure doesn't touch them.\nconst layer=requireKey('t',parsedData);const data=requireKey('d',parsedData);if(layer==='c'){this.onControl_(data);}else if(layer==='d'){this.onDataMessage_(data);}}onDataMessage_(message){this.onPrimaryResponse_();// We don't do anything with data messages, just kick them up a level\nthis.onMessage_(message);}onPrimaryResponse_(){if(!this.isHealthy_){this.primaryResponsesRequired_--;if(this.primaryResponsesRequired_<=0){this.log_('Primary connection is healthy.');this.isHealthy_=true;this.conn_.markConnectionHealthy();}}}onControl_(controlData){const cmd=requireKey(MESSAGE_TYPE,controlData);if(MESSAGE_DATA in controlData){const payload=controlData[MESSAGE_DATA];if(cmd===SERVER_HELLO){const handshakePayload=Object.assign({},payload);if(this.repoInfo_.isUsingEmulator){// Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\nhandshakePayload.h=this.repoInfo_.host;}this.onHandshake_(handshakePayload);}else if(cmd===END_TRANSMISSION){this.log_('recvd end transmission on primary');this.rx_=this.secondaryConn_;for(let i=0;i<this.pendingDataMessages.length;++i){this.onDataMessage_(this.pendingDataMessages[i]);}this.pendingDataMessages=[];this.tryCleanupConnection();}else if(cmd===CONTROL_SHUTDOWN){// This was previously the 'onKill' callback passed to the lower-level connection\n// payload in this case is the reason for the shutdown. Generally a human-readable error\nthis.onConnectionShutdown_(payload);}else if(cmd===CONTROL_RESET){// payload in this case is the host we should contact\nthis.onReset_(payload);}else if(cmd===CONTROL_ERROR){error('Server Error: '+payload);}else if(cmd===CONTROL_PONG){this.log_('got pong on primary.');this.onPrimaryResponse_();this.sendPingOnPrimaryIfNecessary_();}else{error('Unknown control packet command: '+cmd);}}}/**\r\n     * @param handshake - The handshake data returned from the server\r\n     */onHandshake_(handshake){const timestamp=handshake.ts;const version=handshake.v;const host=handshake.h;this.sessionId=handshake.s;this.repoInfo_.host=host;// if we've already closed the connection, then don't bother trying to progress further\nif(this.state_===0/* RealtimeState.CONNECTING */){this.conn_.start();this.onConnectionEstablished_(this.conn_,timestamp);if(PROTOCOL_VERSION!==version){warn('Protocol version mismatch detected');}// TODO: do we want to upgrade? when? maybe a delay?\nthis.tryStartUpgrade_();}}tryStartUpgrade_(){const conn=this.transportManager_.upgradeTransport();if(conn){this.startUpgrade_(conn);}}startUpgrade_(conn){this.secondaryConn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,this.sessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n// can consider the transport healthy.\nthis.secondaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;const onMessage=this.connReceiver_(this.secondaryConn_);const onDisconnect=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(onMessage,onDisconnect);// If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\nsetTimeoutNonBlocking(()=>{if(this.secondaryConn_){this.log_('Timed out trying to upgrade.');this.secondaryConn_.close();}},Math.floor(UPGRADE_TIMEOUT));}onReset_(host){this.log_('Reset packet received.  New host: '+host);this.repoInfo_.host=host;// TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n// We don't currently support resets after the connection has already been established\nif(this.state_===1/* RealtimeState.CONNECTED */){this.close();}else{// Close whatever connections we have open and start again.\nthis.closeConnections_();this.start_();}}onConnectionEstablished_(conn,timestamp){this.log_('Realtime connection established.');this.conn_=conn;this.state_=1/* RealtimeState.CONNECTED */;if(this.onReady_){this.onReady_(timestamp,this.sessionId);this.onReady_=null;}// If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n// send some pings.\nif(this.primaryResponsesRequired_===0){this.log_('Primary connection is healthy.');this.isHealthy_=true;}else{setTimeoutNonBlocking(()=>{this.sendPingOnPrimaryIfNecessary_();},Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));}}sendPingOnPrimaryIfNecessary_(){// If the connection isn't considered healthy yet, we'll send a noop ping packet request.\nif(!this.isHealthy_&&this.state_===1/* RealtimeState.CONNECTED */){this.log_('sending ping on primary.');this.sendData_({t:'c',d:{t:PING,d:{}}});}}onSecondaryConnectionLost_(){const conn=this.secondaryConn_;this.secondaryConn_=null;if(this.tx_===conn||this.rx_===conn){// we are relying on this connection already in some capacity. Therefore, a failure is real\nthis.close();}}/**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */onConnectionLost_(everConnected){this.conn_=null;// NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n// called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\nif(!everConnected&&this.state_===0/* RealtimeState.CONNECTING */){this.log_('Realtime connection failed.');// Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\nif(this.repoInfo_.isCacheableHost()){PersistentStorage.remove('host:'+this.repoInfo_.host);// reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\nthis.repoInfo_.internalHost=this.repoInfo_.host;}}else if(this.state_===1/* RealtimeState.CONNECTED */){this.log_('Realtime connection lost.');}this.close();}onConnectionShutdown_(reason){this.log_('Connection shutdown command received. Shutting down...');if(this.onKill_){this.onKill_(reason);this.onKill_=null;}// We intentionally don't want to fire onDisconnect (kill is a different case),\n// so clear the callback.\nthis.onDisconnect_=null;this.close();}sendData_(data){if(this.state_!==1/* RealtimeState.CONNECTED */){throw'Connection is not connected';}else{this.tx_.send(data);}}/**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */close(){if(this.state_!==2/* RealtimeState.DISCONNECTED */){this.log_('Closing realtime connection.');this.state_=2/* RealtimeState.DISCONNECTED */;this.closeConnections_();if(this.onDisconnect_){this.onDisconnect_();this.onDisconnect_=null;}}}closeConnections_(){this.log_('Shutting down all connections');if(this.conn_){this.conn_.close();this.conn_=null;}if(this.secondaryConn_){this.secondaryConn_.close();this.secondaryConn_=null;}if(this.healthyTimeout_){clearTimeout(this.healthyTimeout_);this.healthyTimeout_=null;}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */class ServerActions{put(pathString,data,onComplete,hash){}merge(pathString,data,onComplete,hash){}/**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */refreshAuthToken(token){}/**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */refreshAppCheckToken(token){}onDisconnectPut(pathString,data,onComplete){}onDisconnectMerge(pathString,data,onComplete){}onDisconnectCancel(pathString,onComplete){}reportStats(stats){}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */class EventEmitter{constructor(allowedEvents_){this.allowedEvents_=allowedEvents_;this.listeners_={};assert(Array.isArray(allowedEvents_)&&allowedEvents_.length>0,'Requires a non-empty array');}/**\r\n     * To be called by derived classes to trigger events.\r\n     */trigger(eventType,...varArgs){if(Array.isArray(this.listeners_[eventType])){// Clone the list, since callbacks could add/remove listeners.\nconst listeners=[...this.listeners_[eventType]];for(let i=0;i<listeners.length;i++){listeners[i].callback.apply(listeners[i].context,varArgs);}}}on(eventType,callback,context){this.validateEventType_(eventType);this.listeners_[eventType]=this.listeners_[eventType]||[];this.listeners_[eventType].push({callback,context});const eventData=this.getInitialEvent(eventType);if(eventData){callback.apply(context,eventData);}}off(eventType,callback,context){this.validateEventType_(eventType);const listeners=this.listeners_[eventType]||[];for(let i=0;i<listeners.length;i++){if(listeners[i].callback===callback&&(!context||context===listeners[i].context)){listeners.splice(i,1);return;}}}validateEventType_(eventType){assert(this.allowedEvents_.find(et=>{return et===eventType;}),'Unknown event: '+eventType);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */class OnlineMonitor extends EventEmitter{constructor(){super(['online']);this.online_=true;// We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n// https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n// It would seem that the 'online' event does not always fire consistently. So we disable it\n// for Cordova.\nif(typeof window!=='undefined'&&typeof window.addEventListener!=='undefined'&&!isMobileCordova()){window.addEventListener('online',()=>{if(!this.online_){this.online_=true;this.trigger('online',true);}},false);window.addEventListener('offline',()=>{if(this.online_){this.online_=false;this.trigger('online',false);}},false);}}static getInstance(){return new OnlineMonitor();}getInitialEvent(eventType){assert(eventType==='online','Unknown event type: '+eventType);return[this.online_];}currentlyOnline(){return this.online_;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /** Maximum key depth. */const MAX_PATH_DEPTH=32;/** Maximum number of (UTF8) bytes in a Firebase path. */const MAX_PATH_LENGTH_BYTES=768;/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */class Path{/**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */constructor(pathOrString,pieceNum){if(pieceNum===void 0){this.pieces_=pathOrString.split('/');// Remove empty pieces.\nlet copyTo=0;for(let i=0;i<this.pieces_.length;i++){if(this.pieces_[i].length>0){this.pieces_[copyTo]=this.pieces_[i];copyTo++;}}this.pieces_.length=copyTo;this.pieceNum_=0;}else{this.pieces_=pathOrString;this.pieceNum_=pieceNum;}}toString(){let pathString='';for(let i=this.pieceNum_;i<this.pieces_.length;i++){if(this.pieces_[i]!==''){pathString+='/'+this.pieces_[i];}}return pathString||'/';}}function newEmptyPath(){return new Path('');}function pathGetFront(path){if(path.pieceNum_>=path.pieces_.length){return null;}return path.pieces_[path.pieceNum_];}/**\r\n * @returns The number of segments in this path\r\n */function pathGetLength(path){return path.pieces_.length-path.pieceNum_;}function pathPopFront(path){let pieceNum=path.pieceNum_;if(pieceNum<path.pieces_.length){pieceNum++;}return new Path(path.pieces_,pieceNum);}function pathGetBack(path){if(path.pieceNum_<path.pieces_.length){return path.pieces_[path.pieces_.length-1];}return null;}function pathToUrlEncodedString(path){let pathString='';for(let i=path.pieceNum_;i<path.pieces_.length;i++){if(path.pieces_[i]!==''){pathString+='/'+encodeURIComponent(String(path.pieces_[i]));}}return pathString||'/';}/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */function pathSlice(path,begin=0){return path.pieces_.slice(path.pieceNum_+begin);}function pathParent(path){if(path.pieceNum_>=path.pieces_.length){return null;}const pieces=[];for(let i=path.pieceNum_;i<path.pieces_.length-1;i++){pieces.push(path.pieces_[i]);}return new Path(pieces,0);}function pathChild(path,childPathObj){const pieces=[];for(let i=path.pieceNum_;i<path.pieces_.length;i++){pieces.push(path.pieces_[i]);}if(childPathObj instanceof Path){for(let i=childPathObj.pieceNum_;i<childPathObj.pieces_.length;i++){pieces.push(childPathObj.pieces_[i]);}}else{const childPieces=childPathObj.split('/');for(let i=0;i<childPieces.length;i++){if(childPieces[i].length>0){pieces.push(childPieces[i]);}}}return new Path(pieces,0);}/**\r\n * @returns True if there are no segments in this path\r\n */function pathIsEmpty(path){return path.pieceNum_>=path.pieces_.length;}/**\r\n * @returns The path from outerPath to innerPath\r\n */function newRelativePath(outerPath,innerPath){const outer=pathGetFront(outerPath),inner=pathGetFront(innerPath);if(outer===null){return innerPath;}else if(outer===inner){return newRelativePath(pathPopFront(outerPath),pathPopFront(innerPath));}else{throw new Error('INTERNAL ERROR: innerPath ('+innerPath+') is not within '+'outerPath ('+outerPath+')');}}/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */function pathCompare(left,right){const leftKeys=pathSlice(left,0);const rightKeys=pathSlice(right,0);for(let i=0;i<leftKeys.length&&i<rightKeys.length;i++){const cmp=nameCompare(leftKeys[i],rightKeys[i]);if(cmp!==0){return cmp;}}if(leftKeys.length===rightKeys.length){return 0;}return leftKeys.length<rightKeys.length?-1:1;}/**\r\n * @returns true if paths are the same.\r\n */function pathEquals(path,other){if(pathGetLength(path)!==pathGetLength(other)){return false;}for(let i=path.pieceNum_,j=other.pieceNum_;i<=path.pieces_.length;i++,j++){if(path.pieces_[i]!==other.pieces_[j]){return false;}}return true;}/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */function pathContains(path,other){let i=path.pieceNum_;let j=other.pieceNum_;if(pathGetLength(path)>pathGetLength(other)){return false;}while(i<path.pieces_.length){if(path.pieces_[i]!==other.pieces_[j]){return false;}++i;++j;}return true;}/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */class ValidationPath{/**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */constructor(path,errorPrefix_){this.errorPrefix_=errorPrefix_;this.parts_=pathSlice(path,0);/** Initialize to number of '/' chars needed in path. */this.byteLength_=Math.max(1,this.parts_.length);for(let i=0;i<this.parts_.length;i++){this.byteLength_+=stringLength(this.parts_[i]);}validationPathCheckValid(this);}}function validationPathPush(validationPath,child){// Count the needed '/'\nif(validationPath.parts_.length>0){validationPath.byteLength_+=1;}validationPath.parts_.push(child);validationPath.byteLength_+=stringLength(child);validationPathCheckValid(validationPath);}function validationPathPop(validationPath){const last=validationPath.parts_.pop();validationPath.byteLength_-=stringLength(last);// Un-count the previous '/'\nif(validationPath.parts_.length>0){validationPath.byteLength_-=1;}}function validationPathCheckValid(validationPath){if(validationPath.byteLength_>MAX_PATH_LENGTH_BYTES){throw new Error(validationPath.errorPrefix_+'has a key path longer than '+MAX_PATH_LENGTH_BYTES+' bytes ('+validationPath.byteLength_+').');}if(validationPath.parts_.length>MAX_PATH_DEPTH){throw new Error(validationPath.errorPrefix_+'path specified exceeds the maximum depth that can be written ('+MAX_PATH_DEPTH+') or object contains a cycle '+validationPathToErrorString(validationPath));}}/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */function validationPathToErrorString(validationPath){if(validationPath.parts_.length===0){return'';}return\"in property '\"+validationPath.parts_.join('.')+\"'\";}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class VisibilityMonitor extends EventEmitter{constructor(){super(['visible']);let hidden;let visibilityChange;if(typeof document!=='undefined'&&typeof document.addEventListener!=='undefined'){if(typeof document['hidden']!=='undefined'){// Opera 12.10 and Firefox 18 and later support\nvisibilityChange='visibilitychange';hidden='hidden';}else if(typeof document['mozHidden']!=='undefined'){visibilityChange='mozvisibilitychange';hidden='mozHidden';}else if(typeof document['msHidden']!=='undefined'){visibilityChange='msvisibilitychange';hidden='msHidden';}else if(typeof document['webkitHidden']!=='undefined'){visibilityChange='webkitvisibilitychange';hidden='webkitHidden';}}// Initially, we always assume we are visible. This ensures that in browsers\n// without page visibility support or in cases where we are never visible\n// (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n// reconnects\nthis.visible_=true;if(visibilityChange){document.addEventListener(visibilityChange,()=>{const visible=!document[hidden];if(visible!==this.visible_){this.visible_=visible;this.trigger('visible',visible);}},false);}}static getInstance(){return new VisibilityMonitor();}getInitialEvent(eventType){assert(eventType==='visible','Unknown event type: '+eventType);return[this.visible_];}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const RECONNECT_MIN_DELAY=1000;const RECONNECT_MAX_DELAY_DEFAULT=60*5*1000;// 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS=30*1000;// 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER=1.3;const RECONNECT_DELAY_RESET_TIMEOUT=30000;// Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON='server_kill';// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD=3;/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */class PersistentConnection extends ServerActions{/**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */constructor(repoInfo_,applicationId_,onDataUpdate_,onConnectStatus_,onServerInfoUpdate_,authTokenProvider_,appCheckTokenProvider_,authOverride_){super();this.repoInfo_=repoInfo_;this.applicationId_=applicationId_;this.onDataUpdate_=onDataUpdate_;this.onConnectStatus_=onConnectStatus_;this.onServerInfoUpdate_=onServerInfoUpdate_;this.authTokenProvider_=authTokenProvider_;this.appCheckTokenProvider_=appCheckTokenProvider_;this.authOverride_=authOverride_;// Used for diagnostic logging.\nthis.id=PersistentConnection.nextPersistentConnectionId_++;this.log_=logWrapper('p:'+this.id+':');this.interruptReasons_={};this.listens=new Map();this.outstandingPuts_=[];this.outstandingGets_=[];this.outstandingPutCount_=0;this.outstandingGetCount_=0;this.onDisconnectRequestQueue_=[];this.connected_=false;this.reconnectDelay_=RECONNECT_MIN_DELAY;this.maxReconnectDelay_=RECONNECT_MAX_DELAY_DEFAULT;this.securityDebugCallback_=null;this.lastSessionId=null;this.establishConnectionTimer_=null;this.visible_=false;// Before we get connected, we keep a queue of pending messages to send.\nthis.requestCBHash_={};this.requestNumber_=0;this.realtime_=null;this.authToken_=null;this.appCheckToken_=null;this.forceTokenRefresh_=false;this.invalidAuthTokenCount_=0;this.invalidAppCheckTokenCount_=0;this.firstConnection_=true;this.lastConnectionAttemptTime_=null;this.lastConnectionEstablishedTime_=null;if(authOverride_&&!isNodeSdk()){throw new Error('Auth override specified in options, but not supported on non Node.js platforms');}VisibilityMonitor.getInstance().on('visible',this.onVisible_,this);if(repoInfo_.host.indexOf('fblocal')===-1){OnlineMonitor.getInstance().on('online',this.onOnline_,this);}}sendRequest(action,body,onResponse){const curReqNum=++this.requestNumber_;const msg={r:curReqNum,a:action,b:body};this.log_(stringify(msg));assert(this.connected_,\"sendRequest call when we're not connected not allowed.\");this.realtime_.sendRequest(msg);if(onResponse){this.requestCBHash_[curReqNum]=onResponse;}}get(query){this.initConnection_();const deferred=new Deferred();const request={p:query._path.toString(),q:query._queryObject};const outstandingGet={action:'g',request,onComplete:message=>{const payload=message['d'];if(message['s']==='ok'){deferred.resolve(payload);}else{deferred.reject(payload);}}};this.outstandingGets_.push(outstandingGet);this.outstandingGetCount_++;const index=this.outstandingGets_.length-1;if(this.connected_){this.sendGet_(index);}return deferred.promise;}listen(query,currentHashFn,tag,onComplete){this.initConnection_();const queryId=query._queryIdentifier;const pathString=query._path.toString();this.log_('Listen called for '+pathString+' '+queryId);if(!this.listens.has(pathString)){this.listens.set(pathString,new Map());}assert(query._queryParams.isDefault()||!query._queryParams.loadsAllData(),'listen() called for non-default but complete query');assert(!this.listens.get(pathString).has(queryId),`listen() called twice for same path/queryId.`);const listenSpec={onComplete,hashFn:currentHashFn,query,tag};this.listens.get(pathString).set(queryId,listenSpec);if(this.connected_){this.sendListen_(listenSpec);}}sendGet_(index){const get=this.outstandingGets_[index];this.sendRequest('g',get.request,message=>{delete this.outstandingGets_[index];this.outstandingGetCount_--;if(this.outstandingGetCount_===0){this.outstandingGets_=[];}if(get.onComplete){get.onComplete(message);}});}sendListen_(listenSpec){const query=listenSpec.query;const pathString=query._path.toString();const queryId=query._queryIdentifier;this.log_('Listen on '+pathString+' for '+queryId);const req={/*path*/p:pathString};const action='q';// Only bother to send query if it's non-default.\nif(listenSpec.tag){req['q']=query._queryObject;req['t']=listenSpec.tag;}req[/*hash*/'h']=listenSpec.hashFn();this.sendRequest(action,req,message=>{const payload=message[/*data*/'d'];const status=message[/*status*/'s'];// print warnings in any case...\nPersistentConnection.warnOnListenWarnings_(payload,query);const currentListenSpec=this.listens.get(pathString)&&this.listens.get(pathString).get(queryId);// only trigger actions if the listen hasn't been removed and readded\nif(currentListenSpec===listenSpec){this.log_('listen response',message);if(status!=='ok'){this.removeListen_(pathString,queryId);}if(listenSpec.onComplete){listenSpec.onComplete(status,payload);}}});}static warnOnListenWarnings_(payload,query){if(payload&&typeof payload==='object'&&contains(payload,'w')){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst warnings=safeGet(payload,'w');if(Array.isArray(warnings)&&~warnings.indexOf('no_index')){const indexSpec='\".indexOn\": \"'+query._queryParams.getIndex().toString()+'\"';const indexPath=query._path.toString();warn(`Using an unspecified index. Your data will be downloaded and `+`filtered on the client. Consider adding ${indexSpec} at `+`${indexPath} to your security rules for better performance.`);}}}refreshAuthToken(token){this.authToken_=token;this.log_('Auth token refreshed');if(this.authToken_){this.tryAuth();}else{//If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n//the credential so we dont become authenticated next time we connect.\nif(this.connected_){this.sendRequest('unauth',{},()=>{});}}this.reduceReconnectDelayIfAdminCredential_(token);}reduceReconnectDelayIfAdminCredential_(credential){// NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n// Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\nconst isFirebaseSecret=credential&&credential.length===40;if(isFirebaseSecret||isAdmin(credential)){this.log_('Admin auth credential detected.  Reducing max reconnect time.');this.maxReconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;}}refreshAppCheckToken(token){this.appCheckToken_=token;this.log_('App check token refreshed');if(this.appCheckToken_){this.tryAppCheck();}else{//If we're connected we want to let the server know to unauthenticate us.\n//If we're not connected, simply delete the credential so we dont become\n// authenticated next time we connect.\nif(this.connected_){this.sendRequest('unappeck',{},()=>{});}}}/**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */tryAuth(){if(this.connected_&&this.authToken_){const token=this.authToken_;const authMethod=isValidFormat(token)?'auth':'gauth';const requestData={cred:token};if(this.authOverride_===null){requestData['noauth']=true;}else if(typeof this.authOverride_==='object'){requestData['authvar']=this.authOverride_;}this.sendRequest(authMethod,requestData,res=>{const status=res[/*status*/'s'];const data=res[/*data*/'d']||'error';if(this.authToken_===token){if(status==='ok'){this.invalidAuthTokenCount_=0;}else{// Triggers reconnect and force refresh for auth token\nthis.onAuthRevoked_(status,data);}}});}}/**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */tryAppCheck(){if(this.connected_&&this.appCheckToken_){this.sendRequest('appcheck',{'token':this.appCheckToken_},res=>{const status=res[/*status*/'s'];const data=res[/*data*/'d']||'error';if(status==='ok'){this.invalidAppCheckTokenCount_=0;}else{this.onAppCheckRevoked_(status,data);}});}}/**\r\n     * @inheritDoc\r\n     */unlisten(query,tag){const pathString=query._path.toString();const queryId=query._queryIdentifier;this.log_('Unlisten called for '+pathString+' '+queryId);assert(query._queryParams.isDefault()||!query._queryParams.loadsAllData(),'unlisten() called for non-default but complete query');const listen=this.removeListen_(pathString,queryId);if(listen&&this.connected_){this.sendUnlisten_(pathString,queryId,query._queryObject,tag);}}sendUnlisten_(pathString,queryId,queryObj,tag){this.log_('Unlisten on '+pathString+' for '+queryId);const req={/*path*/p:pathString};const action='n';// Only bother sending queryId if it's non-default.\nif(tag){req['q']=queryObj;req['t']=tag;}this.sendRequest(action,req);}onDisconnectPut(pathString,data,onComplete){this.initConnection_();if(this.connected_){this.sendOnDisconnect_('o',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString,action:'o',data,onComplete});}}onDisconnectMerge(pathString,data,onComplete){this.initConnection_();if(this.connected_){this.sendOnDisconnect_('om',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString,action:'om',data,onComplete});}}onDisconnectCancel(pathString,onComplete){this.initConnection_();if(this.connected_){this.sendOnDisconnect_('oc',pathString,null,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString,action:'oc',data:null,onComplete});}}sendOnDisconnect_(action,pathString,data,onComplete){const request={/*path*/p:pathString,/*data*/d:data};this.log_('onDisconnect '+action,request);this.sendRequest(action,request,response=>{if(onComplete){setTimeout(()=>{onComplete(response[/*status*/'s'],response[/* data */'d']);},Math.floor(0));}});}put(pathString,data,onComplete,hash){this.putInternal('p',pathString,data,onComplete,hash);}merge(pathString,data,onComplete,hash){this.putInternal('m',pathString,data,onComplete,hash);}putInternal(action,pathString,data,onComplete,hash){this.initConnection_();const request={/*path*/p:pathString,/*data*/d:data};if(hash!==undefined){request[/*hash*/'h']=hash;}// TODO: Only keep track of the most recent put for a given path?\nthis.outstandingPuts_.push({action,request,onComplete});this.outstandingPutCount_++;const index=this.outstandingPuts_.length-1;if(this.connected_){this.sendPut_(index);}else{this.log_('Buffering put: '+pathString);}}sendPut_(index){const action=this.outstandingPuts_[index].action;const request=this.outstandingPuts_[index].request;const onComplete=this.outstandingPuts_[index].onComplete;this.outstandingPuts_[index].queued=this.connected_;this.sendRequest(action,request,message=>{this.log_(action+' response',message);delete this.outstandingPuts_[index];this.outstandingPutCount_--;// Clean up array occasionally.\nif(this.outstandingPutCount_===0){this.outstandingPuts_=[];}if(onComplete){onComplete(message[/*status*/'s'],message[/* data */'d']);}});}reportStats(stats){// If we're not connected, we just drop the stats.\nif(this.connected_){const request={/*counters*/c:stats};this.log_('reportStats',request);this.sendRequest(/*stats*/'s',request,result=>{const status=result[/*status*/'s'];if(status!=='ok'){const errorReason=result[/* data */'d'];this.log_('reportStats','Error sending stats: '+errorReason);}});}}onDataMessage_(message){if('r'in message){// this is a response\nthis.log_('from server: '+stringify(message));const reqNum=message['r'];const onResponse=this.requestCBHash_[reqNum];if(onResponse){delete this.requestCBHash_[reqNum];onResponse(message[/*body*/'b']);}}else if('error'in message){throw'A server-side error has occurred: '+message['error'];}else if('a'in message){// a and b are action and body, respectively\nthis.onDataPush_(message['a'],message['b']);}}onDataPush_(action,body){this.log_('handleServerMessage',action,body);if(action==='d'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge*/false,body['t']);}else if(action==='m'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge=*/true,body['t']);}else if(action==='c'){this.onListenRevoked_(body[/*path*/'p'],body[/*query*/'q']);}else if(action==='ac'){this.onAuthRevoked_(body[/*status code*/'s'],body[/* explanation */'d']);}else if(action==='apc'){this.onAppCheckRevoked_(body[/*status code*/'s'],body[/* explanation */'d']);}else if(action==='sd'){this.onSecurityDebugPacket_(body);}else{error('Unrecognized action received from server: '+stringify(action)+'\\nAre you using the latest client?');}}onReady_(timestamp,sessionId){this.log_('connection ready');this.connected_=true;this.lastConnectionEstablishedTime_=new Date().getTime();this.handleTimestamp_(timestamp);this.lastSessionId=sessionId;if(this.firstConnection_){this.sendConnectStats_();}this.restoreState_();this.firstConnection_=false;this.onConnectStatus_(true);}scheduleConnect_(timeout){assert(!this.realtime_,\"Scheduling a connect when we're already connected/ing?\");if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);}// NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n// Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\nthis.establishConnectionTimer_=setTimeout(()=>{this.establishConnectionTimer_=null;this.establishConnection_();// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(timeout));}initConnection_(){if(!this.realtime_&&this.firstConnection_){this.scheduleConnect_(0);}}onVisible_(visible){// NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\nif(visible&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_){this.log_('Window became visible.  Reducing delay.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}this.visible_=visible;}onOnline_(online){if(online){this.log_('Browser went online.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}else{this.log_('Browser went offline.  Killing connection.');if(this.realtime_){this.realtime_.close();}}}onRealtimeDisconnect_(){this.log_('data client disconnected');this.connected_=false;this.realtime_=null;// Since we don't know if our sent transactions succeeded or not, we need to cancel them.\nthis.cancelSentTransactions_();// Clear out the pending requests.\nthis.requestCBHash_={};if(this.shouldReconnect_()){if(!this.visible_){this.log_(\"Window isn't visible.  Delaying reconnect.\");this.reconnectDelay_=this.maxReconnectDelay_;this.lastConnectionAttemptTime_=new Date().getTime();}else if(this.lastConnectionEstablishedTime_){// If we've been connected long enough, reset reconnect delay to minimum.\nconst timeSinceLastConnectSucceeded=new Date().getTime()-this.lastConnectionEstablishedTime_;if(timeSinceLastConnectSucceeded>RECONNECT_DELAY_RESET_TIMEOUT){this.reconnectDelay_=RECONNECT_MIN_DELAY;}this.lastConnectionEstablishedTime_=null;}const timeSinceLastConnectAttempt=new Date().getTime()-this.lastConnectionAttemptTime_;let reconnectDelay=Math.max(0,this.reconnectDelay_-timeSinceLastConnectAttempt);reconnectDelay=Math.random()*reconnectDelay;this.log_('Trying to reconnect in '+reconnectDelay+'ms');this.scheduleConnect_(reconnectDelay);// Adjust reconnect delay for next time.\nthis.reconnectDelay_=Math.min(this.maxReconnectDelay_,this.reconnectDelay_*RECONNECT_DELAY_MULTIPLIER);}this.onConnectStatus_(false);}async establishConnection_(){if(this.shouldReconnect_()){this.log_('Making a connection attempt');this.lastConnectionAttemptTime_=new Date().getTime();this.lastConnectionEstablishedTime_=null;const onDataMessage=this.onDataMessage_.bind(this);const onReady=this.onReady_.bind(this);const onDisconnect=this.onRealtimeDisconnect_.bind(this);const connId=this.id+':'+PersistentConnection.nextConnectionId_++;const lastSessionId=this.lastSessionId;let canceled=false;let connection=null;const closeFn=function(){if(connection){connection.close();}else{canceled=true;onDisconnect();}};const sendRequestFn=function(msg){assert(connection,\"sendRequest call when we're not connected not allowed.\");connection.sendRequest(msg);};this.realtime_={close:closeFn,sendRequest:sendRequestFn};const forceRefresh=this.forceTokenRefresh_;this.forceTokenRefresh_=false;try{// First fetch auth and app check token, and establish connection after\n// fetching the token was successful\nconst[authToken,appCheckToken]=await Promise.all([this.authTokenProvider_.getToken(forceRefresh),this.appCheckTokenProvider_.getToken(forceRefresh)]);if(!canceled){log('getToken() completed. Creating connection.');this.authToken_=authToken&&authToken.accessToken;this.appCheckToken_=appCheckToken&&appCheckToken.token;connection=new Connection(connId,this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,onDataMessage,onReady,onDisconnect,/* onKill= */reason=>{warn(reason+' ('+this.repoInfo_.toString()+')');this.interrupt(SERVER_KILL_INTERRUPT_REASON);},lastSessionId);}else{log('getToken() completed but was canceled');}}catch(error){this.log_('Failed to get token: '+error);if(!canceled){if(this.repoInfo_.nodeAdmin){// This may be a critical error for the Admin Node.js SDK, so log a warning.\n// But getToken() may also just have temporarily failed, so we still want to\n// continue retrying.\nwarn(error);}closeFn();}}}}interrupt(reason){log('Interrupting connection for reason: '+reason);this.interruptReasons_[reason]=true;if(this.realtime_){this.realtime_.close();}else{if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);this.establishConnectionTimer_=null;}if(this.connected_){this.onRealtimeDisconnect_();}}}resume(reason){log('Resuming connection for reason: '+reason);delete this.interruptReasons_[reason];if(isEmpty(this.interruptReasons_)){this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}}handleTimestamp_(timestamp){const delta=timestamp-new Date().getTime();this.onServerInfoUpdate_({serverTimeOffset:delta});}cancelSentTransactions_(){for(let i=0;i<this.outstandingPuts_.length;i++){const put=this.outstandingPuts_[i];if(put&&/*hash*/'h'in put.request&&put.queued){if(put.onComplete){put.onComplete('disconnect');}delete this.outstandingPuts_[i];this.outstandingPutCount_--;}}// Clean up array occasionally.\nif(this.outstandingPutCount_===0){this.outstandingPuts_=[];}}onListenRevoked_(pathString,query){// Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\nlet queryId;if(!query){queryId='default';}else{queryId=query.map(q=>ObjectToUniqueKey(q)).join('$');}const listen=this.removeListen_(pathString,queryId);if(listen&&listen.onComplete){listen.onComplete('permission_denied');}}removeListen_(pathString,queryId){const normalizedPathString=new Path(pathString).toString();// normalize path.\nlet listen;if(this.listens.has(normalizedPathString)){const map=this.listens.get(normalizedPathString);listen=map.get(queryId);map.delete(queryId);if(map.size===0){this.listens.delete(normalizedPathString);}}else{// all listens for this path has already been removed\nlisten=undefined;}return listen;}onAuthRevoked_(statusCode,explanation){log('Auth token revoked: '+statusCode+'/'+explanation);this.authToken_=null;this.forceTokenRefresh_=true;this.realtime_.close();if(statusCode==='invalid_token'||statusCode==='permission_denied'){// We'll wait a couple times before logging the warning / increasing the\n// retry period since oauth tokens will report as \"invalid\" if they're\n// just expired. Plus there may be transient issues that resolve themselves.\nthis.invalidAuthTokenCount_++;if(this.invalidAuthTokenCount_>=INVALID_TOKEN_THRESHOLD){// Set a long reconnect delay because recovery is unlikely\nthis.reconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;// Notify the auth token provider that the token is invalid, which will log\n// a warning\nthis.authTokenProvider_.notifyForInvalidToken();}}}onAppCheckRevoked_(statusCode,explanation){log('App check token revoked: '+statusCode+'/'+explanation);this.appCheckToken_=null;this.forceTokenRefresh_=true;// Note: We don't close the connection as the developer may not have\n// enforcement enabled. The backend closes connections with enforcements.\nif(statusCode==='invalid_token'||statusCode==='permission_denied'){// We'll wait a couple times before logging the warning / increasing the\n// retry period since oauth tokens will report as \"invalid\" if they're\n// just expired. Plus there may be transient issues that resolve themselves.\nthis.invalidAppCheckTokenCount_++;if(this.invalidAppCheckTokenCount_>=INVALID_TOKEN_THRESHOLD){this.appCheckTokenProvider_.notifyForInvalidToken();}}}onSecurityDebugPacket_(body){if(this.securityDebugCallback_){this.securityDebugCallback_(body);}else{if('msg'in body){console.log('FIREBASE: '+body['msg'].replace('\\n','\\nFIREBASE: '));}}}restoreState_(){//Re-authenticate ourselves if we have a credential stored.\nthis.tryAuth();this.tryAppCheck();// Puts depend on having received the corresponding data update from the server before they complete, so we must\n// make sure to send listens before puts.\nfor(const queries of this.listens.values()){for(const listenSpec of queries.values()){this.sendListen_(listenSpec);}}for(let i=0;i<this.outstandingPuts_.length;i++){if(this.outstandingPuts_[i]){this.sendPut_(i);}}while(this.onDisconnectRequestQueue_.length){const request=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(request.action,request.pathString,request.data,request.onComplete);}for(let i=0;i<this.outstandingGets_.length;i++){if(this.outstandingGets_[i]){this.sendGet_(i);}}}/**\r\n     * Sends client stats for first connection\r\n     */sendConnectStats_(){const stats={};let clientName='js';if(isNodeSdk()){if(this.repoInfo_.nodeAdmin){clientName='admin_node';}else{clientName='node';}}stats['sdk.'+clientName+'.'+SDK_VERSION.replace(/\\./g,'-')]=1;if(isMobileCordova()){stats['framework.cordova']=1;}else if(isReactNative()){stats['framework.reactnative']=1;}this.reportStats(stats);}shouldReconnect_(){const online=OnlineMonitor.getInstance().currentlyOnline();return isEmpty(this.interruptReasons_)&&online;}}PersistentConnection.nextPersistentConnectionId_=0;/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */PersistentConnection.nextConnectionId_=0;/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class NamedNode{constructor(name,node){this.name=name;this.node=node;}static Wrap(name,node){return new NamedNode(name,node);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class Index{/**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */getCompare(){return this.compare.bind(this);}/**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */indexedValueChanged(oldNode,newNode){const oldWrapped=new NamedNode(MIN_NAME,oldNode);const newWrapped=new NamedNode(MIN_NAME,newNode);return this.compare(oldWrapped,newWrapped)!==0;}/**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let __EMPTY_NODE;class KeyIndex extends Index{static get __EMPTY_NODE(){return __EMPTY_NODE;}static set __EMPTY_NODE(val){__EMPTY_NODE=val;}compare(a,b){return nameCompare(a.name,b.name);}isDefinedOn(node){// We could probably return true here (since every node has a key), but it's never called\n// so just leaving unimplemented for now.\nthrow assertionError('KeyIndex.isDefinedOn not expected to be called.');}indexedValueChanged(oldNode,newNode){return false;// The key for a node never changes.\n}minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}maxPost(){// TODO: This should really be created once and cached in a static property, but\n// NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\nreturn new NamedNode(MAX_NAME,__EMPTY_NODE);}makePost(indexValue,name){assert(typeof indexValue==='string','KeyIndex indexValue must always be a string.');// We just use empty node, but it'll never be compared, since our comparator only looks at name.\nreturn new NamedNode(indexValue,__EMPTY_NODE);}/**\r\n     * @returns String representation for inclusion in a query spec\r\n     */toString(){return'.key';}}const KEY_INDEX=new KeyIndex();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An iterator over an LLRBNode.\r\n */class SortedMapIterator{/**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */constructor(node,startKey,comparator,isReverse_,resultGenerator_=null){this.isReverse_=isReverse_;this.resultGenerator_=resultGenerator_;this.nodeStack_=[];let cmp=1;while(!node.isEmpty()){node=node;cmp=startKey?comparator(node.key,startKey):1;// flip the comparison if we're going in reverse\nif(isReverse_){cmp*=-1;}if(cmp<0){// This node is less than our start key. ignore it\nif(this.isReverse_){node=node.left;}else{node=node.right;}}else if(cmp===0){// This node is exactly equal to our start key. Push it on the stack, but stop iterating;\nthis.nodeStack_.push(node);break;}else{// This node is greater than our start key, add it to the stack and move to the next one\nthis.nodeStack_.push(node);if(this.isReverse_){node=node.right;}else{node=node.left;}}}}getNext(){if(this.nodeStack_.length===0){return null;}let node=this.nodeStack_.pop();let result;if(this.resultGenerator_){result=this.resultGenerator_(node.key,node.value);}else{result={key:node.key,value:node.value};}if(this.isReverse_){node=node.left;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.right;}}else{node=node.right;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.left;}}return result;}hasNext(){return this.nodeStack_.length>0;}peek(){if(this.nodeStack_.length===0){return null;}const node=this.nodeStack_[this.nodeStack_.length-1];if(this.resultGenerator_){return this.resultGenerator_(node.key,node.value);}else{return{key:node.key,value:node.value};}}}/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */class LLRBNode{/**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */constructor(key,value,color,left,right){this.key=key;this.value=value;this.color=color!=null?color:LLRBNode.RED;this.left=left!=null?left:SortedMap.EMPTY_NODE;this.right=right!=null?right:SortedMap.EMPTY_NODE;}/**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */copy(key,value,color,left,right){return new LLRBNode(key!=null?key:this.key,value!=null?value:this.value,color!=null?color:this.color,left!=null?left:this.left,right!=null?right:this.right);}/**\r\n     * @returns The total number of nodes in the tree.\r\n     */count(){return this.left.count()+1+this.right.count();}/**\r\n     * @returns True if the tree is empty.\r\n     */isEmpty(){return false;}/**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */inorderTraversal(action){return this.left.inorderTraversal(action)||!!action(this.key,this.value)||this.right.inorderTraversal(action);}/**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */reverseTraversal(action){return this.right.reverseTraversal(action)||action(this.key,this.value)||this.left.reverseTraversal(action);}/**\r\n     * @returns The minimum node in the tree.\r\n     */min_(){if(this.left.isEmpty()){return this;}else{return this.left.min_();}}/**\r\n     * @returns The maximum key in the tree.\r\n     */minKey(){return this.min_().key;}/**\r\n     * @returns The maximum key in the tree.\r\n     */maxKey(){if(this.right.isEmpty()){return this.key;}else{return this.right.maxKey();}}/**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */insert(key,value,comparator){let n=this;const cmp=comparator(key,n.key);if(cmp<0){n=n.copy(null,null,null,n.left.insert(key,value,comparator),null);}else if(cmp===0){n=n.copy(null,value,null,null,null);}else{n=n.copy(null,null,null,null,n.right.insert(key,value,comparator));}return n.fixUp_();}/**\r\n     * @returns New tree, with the minimum key removed.\r\n     */removeMin_(){if(this.left.isEmpty()){return SortedMap.EMPTY_NODE;}let n=this;if(!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.removeMin_(),null);return n.fixUp_();}/**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */remove(key,comparator){let n,smallest;n=this;if(comparator(key,n.key)<0){if(!n.left.isEmpty()&&!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.remove(key,comparator),null);}else{if(n.left.isRed_()){n=n.rotateRight_();}if(!n.right.isEmpty()&&!n.right.isRed_()&&!n.right.left.isRed_()){n=n.moveRedRight_();}if(comparator(key,n.key)===0){if(n.right.isEmpty()){return SortedMap.EMPTY_NODE;}else{smallest=n.right.min_();n=n.copy(smallest.key,smallest.value,null,null,n.right.removeMin_());}}n=n.copy(null,null,null,null,n.right.remove(key,comparator));}return n.fixUp_();}/**\r\n     * @returns Whether this is a RED node.\r\n     */isRed_(){return this.color;}/**\r\n     * @returns New tree after performing any needed rotations.\r\n     */fixUp_(){let n=this;if(n.right.isRed_()&&!n.left.isRed_()){n=n.rotateLeft_();}if(n.left.isRed_()&&n.left.left.isRed_()){n=n.rotateRight_();}if(n.left.isRed_()&&n.right.isRed_()){n=n.colorFlip_();}return n;}/**\r\n     * @returns New tree, after moveRedLeft.\r\n     */moveRedLeft_(){let n=this.colorFlip_();if(n.right.left.isRed_()){n=n.copy(null,null,null,null,n.right.rotateRight_());n=n.rotateLeft_();n=n.colorFlip_();}return n;}/**\r\n     * @returns New tree, after moveRedRight.\r\n     */moveRedRight_(){let n=this.colorFlip_();if(n.left.left.isRed_()){n=n.rotateRight_();n=n.colorFlip_();}return n;}/**\r\n     * @returns New tree, after rotateLeft.\r\n     */rotateLeft_(){const nl=this.copy(null,null,LLRBNode.RED,null,this.right.left);return this.right.copy(null,null,this.color,nl,null);}/**\r\n     * @returns New tree, after rotateRight.\r\n     */rotateRight_(){const nr=this.copy(null,null,LLRBNode.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,nr);}/**\r\n     * @returns Newt ree, after colorFlip.\r\n     */colorFlip_(){const left=this.left.copy(null,null,!this.left.color,null,null);const right=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,left,right);}/**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */checkMaxDepth_(){const blackDepth=this.check_();return Math.pow(2.0,blackDepth)<=this.count()+1;}check_(){if(this.isRed_()&&this.left.isRed_()){throw new Error('Red node has red child('+this.key+','+this.value+')');}if(this.right.isRed_()){throw new Error('Right child of ('+this.key+','+this.value+') is red');}const blackDepth=this.left.check_();if(blackDepth!==this.right.check_()){throw new Error('Black depths differ');}else{return blackDepth+(this.isRed_()?0:1);}}}LLRBNode.RED=true;LLRBNode.BLACK=false;/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */class LLRBEmptyNode{/**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */copy(key,value,color,left,right){return this;}/**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */insert(key,value,comparator){return new LLRBNode(key,value,null);}/**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */remove(key,comparator){return this;}/**\r\n     * @returns The total number of nodes in the tree.\r\n     */count(){return 0;}/**\r\n     * @returns True if the tree is empty.\r\n     */isEmpty(){return true;}/**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */inorderTraversal(action){return false;}/**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */reverseTraversal(action){return false;}minKey(){return null;}maxKey(){return null;}check_(){return 0;}/**\r\n     * @returns Whether this node is red.\r\n     */isRed_(){return false;}}/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */class SortedMap{/**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */constructor(comparator_,root_=SortedMap.EMPTY_NODE){this.comparator_=comparator_;this.root_=root_;}/**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */insert(key,value){return new SortedMap(this.comparator_,this.root_.insert(key,value,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));}/**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */remove(key){return new SortedMap(this.comparator_,this.root_.remove(key,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));}/**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */get(key){let cmp;let node=this.root_;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){return node.value;}else if(cmp<0){node=node.left;}else if(cmp>0){node=node.right;}}return null;}/**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */getPredecessorKey(key){let cmp,node=this.root_,rightParent=null;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){if(!node.left.isEmpty()){node=node.left;while(!node.right.isEmpty()){node=node.right;}return node.key;}else if(rightParent){return rightParent.key;}else{return null;// first item.\n}}else if(cmp<0){node=node.left;}else if(cmp>0){rightParent=node;node=node.right;}}throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');}/**\r\n     * @returns True if the map is empty.\r\n     */isEmpty(){return this.root_.isEmpty();}/**\r\n     * @returns The total number of nodes in the map.\r\n     */count(){return this.root_.count();}/**\r\n     * @returns The minimum key in the map.\r\n     */minKey(){return this.root_.minKey();}/**\r\n     * @returns The maximum key in the map.\r\n     */maxKey(){return this.root_.maxKey();}/**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */inorderTraversal(action){return this.root_.inorderTraversal(action);}/**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */reverseTraversal(action){return this.root_.reverseTraversal(action);}/**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */getIterator(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,false,resultGenerator);}getIteratorFrom(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,false,resultGenerator);}getReverseIteratorFrom(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,true,resultGenerator);}getReverseIterator(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,true,resultGenerator);}}/**\r\n * Always use the same empty node, to reduce memory.\r\n */SortedMap.EMPTY_NODE=new LLRBEmptyNode();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function NAME_ONLY_COMPARATOR(left,right){return nameCompare(left.name,right.name);}function NAME_COMPARATOR(left,right){return nameCompare(left,right);}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let MAX_NODE$2;function setMaxNode$1(val){MAX_NODE$2=val;}const priorityHashText=function(priority){if(typeof priority==='number'){return'number:'+doubleToIEEE754String(priority);}else{return'string:'+priority;}};/**\r\n * Validates that a priority snapshot Node is valid.\r\n */const validatePriorityNode=function(priorityNode){if(priorityNode.isLeafNode()){const val=priorityNode.val();assert(typeof val==='string'||typeof val==='number'||typeof val==='object'&&contains(val,'.sv'),'Priority must be a string or number.');}else{assert(priorityNode===MAX_NODE$2||priorityNode.isEmpty(),'priority of unexpected type.');}// Don't call getPriority() on MAX_NODE to avoid hitting assertion.\nassert(priorityNode===MAX_NODE$2||priorityNode.getPriority().isEmpty(),\"Priority nodes can't have a priority of their own.\");};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let __childrenNodeConstructor;/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */class LeafNode{/**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */constructor(value_,priorityNode_=LeafNode.__childrenNodeConstructor.EMPTY_NODE){this.value_=value_;this.priorityNode_=priorityNode_;this.lazyHash_=null;assert(this.value_!==undefined&&this.value_!==null,\"LeafNode shouldn't be created with null/undefined value.\");validatePriorityNode(this.priorityNode_);}static set __childrenNodeConstructor(val){__childrenNodeConstructor=val;}static get __childrenNodeConstructor(){return __childrenNodeConstructor;}/** @inheritDoc */isLeafNode(){return true;}/** @inheritDoc */getPriority(){return this.priorityNode_;}/** @inheritDoc */updatePriority(newPriorityNode){return new LeafNode(this.value_,newPriorityNode);}/** @inheritDoc */getImmediateChild(childName){// Hack to treat priority as a regular child\nif(childName==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}}/** @inheritDoc */getChild(path){if(pathIsEmpty(path)){return this;}else if(pathGetFront(path)==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}}hasChild(){return false;}/** @inheritDoc */getPredecessorChildName(childName,childNode){return null;}/** @inheritDoc */updateImmediateChild(childName,newChildNode){if(childName==='.priority'){return this.updatePriority(newChildNode);}else if(newChildNode.isEmpty()&&childName!=='.priority'){return this;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName,newChildNode).updatePriority(this.priorityNode_);}}/** @inheritDoc */updateChild(path,newChildNode){const front=pathGetFront(path);if(front===null){return newChildNode;}else if(newChildNode.isEmpty()&&front!=='.priority'){return this;}else{assert(front!=='.priority'||pathGetLength(path)===1,'.priority must be the last token in a path');return this.updateImmediateChild(front,LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path),newChildNode));}}/** @inheritDoc */isEmpty(){return false;}/** @inheritDoc */numChildren(){return 0;}/** @inheritDoc */forEachChild(index,action){return false;}val(exportFormat){if(exportFormat&&!this.getPriority().isEmpty()){return{'.value':this.getValue(),'.priority':this.getPriority().val()};}else{return this.getValue();}}/** @inheritDoc */hash(){if(this.lazyHash_===null){let toHash='';if(!this.priorityNode_.isEmpty()){toHash+='priority:'+priorityHashText(this.priorityNode_.val())+':';}const type=typeof this.value_;toHash+=type+':';if(type==='number'){toHash+=doubleToIEEE754String(this.value_);}else{toHash+=this.value_;}this.lazyHash_=sha1(toHash);}return this.lazyHash_;}/**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */getValue(){return this.value_;}compareTo(other){if(other===LeafNode.__childrenNodeConstructor.EMPTY_NODE){return 1;}else if(other instanceof LeafNode.__childrenNodeConstructor){return-1;}else{assert(other.isLeafNode(),'Unknown node type');return this.compareToLeafNode_(other);}}/**\r\n     * Comparison specifically for two leaf nodes\r\n     */compareToLeafNode_(otherLeaf){const otherLeafType=typeof otherLeaf.value_;const thisLeafType=typeof this.value_;const otherIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);const thisIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);assert(otherIndex>=0,'Unknown leaf type: '+otherLeafType);assert(thisIndex>=0,'Unknown leaf type: '+thisLeafType);if(otherIndex===thisIndex){// Same type, compare values\nif(thisLeafType==='object'){// Deferred value nodes are all equal, but we should also never get to this point...\nreturn 0;}else{// Note that this works because true > false, all others are number or string comparisons\nif(this.value_<otherLeaf.value_){return-1;}else if(this.value_===otherLeaf.value_){return 0;}else{return 1;}}}else{return thisIndex-otherIndex;}}withIndex(){return this;}isIndexed(){return true;}equals(other){if(other===this){return true;}else if(other.isLeafNode()){const otherLeaf=other;return this.value_===otherLeaf.value_&&this.priorityNode_.equals(otherLeaf.priorityNode_);}else{return false;}}}/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */LeafNode.VALUE_TYPE_ORDER=['object','boolean','number','string'];/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let nodeFromJSON$1;let MAX_NODE$1;function setNodeFromJSON(val){nodeFromJSON$1=val;}function setMaxNode(val){MAX_NODE$1=val;}class PriorityIndex extends Index{compare(a,b){const aPriority=a.node.getPriority();const bPriority=b.node.getPriority();const indexCmp=aPriority.compareTo(bPriority);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}isDefinedOn(node){return!node.getPriority().isEmpty();}indexedValueChanged(oldNode,newNode){return!oldNode.getPriority().equals(newNode.getPriority());}minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}maxPost(){return new NamedNode(MAX_NAME,new LeafNode('[PRIORITY-POST]',MAX_NODE$1));}makePost(indexValue,name){const priorityNode=nodeFromJSON$1(indexValue);return new NamedNode(name,new LeafNode('[PRIORITY-POST]',priorityNode));}/**\r\n     * @returns String representation for inclusion in a query spec\r\n     */toString(){return'.priority';}}const PRIORITY_INDEX=new PriorityIndex();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const LOG_2=Math.log(2);class Base12Num{constructor(length){const logBase2=num=>// eslint-disable-next-line @typescript-eslint/no-explicit-any\nparseInt(Math.log(num)/LOG_2,10);const bitMask=bits=>parseInt(Array(bits+1).join('1'),2);this.count=logBase2(length+1);this.current_=this.count-1;const mask=bitMask(this.count);this.bits_=length+1&mask;}nextBitIsOne(){//noinspection JSBitwiseOperatorUsage\nconst result=!(this.bits_&0x1<<this.current_);this.current_--;return result;}}/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */const buildChildSet=function(childList,cmp,keyFn,mapSortFn){childList.sort(cmp);const buildBalancedTree=function(low,high){const length=high-low;let namedNode;let key;if(length===0){return null;}else if(length===1){namedNode=childList[low];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,null,null);}else{// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst middle=parseInt(length/2,10)+low;const left=buildBalancedTree(low,middle);const right=buildBalancedTree(middle+1,high);namedNode=childList[middle];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,left,right);}};const buildFrom12Array=function(base12){let node=null;let root=null;let index=childList.length;const buildPennant=function(chunkSize,color){const low=index-chunkSize;const high=index;index-=chunkSize;const childTree=buildBalancedTree(low+1,high);const namedNode=childList[low];const key=keyFn?keyFn(namedNode):namedNode;attachPennant(new LLRBNode(key,namedNode.node,color,null,childTree));};const attachPennant=function(pennant){if(node){node.left=pennant;node=pennant;}else{root=pennant;node=pennant;}};for(let i=0;i<base12.count;++i){const isOne=base12.nextBitIsOne();// The number of nodes taken in each slice is 2^(arr.length - (i + 1))\nconst chunkSize=Math.pow(2,base12.count-(i+1));if(isOne){buildPennant(chunkSize,LLRBNode.BLACK);}else{// current == 2\nbuildPennant(chunkSize,LLRBNode.BLACK);buildPennant(chunkSize,LLRBNode.RED);}}return root;};const base12=new Base12Num(childList.length);const root=buildFrom12Array(base12);// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn new SortedMap(mapSortFn||cmp,root);};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let _defaultIndexMap;const fallbackObject={};class IndexMap{constructor(indexes_,indexSet_){this.indexes_=indexes_;this.indexSet_=indexSet_;}/**\r\n     * The default IndexMap for nodes without a priority\r\n     */static get Default(){assert(fallbackObject&&PRIORITY_INDEX,'ChildrenNode.ts has not been loaded');_defaultIndexMap=_defaultIndexMap||new IndexMap({'.priority':fallbackObject},{'.priority':PRIORITY_INDEX});return _defaultIndexMap;}get(indexKey){const sortedMap=safeGet(this.indexes_,indexKey);if(!sortedMap){throw new Error('No index defined for '+indexKey);}if(sortedMap instanceof SortedMap){return sortedMap;}else{// The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n// regular child map\nreturn null;}}hasIndex(indexDefinition){return contains(this.indexSet_,indexDefinition.toString());}addIndex(indexDefinition,existingChildren){assert(indexDefinition!==KEY_INDEX,\"KeyIndex always exists and isn't meant to be added to the IndexMap.\");const childList=[];let sawIndexedValue=false;const iter=existingChildren.getIterator(NamedNode.Wrap);let next=iter.getNext();while(next){sawIndexedValue=sawIndexedValue||indexDefinition.isDefinedOn(next.node);childList.push(next);next=iter.getNext();}let newIndex;if(sawIndexedValue){newIndex=buildChildSet(childList,indexDefinition.getCompare());}else{newIndex=fallbackObject;}const indexName=indexDefinition.toString();const newIndexSet=Object.assign({},this.indexSet_);newIndexSet[indexName]=indexDefinition;const newIndexes=Object.assign({},this.indexes_);newIndexes[indexName]=newIndex;return new IndexMap(newIndexes,newIndexSet);}/**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */addToIndexes(namedNode,existingChildren){const newIndexes=map(this.indexes_,(indexedChildren,indexName)=>{const index=safeGet(this.indexSet_,indexName);assert(index,'Missing index implementation for '+indexName);if(indexedChildren===fallbackObject){// Check to see if we need to index everything\nif(index.isDefinedOn(namedNode.node)){// We need to build this index\nconst childList=[];const iter=existingChildren.getIterator(NamedNode.Wrap);let next=iter.getNext();while(next){if(next.name!==namedNode.name){childList.push(next);}next=iter.getNext();}childList.push(namedNode);return buildChildSet(childList,index.getCompare());}else{// No change, this remains a fallback\nreturn fallbackObject;}}else{const existingSnap=existingChildren.get(namedNode.name);let newChildren=indexedChildren;if(existingSnap){newChildren=newChildren.remove(new NamedNode(namedNode.name,existingSnap));}return newChildren.insert(namedNode,namedNode.node);}});return new IndexMap(newIndexes,this.indexSet_);}/**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */removeFromIndexes(namedNode,existingChildren){const newIndexes=map(this.indexes_,indexedChildren=>{if(indexedChildren===fallbackObject){// This is the fallback. Just return it, nothing to do in this case\nreturn indexedChildren;}else{const existingSnap=existingChildren.get(namedNode.name);if(existingSnap){return indexedChildren.remove(new NamedNode(namedNode.name,existingSnap));}else{// No record of this child\nreturn indexedChildren;}}});return new IndexMap(newIndexes,this.indexSet_);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */class ChildrenNode{/**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */constructor(children_,priorityNode_,indexMap_){this.children_=children_;this.priorityNode_=priorityNode_;this.indexMap_=indexMap_;this.lazyHash_=null;/**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */if(this.priorityNode_){validatePriorityNode(this.priorityNode_);}if(this.children_.isEmpty()){assert(!this.priorityNode_||this.priorityNode_.isEmpty(),'An empty node cannot have a priority');}}static get EMPTY_NODE(){return EMPTY_NODE||(EMPTY_NODE=new ChildrenNode(new SortedMap(NAME_COMPARATOR),null,IndexMap.Default));}/** @inheritDoc */isLeafNode(){return false;}/** @inheritDoc */getPriority(){return this.priorityNode_||EMPTY_NODE;}/** @inheritDoc */updatePriority(newPriorityNode){if(this.children_.isEmpty()){// Don't allow priorities on empty nodes\nreturn this;}else{return new ChildrenNode(this.children_,newPriorityNode,this.indexMap_);}}/** @inheritDoc */getImmediateChild(childName){// Hack to treat priority as a regular child\nif(childName==='.priority'){return this.getPriority();}else{const child=this.children_.get(childName);return child===null?EMPTY_NODE:child;}}/** @inheritDoc */getChild(path){const front=pathGetFront(path);if(front===null){return this;}return this.getImmediateChild(front).getChild(pathPopFront(path));}/** @inheritDoc */hasChild(childName){return this.children_.get(childName)!==null;}/** @inheritDoc */updateImmediateChild(childName,newChildNode){assert(newChildNode,'We should always be passing snapshot nodes');if(childName==='.priority'){return this.updatePriority(newChildNode);}else{const namedNode=new NamedNode(childName,newChildNode);let newChildren,newIndexMap;if(newChildNode.isEmpty()){newChildren=this.children_.remove(childName);newIndexMap=this.indexMap_.removeFromIndexes(namedNode,this.children_);}else{newChildren=this.children_.insert(childName,newChildNode);newIndexMap=this.indexMap_.addToIndexes(namedNode,this.children_);}const newPriority=newChildren.isEmpty()?EMPTY_NODE:this.priorityNode_;return new ChildrenNode(newChildren,newPriority,newIndexMap);}}/** @inheritDoc */updateChild(path,newChildNode){const front=pathGetFront(path);if(front===null){return newChildNode;}else{assert(pathGetFront(path)!=='.priority'||pathGetLength(path)===1,'.priority must be the last token in a path');const newImmediateChild=this.getImmediateChild(front).updateChild(pathPopFront(path),newChildNode);return this.updateImmediateChild(front,newImmediateChild);}}/** @inheritDoc */isEmpty(){return this.children_.isEmpty();}/** @inheritDoc */numChildren(){return this.children_.count();}/** @inheritDoc */val(exportFormat){if(this.isEmpty()){return null;}const obj={};let numKeys=0,maxKey=0,allIntegerKeys=true;this.forEachChild(PRIORITY_INDEX,(key,childNode)=>{obj[key]=childNode.val(exportFormat);numKeys++;if(allIntegerKeys&&ChildrenNode.INTEGER_REGEXP_.test(key)){maxKey=Math.max(maxKey,Number(key));}else{allIntegerKeys=false;}});if(!exportFormat&&allIntegerKeys&&maxKey<2*numKeys){// convert to array.\nconst array=[];// eslint-disable-next-line guard-for-in\nfor(const key in obj){array[key]=obj[key];}return array;}else{if(exportFormat&&!this.getPriority().isEmpty()){obj['.priority']=this.getPriority().val();}return obj;}}/** @inheritDoc */hash(){if(this.lazyHash_===null){let toHash='';if(!this.getPriority().isEmpty()){toHash+='priority:'+priorityHashText(this.getPriority().val())+':';}this.forEachChild(PRIORITY_INDEX,(key,childNode)=>{const childHash=childNode.hash();if(childHash!==''){toHash+=':'+key+':'+childHash;}});this.lazyHash_=toHash===''?'':sha1(toHash);}return this.lazyHash_;}/** @inheritDoc */getPredecessorChildName(childName,childNode,index){const idx=this.resolveIndex_(index);if(idx){const predecessor=idx.getPredecessorKey(new NamedNode(childName,childNode));return predecessor?predecessor.name:null;}else{return this.children_.getPredecessorKey(childName);}}getFirstChildName(indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){const minKey=idx.minKey();return minKey&&minKey.name;}else{return this.children_.minKey();}}getFirstChild(indexDefinition){const minKey=this.getFirstChildName(indexDefinition);if(minKey){return new NamedNode(minKey,this.children_.get(minKey));}else{return null;}}/**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */getLastChildName(indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){const maxKey=idx.maxKey();return maxKey&&maxKey.name;}else{return this.children_.maxKey();}}getLastChild(indexDefinition){const maxKey=this.getLastChildName(indexDefinition);if(maxKey){return new NamedNode(maxKey,this.children_.get(maxKey));}else{return null;}}forEachChild(index,action){const idx=this.resolveIndex_(index);if(idx){return idx.inorderTraversal(wrappedNode=>{return action(wrappedNode.name,wrappedNode.node);});}else{return this.children_.inorderTraversal(action);}}getIterator(indexDefinition){return this.getIteratorFrom(indexDefinition.minPost(),indexDefinition);}getIteratorFrom(startPost,indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getIteratorFrom(startPost,key=>key);}else{const iterator=this.children_.getIteratorFrom(startPost.name,NamedNode.Wrap);let next=iterator.peek();while(next!=null&&indexDefinition.compare(next,startPost)<0){iterator.getNext();next=iterator.peek();}return iterator;}}getReverseIterator(indexDefinition){return this.getReverseIteratorFrom(indexDefinition.maxPost(),indexDefinition);}getReverseIteratorFrom(endPost,indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getReverseIteratorFrom(endPost,key=>{return key;});}else{const iterator=this.children_.getReverseIteratorFrom(endPost.name,NamedNode.Wrap);let next=iterator.peek();while(next!=null&&indexDefinition.compare(next,endPost)>0){iterator.getNext();next=iterator.peek();}return iterator;}}compareTo(other){if(this.isEmpty()){if(other.isEmpty()){return 0;}else{return-1;}}else if(other.isLeafNode()||other.isEmpty()){return 1;}else if(other===MAX_NODE){return-1;}else{// Must be another node with children.\nreturn 0;}}withIndex(indexDefinition){if(indexDefinition===KEY_INDEX||this.indexMap_.hasIndex(indexDefinition)){return this;}else{const newIndexMap=this.indexMap_.addIndex(indexDefinition,this.children_);return new ChildrenNode(this.children_,this.priorityNode_,newIndexMap);}}isIndexed(index){return index===KEY_INDEX||this.indexMap_.hasIndex(index);}equals(other){if(other===this){return true;}else if(other.isLeafNode()){return false;}else{const otherChildrenNode=other;if(!this.getPriority().equals(otherChildrenNode.getPriority())){return false;}else if(this.children_.count()===otherChildrenNode.children_.count()){const thisIter=this.getIterator(PRIORITY_INDEX);const otherIter=otherChildrenNode.getIterator(PRIORITY_INDEX);let thisCurrent=thisIter.getNext();let otherCurrent=otherIter.getNext();while(thisCurrent&&otherCurrent){if(thisCurrent.name!==otherCurrent.name||!thisCurrent.node.equals(otherCurrent.node)){return false;}thisCurrent=thisIter.getNext();otherCurrent=otherIter.getNext();}return thisCurrent===null&&otherCurrent===null;}else{return false;}}}/**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */resolveIndex_(indexDefinition){if(indexDefinition===KEY_INDEX){return null;}else{return this.indexMap_.get(indexDefinition.toString());}}}ChildrenNode.INTEGER_REGEXP_=/^(0|[1-9]\\d*)$/;class MaxNode extends ChildrenNode{constructor(){super(new SortedMap(NAME_COMPARATOR),ChildrenNode.EMPTY_NODE,IndexMap.Default);}compareTo(other){if(other===this){return 0;}else{return 1;}}equals(other){// Not that we every compare it, but MAX_NODE is only ever equal to itself\nreturn other===this;}getPriority(){return this;}getImmediateChild(childName){return ChildrenNode.EMPTY_NODE;}isEmpty(){return false;}}/**\r\n * Marker that will sort higher than any other snapshot.\r\n */const MAX_NODE=new MaxNode();Object.defineProperties(NamedNode,{MIN:{value:new NamedNode(MIN_NAME,ChildrenNode.EMPTY_NODE)},MAX:{value:new NamedNode(MAX_NAME,MAX_NODE)}});/**\r\n * Reference Extensions\r\n */KeyIndex.__EMPTY_NODE=ChildrenNode.EMPTY_NODE;LeafNode.__childrenNodeConstructor=ChildrenNode;setMaxNode$1(MAX_NODE);setMaxNode(MAX_NODE);/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const USE_HINZE=true;/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */function nodeFromJSON(json,priority=null){if(json===null){return ChildrenNode.EMPTY_NODE;}if(typeof json==='object'&&'.priority'in json){priority=json['.priority'];}assert(priority===null||typeof priority==='string'||typeof priority==='number'||typeof priority==='object'&&'.sv'in priority,'Invalid priority type found: '+typeof priority);if(typeof json==='object'&&'.value'in json&&json['.value']!==null){json=json['.value'];}// Valid leaf nodes include non-objects or server-value wrapper objects\nif(typeof json!=='object'||'.sv'in json){const jsonLeaf=json;return new LeafNode(jsonLeaf,nodeFromJSON(priority));}if(!(json instanceof Array)&&USE_HINZE){const children=[];let childrenHavePriority=false;const hinzeJsonObj=json;each(hinzeJsonObj,(key,child)=>{if(key.substring(0,1)!=='.'){// Ignore metadata nodes\nconst childNode=nodeFromJSON(child);if(!childNode.isEmpty()){childrenHavePriority=childrenHavePriority||!childNode.getPriority().isEmpty();children.push(new NamedNode(key,childNode));}}});if(children.length===0){return ChildrenNode.EMPTY_NODE;}const childSet=buildChildSet(children,NAME_ONLY_COMPARATOR,namedNode=>namedNode.name,NAME_COMPARATOR);if(childrenHavePriority){const sortedChildSet=buildChildSet(children,PRIORITY_INDEX.getCompare());return new ChildrenNode(childSet,nodeFromJSON(priority),new IndexMap({'.priority':sortedChildSet},{'.priority':PRIORITY_INDEX}));}else{return new ChildrenNode(childSet,nodeFromJSON(priority),IndexMap.Default);}}else{let node=ChildrenNode.EMPTY_NODE;each(json,(key,childData)=>{if(contains(json,key)){if(key.substring(0,1)!=='.'){// ignore metadata nodes.\nconst childNode=nodeFromJSON(childData);if(childNode.isLeafNode()||!childNode.isEmpty()){node=node.updateImmediateChild(key,childNode);}}}});return node.updatePriority(nodeFromJSON(priority));}}setNodeFromJSON(nodeFromJSON);/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class PathIndex extends Index{constructor(indexPath_){super();this.indexPath_=indexPath_;assert(!pathIsEmpty(indexPath_)&&pathGetFront(indexPath_)!=='.priority',\"Can't create PathIndex with empty path or .priority key\");}extractChild(snap){return snap.getChild(this.indexPath_);}isDefinedOn(node){return!node.getChild(this.indexPath_).isEmpty();}compare(a,b){const aChild=this.extractChild(a.node);const bChild=this.extractChild(b.node);const indexCmp=aChild.compareTo(bChild);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}makePost(indexValue,name){const valueNode=nodeFromJSON(indexValue);const node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,valueNode);return new NamedNode(name,node);}maxPost(){const node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,MAX_NODE);return new NamedNode(MAX_NAME,node);}toString(){return pathSlice(this.indexPath_,0).join('/');}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ValueIndex extends Index{compare(a,b){const indexCmp=a.node.compareTo(b.node);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}isDefinedOn(node){return true;}indexedValueChanged(oldNode,newNode){return!oldNode.equals(newNode);}minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}maxPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MAX;}makePost(indexValue,name){const valueNode=nodeFromJSON(indexValue);return new NamedNode(name,valueNode);}/**\r\n     * @returns String representation for inclusion in a query spec\r\n     */toString(){return'.value';}}const VALUE_INDEX=new ValueIndex();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function changeValue(snapshotNode){return{type:\"value\"/* ChangeType.VALUE */,snapshotNode};}function changeChildAdded(childName,snapshotNode){return{type:\"child_added\"/* ChangeType.CHILD_ADDED */,snapshotNode,childName};}function changeChildRemoved(childName,snapshotNode){return{type:\"child_removed\"/* ChangeType.CHILD_REMOVED */,snapshotNode,childName};}function changeChildChanged(childName,snapshotNode,oldSnap){return{type:\"child_changed\"/* ChangeType.CHILD_CHANGED */,snapshotNode,childName,oldSnap};}function changeChildMoved(childName,snapshotNode){return{type:\"child_moved\"/* ChangeType.CHILD_MOVED */,snapshotNode,childName};}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */class IndexedFilter{constructor(index_){this.index_=index_;}updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){assert(snap.isIndexed(this.index_),'A node must be indexed if only a child is updated');const oldChild=snap.getImmediateChild(key);// Check if anything actually changed.\nif(oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))){// There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n// In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n// to avoid treating these cases as \"nothing changed.\"\nif(oldChild.isEmpty()===newChild.isEmpty()){// Nothing changed.\n// This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n//assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\nreturn snap;}}if(optChangeAccumulator!=null){if(newChild.isEmpty()){if(snap.hasChild(key)){optChangeAccumulator.trackChildChange(changeChildRemoved(key,oldChild));}else{assert(snap.isLeafNode(),'A child remove without an old child only makes sense on a leaf node');}}else if(oldChild.isEmpty()){optChangeAccumulator.trackChildChange(changeChildAdded(key,newChild));}else{optChangeAccumulator.trackChildChange(changeChildChanged(key,newChild,oldChild));}}if(snap.isLeafNode()&&newChild.isEmpty()){return snap;}else{// Make sure the node is indexed\nreturn snap.updateImmediateChild(key,newChild).withIndex(this.index_);}}updateFullNode(oldSnap,newSnap,optChangeAccumulator){if(optChangeAccumulator!=null){if(!oldSnap.isLeafNode()){oldSnap.forEachChild(PRIORITY_INDEX,(key,childNode)=>{if(!newSnap.hasChild(key)){optChangeAccumulator.trackChildChange(changeChildRemoved(key,childNode));}});}if(!newSnap.isLeafNode()){newSnap.forEachChild(PRIORITY_INDEX,(key,childNode)=>{if(oldSnap.hasChild(key)){const oldChild=oldSnap.getImmediateChild(key);if(!oldChild.equals(childNode)){optChangeAccumulator.trackChildChange(changeChildChanged(key,childNode,oldChild));}}else{optChangeAccumulator.trackChildChange(changeChildAdded(key,childNode));}});}}return newSnap.withIndex(this.index_);}updatePriority(oldSnap,newPriority){if(oldSnap.isEmpty()){return ChildrenNode.EMPTY_NODE;}else{return oldSnap.updatePriority(newPriority);}}filtersNodes(){return false;}getIndexedFilter(){return this;}getIndex(){return this.index_;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */class RangedFilter{constructor(params){this.indexedFilter_=new IndexedFilter(params.getIndex());this.index_=params.getIndex();this.startPost_=RangedFilter.getStartPost_(params);this.endPost_=RangedFilter.getEndPost_(params);this.startIsInclusive_=!params.startAfterSet_;this.endIsInclusive_=!params.endBeforeSet_;}getStartPost(){return this.startPost_;}getEndPost(){return this.endPost_;}matches(node){const isWithinStart=this.startIsInclusive_?this.index_.compare(this.getStartPost(),node)<=0:this.index_.compare(this.getStartPost(),node)<0;const isWithinEnd=this.endIsInclusive_?this.index_.compare(node,this.getEndPost())<=0:this.index_.compare(node,this.getEndPost())<0;return isWithinStart&&isWithinEnd;}updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}return this.indexedFilter_.updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);}updateFullNode(oldSnap,newSnap,optChangeAccumulator){if(newSnap.isLeafNode()){// Make sure we have a children node with the correct index, not a leaf node;\nnewSnap=ChildrenNode.EMPTY_NODE;}let filtered=newSnap.withIndex(this.index_);// Don't support priorities on queries\nfiltered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);const self=this;newSnap.forEachChild(PRIORITY_INDEX,(key,childNode)=>{if(!self.matches(new NamedNode(key,childNode))){filtered=filtered.updateImmediateChild(key,ChildrenNode.EMPTY_NODE);}});return this.indexedFilter_.updateFullNode(oldSnap,filtered,optChangeAccumulator);}updatePriority(oldSnap,newPriority){// Don't support priorities on queries\nreturn oldSnap;}filtersNodes(){return true;}getIndexedFilter(){return this.indexedFilter_;}getIndex(){return this.index_;}static getStartPost_(params){if(params.hasStart()){const startName=params.getIndexStartName();return params.getIndex().makePost(params.getIndexStartValue(),startName);}else{return params.getIndex().minPost();}}static getEndPost_(params){if(params.hasEnd()){const endName=params.getIndexEndName();return params.getIndex().makePost(params.getIndexEndValue(),endName);}else{return params.getIndex().maxPost();}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */class LimitedFilter{constructor(params){this.withinDirectionalStart=node=>this.reverse_?this.withinEndPost(node):this.withinStartPost(node);this.withinDirectionalEnd=node=>this.reverse_?this.withinStartPost(node):this.withinEndPost(node);this.withinStartPost=node=>{const compareRes=this.index_.compare(this.rangedFilter_.getStartPost(),node);return this.startIsInclusive_?compareRes<=0:compareRes<0;};this.withinEndPost=node=>{const compareRes=this.index_.compare(node,this.rangedFilter_.getEndPost());return this.endIsInclusive_?compareRes<=0:compareRes<0;};this.rangedFilter_=new RangedFilter(params);this.index_=params.getIndex();this.limit_=params.getLimit();this.reverse_=!params.isViewFromLeft();this.startIsInclusive_=!params.startAfterSet_;this.endIsInclusive_=!params.endBeforeSet_;}updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.rangedFilter_.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}if(snap.getImmediateChild(key).equals(newChild)){// No change\nreturn snap;}else if(snap.numChildren()<this.limit_){return this.rangedFilter_.getIndexedFilter().updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);}else{return this.fullLimitUpdateChild_(snap,key,newChild,source,optChangeAccumulator);}}updateFullNode(oldSnap,newSnap,optChangeAccumulator){let filtered;if(newSnap.isLeafNode()||newSnap.isEmpty()){// Make sure we have a children node with the correct index, not a leaf node;\nfiltered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);}else{if(this.limit_*2<newSnap.numChildren()&&newSnap.isIndexed(this.index_)){// Easier to build up a snapshot, since what we're given has more than twice the elements we want\nfiltered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);// anchor to the startPost, endPost, or last element as appropriate\nlet iterator;if(this.reverse_){iterator=newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_);}else{iterator=newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);}let count=0;while(iterator.hasNext()&&count<this.limit_){const next=iterator.getNext();if(!this.withinDirectionalStart(next)){// if we have not reached the start, skip to the next element\ncontinue;}else if(!this.withinDirectionalEnd(next)){// if we have reached the end, stop adding elements\nbreak;}else{filtered=filtered.updateImmediateChild(next.name,next.node);count++;}}}else{// The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\nfiltered=newSnap.withIndex(this.index_);// Don't support priorities on queries\nfiltered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);let iterator;if(this.reverse_){iterator=filtered.getReverseIterator(this.index_);}else{iterator=filtered.getIterator(this.index_);}let count=0;while(iterator.hasNext()){const next=iterator.getNext();const inRange=count<this.limit_&&this.withinDirectionalStart(next)&&this.withinDirectionalEnd(next);if(inRange){count++;}else{filtered=filtered.updateImmediateChild(next.name,ChildrenNode.EMPTY_NODE);}}}}return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap,filtered,optChangeAccumulator);}updatePriority(oldSnap,newPriority){// Don't support priorities on queries\nreturn oldSnap;}filtersNodes(){return true;}getIndexedFilter(){return this.rangedFilter_.getIndexedFilter();}getIndex(){return this.index_;}fullLimitUpdateChild_(snap,childKey,childSnap,source,changeAccumulator){// TODO: rename all cache stuff etc to general snap terminology\nlet cmp;if(this.reverse_){const indexCmp=this.index_.getCompare();cmp=(a,b)=>indexCmp(b,a);}else{cmp=this.index_.getCompare();}const oldEventCache=snap;assert(oldEventCache.numChildren()===this.limit_,'');const newChildNamedNode=new NamedNode(childKey,childSnap);const windowBoundary=this.reverse_?oldEventCache.getFirstChild(this.index_):oldEventCache.getLastChild(this.index_);const inRange=this.rangedFilter_.matches(newChildNamedNode);if(oldEventCache.hasChild(childKey)){const oldChildSnap=oldEventCache.getImmediateChild(childKey);let nextChild=source.getChildAfterChild(this.index_,windowBoundary,this.reverse_);while(nextChild!=null&&(nextChild.name===childKey||oldEventCache.hasChild(nextChild.name))){// There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n// been applied to the limited filter yet. Ignore this next child which will be updated later in\n// the limited filter...\nnextChild=source.getChildAfterChild(this.index_,nextChild,this.reverse_);}const compareNext=nextChild==null?1:cmp(nextChild,newChildNamedNode);const remainsInWindow=inRange&&!childSnap.isEmpty()&&compareNext>=0;if(remainsInWindow){if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildChanged(childKey,childSnap,oldChildSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap);}else{if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildRemoved(childKey,oldChildSnap));}const newEventCache=oldEventCache.updateImmediateChild(childKey,ChildrenNode.EMPTY_NODE);const nextChildInRange=nextChild!=null&&this.rangedFilter_.matches(nextChild);if(nextChildInRange){if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildAdded(nextChild.name,nextChild.node));}return newEventCache.updateImmediateChild(nextChild.name,nextChild.node);}else{return newEventCache;}}}else if(childSnap.isEmpty()){// we're deleting a node, but it was not in the window, so ignore it\nreturn snap;}else if(inRange){if(cmp(windowBoundary,newChildNamedNode)>=0){if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name,windowBoundary.node));changeAccumulator.trackChildChange(changeChildAdded(childKey,childSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap).updateImmediateChild(windowBoundary.name,ChildrenNode.EMPTY_NODE);}else{return snap;}}else{return snap;}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */class QueryParams{constructor(){this.limitSet_=false;this.startSet_=false;this.startNameSet_=false;this.startAfterSet_=false;// can only be true if startSet_ is true\nthis.endSet_=false;this.endNameSet_=false;this.endBeforeSet_=false;// can only be true if endSet_ is true\nthis.limit_=0;this.viewFrom_='';this.indexStartValue_=null;this.indexStartName_='';this.indexEndValue_=null;this.indexEndName_='';this.index_=PRIORITY_INDEX;}hasStart(){return this.startSet_;}/**\r\n     * @returns True if it would return from left.\r\n     */isViewFromLeft(){if(this.viewFrom_===''){// limit(), rather than limitToFirst or limitToLast was called.\n// This means that only one of startSet_ and endSet_ is true. Use them\n// to calculate which side of the view to anchor to. If neither is set,\n// anchor to the end.\nreturn this.startSet_;}else{return this.viewFrom_===\"l\"/* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;}}/**\r\n     * Only valid to call if hasStart() returns true\r\n     */getIndexStartValue(){assert(this.startSet_,'Only valid if start has been set');return this.indexStartValue_;}/**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */getIndexStartName(){assert(this.startSet_,'Only valid if start has been set');if(this.startNameSet_){return this.indexStartName_;}else{return MIN_NAME;}}hasEnd(){return this.endSet_;}/**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */getIndexEndValue(){assert(this.endSet_,'Only valid if end has been set');return this.indexEndValue_;}/**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */getIndexEndName(){assert(this.endSet_,'Only valid if end has been set');if(this.endNameSet_){return this.indexEndName_;}else{return MAX_NAME;}}hasLimit(){return this.limitSet_;}/**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */hasAnchoredLimit(){return this.limitSet_&&this.viewFrom_!=='';}/**\r\n     * Only valid to call if hasLimit() returns true\r\n     */getLimit(){assert(this.limitSet_,'Only valid if limit has been set');return this.limit_;}getIndex(){return this.index_;}loadsAllData(){return!(this.startSet_||this.endSet_||this.limitSet_);}isDefault(){return this.loadsAllData()&&this.index_===PRIORITY_INDEX;}copy(){const copy=new QueryParams();copy.limitSet_=this.limitSet_;copy.limit_=this.limit_;copy.startSet_=this.startSet_;copy.startAfterSet_=this.startAfterSet_;copy.indexStartValue_=this.indexStartValue_;copy.startNameSet_=this.startNameSet_;copy.indexStartName_=this.indexStartName_;copy.endSet_=this.endSet_;copy.endBeforeSet_=this.endBeforeSet_;copy.indexEndValue_=this.indexEndValue_;copy.endNameSet_=this.endNameSet_;copy.indexEndName_=this.indexEndName_;copy.index_=this.index_;copy.viewFrom_=this.viewFrom_;return copy;}}function queryParamsGetNodeFilter(queryParams){if(queryParams.loadsAllData()){return new IndexedFilter(queryParams.getIndex());}else if(queryParams.hasLimit()){return new LimitedFilter(queryParams);}else{return new RangedFilter(queryParams);}}function queryParamsLimitToFirst(queryParams,newLimit){const newParams=queryParams.copy();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=\"l\"/* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;return newParams;}function queryParamsLimitToLast(queryParams,newLimit){const newParams=queryParams.copy();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=\"r\"/* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;return newParams;}function queryParamsStartAt(queryParams,indexValue,key){const newParams=queryParams.copy();newParams.startSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexStartValue_=indexValue;if(key!=null){newParams.startNameSet_=true;newParams.indexStartName_=key;}else{newParams.startNameSet_=false;newParams.indexStartName_='';}return newParams;}function queryParamsStartAfter(queryParams,indexValue,key){let params;if(queryParams.index_===KEY_INDEX||!!key){params=queryParamsStartAt(queryParams,indexValue,key);}else{params=queryParamsStartAt(queryParams,indexValue,MAX_NAME);}params.startAfterSet_=true;return params;}function queryParamsEndAt(queryParams,indexValue,key){const newParams=queryParams.copy();newParams.endSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexEndValue_=indexValue;if(key!==undefined){newParams.endNameSet_=true;newParams.indexEndName_=key;}else{newParams.endNameSet_=false;newParams.indexEndName_='';}return newParams;}function queryParamsEndBefore(queryParams,indexValue,key){let params;if(queryParams.index_===KEY_INDEX||!!key){params=queryParamsEndAt(queryParams,indexValue,key);}else{params=queryParamsEndAt(queryParams,indexValue,MIN_NAME);}params.endBeforeSet_=true;return params;}function queryParamsOrderBy(queryParams,index){const newParams=queryParams.copy();newParams.index_=index;return newParams;}/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */function queryParamsToRestQueryStringParameters(queryParams){const qs={};if(queryParams.isDefault()){return qs;}let orderBy;if(queryParams.index_===PRIORITY_INDEX){orderBy=\"$priority\"/* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;}else if(queryParams.index_===VALUE_INDEX){orderBy=\"$value\"/* REST_QUERY_CONSTANTS.VALUE_INDEX */;}else if(queryParams.index_===KEY_INDEX){orderBy=\"$key\"/* REST_QUERY_CONSTANTS.KEY_INDEX */;}else{assert(queryParams.index_ instanceof PathIndex,'Unrecognized index type!');orderBy=queryParams.index_.toString();}qs[\"orderBy\"/* REST_QUERY_CONSTANTS.ORDER_BY */]=stringify(orderBy);if(queryParams.startSet_){const startParam=queryParams.startAfterSet_?\"startAfter\"/* REST_QUERY_CONSTANTS.START_AFTER */:\"startAt\"/* REST_QUERY_CONSTANTS.START_AT */;qs[startParam]=stringify(queryParams.indexStartValue_);if(queryParams.startNameSet_){qs[startParam]+=','+stringify(queryParams.indexStartName_);}}if(queryParams.endSet_){const endParam=queryParams.endBeforeSet_?\"endBefore\"/* REST_QUERY_CONSTANTS.END_BEFORE */:\"endAt\"/* REST_QUERY_CONSTANTS.END_AT */;qs[endParam]=stringify(queryParams.indexEndValue_);if(queryParams.endNameSet_){qs[endParam]+=','+stringify(queryParams.indexEndName_);}}if(queryParams.limitSet_){if(queryParams.isViewFromLeft()){qs[\"limitToFirst\"/* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */]=queryParams.limit_;}else{qs[\"limitToLast\"/* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */]=queryParams.limit_;}}return qs;}function queryParamsGetQueryObject(queryParams){const obj={};if(queryParams.startSet_){obj[\"sp\"/* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */]=queryParams.indexStartValue_;if(queryParams.startNameSet_){obj[\"sn\"/* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */]=queryParams.indexStartName_;}obj[\"sin\"/* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */]=!queryParams.startAfterSet_;}if(queryParams.endSet_){obj[\"ep\"/* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */]=queryParams.indexEndValue_;if(queryParams.endNameSet_){obj[\"en\"/* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */]=queryParams.indexEndName_;}obj[\"ein\"/* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */]=!queryParams.endBeforeSet_;}if(queryParams.limitSet_){obj[\"l\"/* WIRE_PROTOCOL_CONSTANTS.LIMIT */]=queryParams.limit_;let viewFrom=queryParams.viewFrom_;if(viewFrom===''){if(queryParams.isViewFromLeft()){viewFrom=\"l\"/* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;}else{viewFrom=\"r\"/* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;}}obj[\"vf\"/* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */]=viewFrom;}// For now, priority index is the default, so we only specify if it's some other index\nif(queryParams.index_!==PRIORITY_INDEX){obj[\"i\"/* WIRE_PROTOCOL_CONSTANTS.INDEX */]=queryParams.index_.toString();}return obj;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */class ReadonlyRestClient extends ServerActions{/**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */constructor(repoInfo_,onDataUpdate_,authTokenProvider_,appCheckTokenProvider_){super();this.repoInfo_=repoInfo_;this.onDataUpdate_=onDataUpdate_;this.authTokenProvider_=authTokenProvider_;this.appCheckTokenProvider_=appCheckTokenProvider_;/** @private {function(...[*])} */this.log_=logWrapper('p:rest:');/**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */this.listens_={};}reportStats(stats){throw new Error('Method not implemented.');}static getListenId_(query,tag){if(tag!==undefined){return'tag$'+tag;}else{assert(query._queryParams.isDefault(),\"should have a tag if it's not a default query.\");return query._path.toString();}}/** @inheritDoc */listen(query,currentHashFn,tag,onComplete){const pathString=query._path.toString();this.log_('Listen called for '+pathString+' '+query._queryIdentifier);// Mark this listener so we can tell if it's removed.\nconst listenId=ReadonlyRestClient.getListenId_(query,tag);const thisListen={};this.listens_[listenId]=thisListen;const queryStringParameters=queryParamsToRestQueryStringParameters(query._queryParams);this.restRequest_(pathString+'.json',queryStringParameters,(error,result)=>{let data=result;if(error===404){data=null;error=null;}if(error===null){this.onDataUpdate_(pathString,data,/*isMerge=*/false,tag);}if(safeGet(this.listens_,listenId)===thisListen){let status;if(!error){status='ok';}else if(error===401){status='permission_denied';}else{status='rest_error:'+error;}onComplete(status,null);}});}/** @inheritDoc */unlisten(query,tag){const listenId=ReadonlyRestClient.getListenId_(query,tag);delete this.listens_[listenId];}get(query){const queryStringParameters=queryParamsToRestQueryStringParameters(query._queryParams);const pathString=query._path.toString();const deferred=new Deferred();this.restRequest_(pathString+'.json',queryStringParameters,(error,result)=>{let data=result;if(error===404){data=null;error=null;}if(error===null){this.onDataUpdate_(pathString,data,/*isMerge=*/false,/*tag=*/null);deferred.resolve(data);}else{deferred.reject(new Error(data));}});return deferred.promise;}/** @inheritDoc */refreshAuthToken(token){// no-op since we just always call getToken.\n}/**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */restRequest_(pathString,queryStringParameters={},callback){queryStringParameters['format']='export';return Promise.all([this.authTokenProvider_.getToken(/*forceRefresh=*/false),this.appCheckTokenProvider_.getToken(/*forceRefresh=*/false)]).then(([authToken,appCheckToken])=>{if(authToken&&authToken.accessToken){queryStringParameters['auth']=authToken.accessToken;}if(appCheckToken&&appCheckToken.token){queryStringParameters['ac']=appCheckToken.token;}const url=(this.repoInfo_.secure?'https://':'http://')+this.repoInfo_.host+pathString+'?'+'ns='+this.repoInfo_.namespace+querystring(queryStringParameters);this.log_('Sending REST request for '+url);const xhr=new XMLHttpRequest();xhr.onreadystatechange=()=>{if(callback&&xhr.readyState===4){this.log_('REST Response for '+url+' received. status:',xhr.status,'response:',xhr.responseText);let res=null;if(xhr.status>=200&&xhr.status<300){try{res=jsonEval(xhr.responseText);}catch(e){warn('Failed to parse JSON response for '+url+': '+xhr.responseText);}callback(null,res);}else{// 401 and 404 are expected.\nif(xhr.status!==401&&xhr.status!==404){warn('Got unsuccessful REST response for '+url+' Status: '+xhr.status);}callback(xhr.status);}callback=null;}};xhr.open('GET',url,/*asynchronous=*/true);xhr.send();});}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */class SnapshotHolder{constructor(){this.rootNode_=ChildrenNode.EMPTY_NODE;}getNode(path){return this.rootNode_.getChild(path);}updateSnapshot(path,newSnapshotNode){this.rootNode_=this.rootNode_.updateChild(path,newSnapshotNode);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function newSparseSnapshotTree(){return{value:null,children:new Map()};}/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */function sparseSnapshotTreeRemember(sparseSnapshotTree,path,data){if(pathIsEmpty(path)){sparseSnapshotTree.value=data;sparseSnapshotTree.children.clear();}else if(sparseSnapshotTree.value!==null){sparseSnapshotTree.value=sparseSnapshotTree.value.updateChild(path,data);}else{const childKey=pathGetFront(path);if(!sparseSnapshotTree.children.has(childKey)){sparseSnapshotTree.children.set(childKey,newSparseSnapshotTree());}const child=sparseSnapshotTree.children.get(childKey);path=pathPopFront(path);sparseSnapshotTreeRemember(child,path,data);}}/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */function sparseSnapshotTreeForget(sparseSnapshotTree,path){if(pathIsEmpty(path)){sparseSnapshotTree.value=null;sparseSnapshotTree.children.clear();return true;}else{if(sparseSnapshotTree.value!==null){if(sparseSnapshotTree.value.isLeafNode()){// We're trying to forget a node that doesn't exist\nreturn false;}else{const value=sparseSnapshotTree.value;sparseSnapshotTree.value=null;value.forEachChild(PRIORITY_INDEX,(key,tree)=>{sparseSnapshotTreeRemember(sparseSnapshotTree,new Path(key),tree);});return sparseSnapshotTreeForget(sparseSnapshotTree,path);}}else if(sparseSnapshotTree.children.size>0){const childKey=pathGetFront(path);path=pathPopFront(path);if(sparseSnapshotTree.children.has(childKey)){const safeToRemove=sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey),path);if(safeToRemove){sparseSnapshotTree.children.delete(childKey);}}return sparseSnapshotTree.children.size===0;}else{return true;}}}/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */function sparseSnapshotTreeForEachTree(sparseSnapshotTree,prefixPath,func){if(sparseSnapshotTree.value!==null){func(prefixPath,sparseSnapshotTree.value);}else{sparseSnapshotTreeForEachChild(sparseSnapshotTree,(key,tree)=>{const path=new Path(prefixPath.toString()+'/'+key);sparseSnapshotTreeForEachTree(tree,path,func);});}}/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */function sparseSnapshotTreeForEachChild(sparseSnapshotTree,func){sparseSnapshotTree.children.forEach((tree,key)=>{func(key,tree);});}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */class StatsListener{constructor(collection_){this.collection_=collection_;this.last_=null;}get(){const newStats=this.collection_.get();const delta=Object.assign({},newStats);if(this.last_){each(this.last_,(stat,value)=>{delta[stat]=delta[stat]-value;});}this.last_=newStats;return delta;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME=10*1000;const FIRST_STATS_MAX_TIME=30*1000;// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL=5*60*1000;class StatsReporter{constructor(collection,server_){this.server_=server_;this.statsToReport_={};this.statsListener_=new StatsListener(collection);const timeout=FIRST_STATS_MIN_TIME+(FIRST_STATS_MAX_TIME-FIRST_STATS_MIN_TIME)*Math.random();setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(timeout));}reportStats_(){const stats=this.statsListener_.get();const reportedStats={};let haveStatsToReport=false;each(stats,(stat,value)=>{if(value>0&&contains(this.statsToReport_,stat)){reportedStats[stat]=value;haveStatsToReport=true;}});if(haveStatsToReport){this.server_.reportStats(reportedStats);}// queue our next run.\nsetTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(Math.random()*2*REPORT_STATS_INTERVAL));}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n *\r\n * @enum\r\n */var OperationType;(function(OperationType){OperationType[OperationType[\"OVERWRITE\"]=0]=\"OVERWRITE\";OperationType[OperationType[\"MERGE\"]=1]=\"MERGE\";OperationType[OperationType[\"ACK_USER_WRITE\"]=2]=\"ACK_USER_WRITE\";OperationType[OperationType[\"LISTEN_COMPLETE\"]=3]=\"LISTEN_COMPLETE\";})(OperationType||(OperationType={}));function newOperationSourceUser(){return{fromUser:true,fromServer:false,queryId:null,tagged:false};}function newOperationSourceServer(){return{fromUser:false,fromServer:true,queryId:null,tagged:false};}function newOperationSourceServerTaggedQuery(queryId){return{fromUser:false,fromServer:true,queryId,tagged:true};}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class AckUserWrite{/**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */constructor(/** @inheritDoc */path,/** @inheritDoc */affectedTree,/** @inheritDoc */revert){this.path=path;this.affectedTree=affectedTree;this.revert=revert;/** @inheritDoc */this.type=OperationType.ACK_USER_WRITE;/** @inheritDoc */this.source=newOperationSourceUser();}operationForChild(childName){if(!pathIsEmpty(this.path)){assert(pathGetFront(this.path)===childName,'operationForChild called for unrelated child.');return new AckUserWrite(pathPopFront(this.path),this.affectedTree,this.revert);}else if(this.affectedTree.value!=null){assert(this.affectedTree.children.isEmpty(),'affectedTree should not have overlapping affected paths.');// All child locations are affected as well; just return same operation.\nreturn this;}else{const childTree=this.affectedTree.subtree(new Path(childName));return new AckUserWrite(newEmptyPath(),childTree,this.revert);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ListenComplete{constructor(source,path){this.source=source;this.path=path;/** @inheritDoc */this.type=OperationType.LISTEN_COMPLETE;}operationForChild(childName){if(pathIsEmpty(this.path)){return new ListenComplete(this.source,newEmptyPath());}else{return new ListenComplete(this.source,pathPopFront(this.path));}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class Overwrite{constructor(source,path,snap){this.source=source;this.path=path;this.snap=snap;/** @inheritDoc */this.type=OperationType.OVERWRITE;}operationForChild(childName){if(pathIsEmpty(this.path)){return new Overwrite(this.source,newEmptyPath(),this.snap.getImmediateChild(childName));}else{return new Overwrite(this.source,pathPopFront(this.path),this.snap);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class Merge{constructor(/** @inheritDoc */source,/** @inheritDoc */path,/** @inheritDoc */children){this.source=source;this.path=path;this.children=children;/** @inheritDoc */this.type=OperationType.MERGE;}operationForChild(childName){if(pathIsEmpty(this.path)){const childTree=this.children.subtree(new Path(childName));if(childTree.isEmpty()){// This child is unaffected\nreturn null;}else if(childTree.value){// We have a snapshot for the child in question.  This becomes an overwrite of the child.\nreturn new Overwrite(this.source,newEmptyPath(),childTree.value);}else{// This is a merge at a deeper level\nreturn new Merge(this.source,newEmptyPath(),childTree);}}else{assert(pathGetFront(this.path)===childName,\"Can't get a merge for a child not on the path of the operation\");return new Merge(this.source,pathPopFront(this.path),this.children);}}toString(){return'Operation('+this.path+': '+this.source.toString()+' merge: '+this.children.toString()+')';}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */class CacheNode{constructor(node_,fullyInitialized_,filtered_){this.node_=node_;this.fullyInitialized_=fullyInitialized_;this.filtered_=filtered_;}/**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */isFullyInitialized(){return this.fullyInitialized_;}/**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */isFiltered(){return this.filtered_;}isCompleteForPath(path){if(pathIsEmpty(path)){return this.isFullyInitialized()&&!this.filtered_;}const childKey=pathGetFront(path);return this.isCompleteForChild(childKey);}isCompleteForChild(key){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(key);}getNode(){return this.node_;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */class EventGenerator{constructor(query_){this.query_=query_;this.index_=this.query_._queryParams.getIndex();}}/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */function eventGeneratorGenerateEventsForChanges(eventGenerator,changes,eventCache,eventRegistrations){const events=[];const moves=[];changes.forEach(change=>{if(change.type===\"child_changed\"/* ChangeType.CHILD_CHANGED */&&eventGenerator.index_.indexedValueChanged(change.oldSnap,change.snapshotNode)){moves.push(changeChildMoved(change.childName,change.snapshotNode));}});eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_removed\"/* ChangeType.CHILD_REMOVED */,changes,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_added\"/* ChangeType.CHILD_ADDED */,changes,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_moved\"/* ChangeType.CHILD_MOVED */,moves,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_changed\"/* ChangeType.CHILD_CHANGED */,changes,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"value\"/* ChangeType.VALUE */,changes,eventRegistrations,eventCache);return events;}/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */function eventGeneratorGenerateEventsForType(eventGenerator,events,eventType,changes,registrations,eventCache){const filteredChanges=changes.filter(change=>change.type===eventType);filteredChanges.sort((a,b)=>eventGeneratorCompareChanges(eventGenerator,a,b));filteredChanges.forEach(change=>{const materializedChange=eventGeneratorMaterializeSingleChange(eventGenerator,change,eventCache);registrations.forEach(registration=>{if(registration.respondsTo(change.type)){events.push(registration.createEvent(materializedChange,eventGenerator.query_));}});});}function eventGeneratorMaterializeSingleChange(eventGenerator,change,eventCache){if(change.type==='value'||change.type==='child_removed'){return change;}else{change.prevName=eventCache.getPredecessorChildName(change.childName,change.snapshotNode,eventGenerator.index_);return change;}}function eventGeneratorCompareChanges(eventGenerator,a,b){if(a.childName==null||b.childName==null){throw assertionError('Should only compare child_ events.');}const aWrapped=new NamedNode(a.childName,a.snapshotNode);const bWrapped=new NamedNode(b.childName,b.snapshotNode);return eventGenerator.index_.compare(aWrapped,bWrapped);}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function newViewCache(eventCache,serverCache){return{eventCache,serverCache};}function viewCacheUpdateEventSnap(viewCache,eventSnap,complete,filtered){return newViewCache(new CacheNode(eventSnap,complete,filtered),viewCache.serverCache);}function viewCacheUpdateServerSnap(viewCache,serverSnap,complete,filtered){return newViewCache(viewCache.eventCache,new CacheNode(serverSnap,complete,filtered));}function viewCacheGetCompleteEventSnap(viewCache){return viewCache.eventCache.isFullyInitialized()?viewCache.eventCache.getNode():null;}function viewCacheGetCompleteServerSnap(viewCache){return viewCache.serverCache.isFullyInitialized()?viewCache.serverCache.getNode():null;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let emptyChildrenSingleton;/**\r\n * Singleton empty children collection.\r\n *\r\n */const EmptyChildren=()=>{if(!emptyChildrenSingleton){emptyChildrenSingleton=new SortedMap(stringCompare);}return emptyChildrenSingleton;};/**\r\n * A tree with immutable elements.\r\n */class ImmutableTree{constructor(value,children=EmptyChildren()){this.value=value;this.children=children;}static fromObject(obj){let tree=new ImmutableTree(null);each(obj,(childPath,childSnap)=>{tree=tree.set(new Path(childPath),childSnap);});return tree;}/**\r\n     * True if the value is empty and there are no children\r\n     */isEmpty(){return this.value===null&&this.children.isEmpty();}/**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */findRootMostMatchingPathAndValue(relativePath,predicate){if(this.value!=null&&predicate(this.value)){return{path:newEmptyPath(),value:this.value};}else{if(pathIsEmpty(relativePath)){return null;}else{const front=pathGetFront(relativePath);const child=this.children.get(front);if(child!==null){const childExistingPathAndValue=child.findRootMostMatchingPathAndValue(pathPopFront(relativePath),predicate);if(childExistingPathAndValue!=null){const fullPath=pathChild(new Path(front),childExistingPathAndValue.path);return{path:fullPath,value:childExistingPathAndValue.value};}else{return null;}}else{return null;}}}}/**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */findRootMostValueAndPath(relativePath){return this.findRootMostMatchingPathAndValue(relativePath,()=>true);}/**\r\n     * @returns The subtree at the given path\r\n     */subtree(relativePath){if(pathIsEmpty(relativePath)){return this;}else{const front=pathGetFront(relativePath);const childTree=this.children.get(front);if(childTree!==null){return childTree.subtree(pathPopFront(relativePath));}else{return new ImmutableTree(null);}}}/**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */set(relativePath,toSet){if(pathIsEmpty(relativePath)){return new ImmutableTree(toSet,this.children);}else{const front=pathGetFront(relativePath);const child=this.children.get(front)||new ImmutableTree(null);const newChild=child.set(pathPopFront(relativePath),toSet);const newChildren=this.children.insert(front,newChild);return new ImmutableTree(this.value,newChildren);}}/**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */remove(relativePath){if(pathIsEmpty(relativePath)){if(this.children.isEmpty()){return new ImmutableTree(null);}else{return new ImmutableTree(null,this.children);}}else{const front=pathGetFront(relativePath);const child=this.children.get(front);if(child){const newChild=child.remove(pathPopFront(relativePath));let newChildren;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}if(this.value===null&&newChildren.isEmpty()){return new ImmutableTree(null);}else{return new ImmutableTree(this.value,newChildren);}}else{return this;}}}/**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */get(relativePath){if(pathIsEmpty(relativePath)){return this.value;}else{const front=pathGetFront(relativePath);const child=this.children.get(front);if(child){return child.get(pathPopFront(relativePath));}else{return null;}}}/**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */setTree(relativePath,newTree){if(pathIsEmpty(relativePath)){return newTree;}else{const front=pathGetFront(relativePath);const child=this.children.get(front)||new ImmutableTree(null);const newChild=child.setTree(pathPopFront(relativePath),newTree);let newChildren;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}return new ImmutableTree(this.value,newChildren);}}/**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */fold(fn){return this.fold_(newEmptyPath(),fn);}/**\r\n     * Recursive helper for public-facing fold() method\r\n     */fold_(pathSoFar,fn){const accum={};this.children.inorderTraversal((childKey,childTree)=>{accum[childKey]=childTree.fold_(pathChild(pathSoFar,childKey),fn);});return fn(pathSoFar,this.value,accum);}/**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */findOnPath(path,f){return this.findOnPath_(path,newEmptyPath(),f);}findOnPath_(pathToFollow,pathSoFar,f){const result=this.value?f(pathSoFar,this.value):false;if(result){return result;}else{if(pathIsEmpty(pathToFollow)){return null;}else{const front=pathGetFront(pathToFollow);const nextChild=this.children.get(front);if(nextChild){return nextChild.findOnPath_(pathPopFront(pathToFollow),pathChild(pathSoFar,front),f);}else{return null;}}}}foreachOnPath(path,f){return this.foreachOnPath_(path,newEmptyPath(),f);}foreachOnPath_(pathToFollow,currentRelativePath,f){if(pathIsEmpty(pathToFollow)){return this;}else{if(this.value){f(currentRelativePath,this.value);}const front=pathGetFront(pathToFollow);const nextChild=this.children.get(front);if(nextChild){return nextChild.foreachOnPath_(pathPopFront(pathToFollow),pathChild(currentRelativePath,front),f);}else{return new ImmutableTree(null);}}}/**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */foreach(f){this.foreach_(newEmptyPath(),f);}foreach_(currentRelativePath,f){this.children.inorderTraversal((childName,childTree)=>{childTree.foreach_(pathChild(currentRelativePath,childName),f);});if(this.value){f(currentRelativePath,this.value);}}foreachChild(f){this.children.inorderTraversal((childName,childTree)=>{if(childTree.value){f(childName,childTree.value);}});}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */class CompoundWrite{constructor(writeTree_){this.writeTree_=writeTree_;}static empty(){return new CompoundWrite(new ImmutableTree(null));}}function compoundWriteAddWrite(compoundWrite,path,node){if(pathIsEmpty(path)){return new CompoundWrite(new ImmutableTree(node));}else{const rootmost=compoundWrite.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){const rootMostPath=rootmost.path;let value=rootmost.value;const relativePath=newRelativePath(rootMostPath,path);value=value.updateChild(relativePath,node);return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath,value));}else{const subtree=new ImmutableTree(node);const newWriteTree=compoundWrite.writeTree_.setTree(path,subtree);return new CompoundWrite(newWriteTree);}}}function compoundWriteAddWrites(compoundWrite,path,updates){let newWrite=compoundWrite;each(updates,(childKey,node)=>{newWrite=compoundWriteAddWrite(newWrite,pathChild(path,childKey),node);});return newWrite;}/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */function compoundWriteRemoveWrite(compoundWrite,path){if(pathIsEmpty(path)){return CompoundWrite.empty();}else{const newWriteTree=compoundWrite.writeTree_.setTree(path,new ImmutableTree(null));return new CompoundWrite(newWriteTree);}}/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */function compoundWriteHasCompleteWrite(compoundWrite,path){return compoundWriteGetCompleteNode(compoundWrite,path)!=null;}/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */function compoundWriteGetCompleteNode(compoundWrite,path){const rootmost=compoundWrite.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path,path));}else{return null;}}/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */function compoundWriteGetCompleteChildren(compoundWrite){const children=[];const node=compoundWrite.writeTree_.value;if(node!=null){// If it's a leaf node, it has no children; so nothing to do.\nif(!node.isLeafNode()){node.forEachChild(PRIORITY_INDEX,(childName,childNode)=>{children.push(new NamedNode(childName,childNode));});}}else{compoundWrite.writeTree_.children.inorderTraversal((childName,childTree)=>{if(childTree.value!=null){children.push(new NamedNode(childName,childTree.value));}});}return children;}function compoundWriteChildCompoundWrite(compoundWrite,path){if(pathIsEmpty(path)){return compoundWrite;}else{const shadowingNode=compoundWriteGetCompleteNode(compoundWrite,path);if(shadowingNode!=null){return new CompoundWrite(new ImmutableTree(shadowingNode));}else{return new CompoundWrite(compoundWrite.writeTree_.subtree(path));}}}/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */function compoundWriteIsEmpty(compoundWrite){return compoundWrite.writeTree_.isEmpty();}/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */function compoundWriteApply(compoundWrite,node){return applySubtreeWrite(newEmptyPath(),compoundWrite.writeTree_,node);}function applySubtreeWrite(relativePath,writeTree,node){if(writeTree.value!=null){// Since there a write is always a leaf, we're done here\nreturn node.updateChild(relativePath,writeTree.value);}else{let priorityWrite=null;writeTree.children.inorderTraversal((childKey,childTree)=>{if(childKey==='.priority'){// Apply priorities at the end so we don't update priorities for either empty nodes or forget\n// to apply priorities to empty nodes that are later filled\nassert(childTree.value!==null,'Priority writes must always be leaf nodes');priorityWrite=childTree.value;}else{node=applySubtreeWrite(pathChild(relativePath,childKey),childTree,node);}});// If there was a priority write, we only apply it if the node is not empty\nif(!node.getChild(relativePath).isEmpty()&&priorityWrite!==null){node=node.updateChild(pathChild(relativePath,'.priority'),priorityWrite);}return node;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */function writeTreeChildWrites(writeTree,path){return newWriteTreeRef(path,writeTree);}/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */function writeTreeAddOverwrite(writeTree,path,snap,writeId,visible){assert(writeId>writeTree.lastWriteId,'Stacking an older write on top of newer ones');if(visible===undefined){visible=true;}writeTree.allWrites.push({path,snap,writeId,visible});if(visible){writeTree.visibleWrites=compoundWriteAddWrite(writeTree.visibleWrites,path,snap);}writeTree.lastWriteId=writeId;}/**\r\n * Record a new merge from user code.\r\n */function writeTreeAddMerge(writeTree,path,changedChildren,writeId){assert(writeId>writeTree.lastWriteId,'Stacking an older merge on top of newer ones');writeTree.allWrites.push({path,children:changedChildren,writeId,visible:true});writeTree.visibleWrites=compoundWriteAddWrites(writeTree.visibleWrites,path,changedChildren);writeTree.lastWriteId=writeId;}function writeTreeGetWrite(writeTree,writeId){for(let i=0;i<writeTree.allWrites.length;i++){const record=writeTree.allWrites[i];if(record.writeId===writeId){return record;}}return null;}/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */function writeTreeRemoveWrite(writeTree,writeId){// Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n// out of order.\n//const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n//assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\nconst idx=writeTree.allWrites.findIndex(s=>{return s.writeId===writeId;});assert(idx>=0,'removeWrite called with nonexistent writeId.');const writeToRemove=writeTree.allWrites[idx];writeTree.allWrites.splice(idx,1);let removedWriteWasVisible=writeToRemove.visible;let removedWriteOverlapsWithOtherWrites=false;let i=writeTree.allWrites.length-1;while(removedWriteWasVisible&&i>=0){const currentWrite=writeTree.allWrites[i];if(currentWrite.visible){if(i>=idx&&writeTreeRecordContainsPath_(currentWrite,writeToRemove.path)){// The removed write was completely shadowed by a subsequent write.\nremovedWriteWasVisible=false;}else if(pathContains(writeToRemove.path,currentWrite.path)){// Either we're covering some writes or they're covering part of us (depending on which came first).\nremovedWriteOverlapsWithOtherWrites=true;}}i--;}if(!removedWriteWasVisible){return false;}else if(removedWriteOverlapsWithOtherWrites){// There's some shadowing going on. Just rebuild the visible writes from scratch.\nwriteTreeResetTree_(writeTree);return true;}else{// There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\nif(writeToRemove.snap){writeTree.visibleWrites=compoundWriteRemoveWrite(writeTree.visibleWrites,writeToRemove.path);}else{const children=writeToRemove.children;each(children,childName=>{writeTree.visibleWrites=compoundWriteRemoveWrite(writeTree.visibleWrites,pathChild(writeToRemove.path,childName));});}return true;}}function writeTreeRecordContainsPath_(writeRecord,path){if(writeRecord.snap){return pathContains(writeRecord.path,path);}else{for(const childName in writeRecord.children){if(writeRecord.children.hasOwnProperty(childName)&&pathContains(pathChild(writeRecord.path,childName),path)){return true;}}return false;}}/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */function writeTreeResetTree_(writeTree){writeTree.visibleWrites=writeTreeLayerTree_(writeTree.allWrites,writeTreeDefaultFilter_,newEmptyPath());if(writeTree.allWrites.length>0){writeTree.lastWriteId=writeTree.allWrites[writeTree.allWrites.length-1].writeId;}else{writeTree.lastWriteId=-1;}}/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */function writeTreeDefaultFilter_(write){return write.visible;}/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */function writeTreeLayerTree_(writes,filter,treeRoot){let compoundWrite=CompoundWrite.empty();for(let i=0;i<writes.length;++i){const write=writes[i];// Theory, a later set will either:\n// a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n// b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\nif(filter(write)){const writePath=write.path;let relativePath;if(write.snap){if(pathContains(treeRoot,writePath)){relativePath=newRelativePath(treeRoot,writePath);compoundWrite=compoundWriteAddWrite(compoundWrite,relativePath,write.snap);}else if(pathContains(writePath,treeRoot)){relativePath=newRelativePath(writePath,treeRoot);compoundWrite=compoundWriteAddWrite(compoundWrite,newEmptyPath(),write.snap.getChild(relativePath));}else;}else if(write.children){if(pathContains(treeRoot,writePath)){relativePath=newRelativePath(treeRoot,writePath);compoundWrite=compoundWriteAddWrites(compoundWrite,relativePath,write.children);}else if(pathContains(writePath,treeRoot)){relativePath=newRelativePath(writePath,treeRoot);if(pathIsEmpty(relativePath)){compoundWrite=compoundWriteAddWrites(compoundWrite,newEmptyPath(),write.children);}else{const child=safeGet(write.children,pathGetFront(relativePath));if(child){// There exists a child in this node that matches the root path\nconst deepNode=child.getChild(pathPopFront(relativePath));compoundWrite=compoundWriteAddWrite(compoundWrite,newEmptyPath(),deepNode);}}}else;}else{throw assertionError('WriteRecord should have .snap or .children');}}}return compoundWrite;}/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */function writeTreeCalcCompleteEventCache(writeTree,treePath,completeServerCache,writeIdsToExclude,includeHiddenWrites){if(!writeIdsToExclude&&!includeHiddenWrites){const shadowingNode=compoundWriteGetCompleteNode(writeTree.visibleWrites,treePath);if(shadowingNode!=null){return shadowingNode;}else{const subMerge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);if(compoundWriteIsEmpty(subMerge)){return completeServerCache;}else if(completeServerCache==null&&!compoundWriteHasCompleteWrite(subMerge,newEmptyPath())){// We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\nreturn null;}else{const layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return compoundWriteApply(subMerge,layeredCache);}}}else{const merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);if(!includeHiddenWrites&&compoundWriteIsEmpty(merge)){return completeServerCache;}else{// If the server cache is null, and we don't have a complete cache, we need to return null\nif(!includeHiddenWrites&&completeServerCache==null&&!compoundWriteHasCompleteWrite(merge,newEmptyPath())){return null;}else{const filter=function(write){return(write.visible||includeHiddenWrites)&&(!writeIdsToExclude||!~writeIdsToExclude.indexOf(write.writeId))&&(pathContains(write.path,treePath)||pathContains(treePath,write.path));};const mergeAtPath=writeTreeLayerTree_(writeTree.allWrites,filter,treePath);const layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return compoundWriteApply(mergeAtPath,layeredCache);}}}}/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */function writeTreeCalcCompleteEventChildren(writeTree,treePath,completeServerChildren){let completeChildren=ChildrenNode.EMPTY_NODE;const topLevelSet=compoundWriteGetCompleteNode(writeTree.visibleWrites,treePath);if(topLevelSet){if(!topLevelSet.isLeafNode()){// we're shadowing everything. Return the children.\ntopLevelSet.forEachChild(PRIORITY_INDEX,(childName,childSnap)=>{completeChildren=completeChildren.updateImmediateChild(childName,childSnap);});}return completeChildren;}else if(completeServerChildren){// Layer any children we have on top of this\n// We know we don't have a top-level set, so just enumerate existing children\nconst merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);completeServerChildren.forEachChild(PRIORITY_INDEX,(childName,childNode)=>{const node=compoundWriteApply(compoundWriteChildCompoundWrite(merge,new Path(childName)),childNode);completeChildren=completeChildren.updateImmediateChild(childName,node);});// Add any complete children we have from the set\ncompoundWriteGetCompleteChildren(merge).forEach(namedNode=>{completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}else{// We don't have anything to layer on top of. Layer on any children we have\n// Note that we can return an empty snap if we have a defined delete\nconst merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);compoundWriteGetCompleteChildren(merge).forEach(namedNode=>{completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}}/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */function writeTreeCalcEventCacheAfterServerOverwrite(writeTree,treePath,childPath,existingEventSnap,existingServerSnap){assert(existingEventSnap||existingServerSnap,'Either existingEventSnap or existingServerSnap must exist');const path=pathChild(treePath,childPath);if(compoundWriteHasCompleteWrite(writeTree.visibleWrites,path)){// At this point we can probably guarantee that we're in case 2, meaning no events\n// May need to check visibility while doing the findRootMostValueAndPath call\nreturn null;}else{// No complete shadowing. We're either partially shadowing or not shadowing at all.\nconst childMerge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,path);if(compoundWriteIsEmpty(childMerge)){// We're not shadowing at all. Case 1\nreturn existingServerSnap.getChild(childPath);}else{// This could be more efficient if the serverNode + updates doesn't change the eventSnap\n// However this is tricky to find out, since user updates don't necessary change the server\n// snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n// adds nodes, but doesn't change any existing writes. It is therefore not enough to\n// only check if the updates change the serverNode.\n// Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\nreturn compoundWriteApply(childMerge,existingServerSnap.getChild(childPath));}}}/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */function writeTreeCalcCompleteChild(writeTree,treePath,childKey,existingServerSnap){const path=pathChild(treePath,childKey);const shadowingNode=compoundWriteGetCompleteNode(writeTree.visibleWrites,path);if(shadowingNode!=null){return shadowingNode;}else{if(existingServerSnap.isCompleteForChild(childKey)){const childMerge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,path);return compoundWriteApply(childMerge,existingServerSnap.getNode().getImmediateChild(childKey));}else{return null;}}}/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */function writeTreeShadowingWrite(writeTree,path){return compoundWriteGetCompleteNode(writeTree.visibleWrites,path);}/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */function writeTreeCalcIndexedSlice(writeTree,treePath,completeServerData,startPost,count,reverse,index){let toIterate;const merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);const shadowingNode=compoundWriteGetCompleteNode(merge,newEmptyPath());if(shadowingNode!=null){toIterate=shadowingNode;}else if(completeServerData!=null){toIterate=compoundWriteApply(merge,completeServerData);}else{// no children to iterate on\nreturn[];}toIterate=toIterate.withIndex(index);if(!toIterate.isEmpty()&&!toIterate.isLeafNode()){const nodes=[];const cmp=index.getCompare();const iter=reverse?toIterate.getReverseIteratorFrom(startPost,index):toIterate.getIteratorFrom(startPost,index);let next=iter.getNext();while(next&&nodes.length<count){if(cmp(next,startPost)!==0){nodes.push(next);}next=iter.getNext();}return nodes;}else{return[];}}function newWriteTree(){return{visibleWrites:CompoundWrite.empty(),allWrites:[],lastWriteId:-1};}/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */function writeTreeRefCalcCompleteEventCache(writeTreeRef,completeServerCache,writeIdsToExclude,includeHiddenWrites){return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree,writeTreeRef.treePath,completeServerCache,writeIdsToExclude,includeHiddenWrites);}/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */function writeTreeRefCalcCompleteEventChildren(writeTreeRef,completeServerChildren){return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree,writeTreeRef.treePath,completeServerChildren);}/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef,path,existingEventSnap,existingServerSnap){return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree,writeTreeRef.treePath,path,existingEventSnap,existingServerSnap);}/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */function writeTreeRefShadowingWrite(writeTreeRef,path){return writeTreeShadowingWrite(writeTreeRef.writeTree,pathChild(writeTreeRef.treePath,path));}/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */function writeTreeRefCalcIndexedSlice(writeTreeRef,completeServerData,startPost,count,reverse,index){return writeTreeCalcIndexedSlice(writeTreeRef.writeTree,writeTreeRef.treePath,completeServerData,startPost,count,reverse,index);}/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */function writeTreeRefCalcCompleteChild(writeTreeRef,childKey,existingServerCache){return writeTreeCalcCompleteChild(writeTreeRef.writeTree,writeTreeRef.treePath,childKey,existingServerCache);}/**\r\n * Return a WriteTreeRef for a child.\r\n */function writeTreeRefChild(writeTreeRef,childName){return newWriteTreeRef(pathChild(writeTreeRef.treePath,childName),writeTreeRef.writeTree);}function newWriteTreeRef(path,writeTree){return{treePath:path,writeTree};}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ChildChangeAccumulator{constructor(){this.changeMap=new Map();}trackChildChange(change){const type=change.type;const childKey=change.childName;assert(type===\"child_added\"/* ChangeType.CHILD_ADDED */||type===\"child_changed\"/* ChangeType.CHILD_CHANGED */||type===\"child_removed\"/* ChangeType.CHILD_REMOVED */,'Only child changes supported for tracking');assert(childKey!=='.priority','Only non-priority child changes can be tracked.');const oldChange=this.changeMap.get(childKey);if(oldChange){const oldType=oldChange.type;if(type===\"child_added\"/* ChangeType.CHILD_ADDED */&&oldType===\"child_removed\"/* ChangeType.CHILD_REMOVED */){this.changeMap.set(childKey,changeChildChanged(childKey,change.snapshotNode,oldChange.snapshotNode));}else if(type===\"child_removed\"/* ChangeType.CHILD_REMOVED */&&oldType===\"child_added\"/* ChangeType.CHILD_ADDED */){this.changeMap.delete(childKey);}else if(type===\"child_removed\"/* ChangeType.CHILD_REMOVED */&&oldType===\"child_changed\"/* ChangeType.CHILD_CHANGED */){this.changeMap.set(childKey,changeChildRemoved(childKey,oldChange.oldSnap));}else if(type===\"child_changed\"/* ChangeType.CHILD_CHANGED */&&oldType===\"child_added\"/* ChangeType.CHILD_ADDED */){this.changeMap.set(childKey,changeChildAdded(childKey,change.snapshotNode));}else if(type===\"child_changed\"/* ChangeType.CHILD_CHANGED */&&oldType===\"child_changed\"/* ChangeType.CHILD_CHANGED */){this.changeMap.set(childKey,changeChildChanged(childKey,change.snapshotNode,oldChange.oldSnap));}else{throw assertionError('Illegal combination of changes: '+change+' occurred after '+oldChange);}}else{this.changeMap.set(childKey,change);}}getChanges(){return Array.from(this.changeMap.values());}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_{getCompleteChild(childKey){return null;}getChildAfterChild(index,child,reverse){return null;}}/**\r\n * Singleton instance.\r\n */const NO_COMPLETE_CHILD_SOURCE=new NoCompleteChildSource_();/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */class WriteTreeCompleteChildSource{constructor(writes_,viewCache_,optCompleteServerCache_=null){this.writes_=writes_;this.viewCache_=viewCache_;this.optCompleteServerCache_=optCompleteServerCache_;}getCompleteChild(childKey){const node=this.viewCache_.eventCache;if(node.isCompleteForChild(childKey)){return node.getNode().getImmediateChild(childKey);}else{const serverNode=this.optCompleteServerCache_!=null?new CacheNode(this.optCompleteServerCache_,true,false):this.viewCache_.serverCache;return writeTreeRefCalcCompleteChild(this.writes_,childKey,serverNode);}}getChildAfterChild(index,child,reverse){const completeServerData=this.optCompleteServerCache_!=null?this.optCompleteServerCache_:viewCacheGetCompleteServerSnap(this.viewCache_);const nodes=writeTreeRefCalcIndexedSlice(this.writes_,completeServerData,child,1,reverse,index);if(nodes.length===0){return null;}else{return nodes[0];}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function newViewProcessor(filter){return{filter};}function viewProcessorAssertIndexed(viewProcessor,viewCache){assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),'Event snap not indexed');assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),'Server snap not indexed');}function viewProcessorApplyOperation(viewProcessor,oldViewCache,operation,writesCache,completeCache){const accumulator=new ChildChangeAccumulator();let newViewCache,filterServerNode;if(operation.type===OperationType.OVERWRITE){const overwrite=operation;if(overwrite.source.fromUser){newViewCache=viewProcessorApplyUserOverwrite(viewProcessor,oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,accumulator);}else{assert(overwrite.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered  and the\n// update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n// again\nfilterServerNode=overwrite.source.tagged||oldViewCache.serverCache.isFiltered()&&!pathIsEmpty(overwrite.path);newViewCache=viewProcessorApplyServerOverwrite(viewProcessor,oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.MERGE){const merge=operation;if(merge.source.fromUser){newViewCache=viewProcessorApplyUserMerge(viewProcessor,oldViewCache,merge.path,merge.children,writesCache,completeCache,accumulator);}else{assert(merge.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered\nfilterServerNode=merge.source.tagged||oldViewCache.serverCache.isFiltered();newViewCache=viewProcessorApplyServerMerge(viewProcessor,oldViewCache,merge.path,merge.children,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.ACK_USER_WRITE){const ackUserWrite=operation;if(!ackUserWrite.revert){newViewCache=viewProcessorAckUserWrite(viewProcessor,oldViewCache,ackUserWrite.path,ackUserWrite.affectedTree,writesCache,completeCache,accumulator);}else{newViewCache=viewProcessorRevertUserWrite(viewProcessor,oldViewCache,ackUserWrite.path,writesCache,completeCache,accumulator);}}else if(operation.type===OperationType.LISTEN_COMPLETE){newViewCache=viewProcessorListenComplete(viewProcessor,oldViewCache,operation.path,writesCache,accumulator);}else{throw assertionError('Unknown operation type: '+operation.type);}const changes=accumulator.getChanges();viewProcessorMaybeAddValueEvent(oldViewCache,newViewCache,changes);return{viewCache:newViewCache,changes};}function viewProcessorMaybeAddValueEvent(oldViewCache,newViewCache,accumulator){const eventSnap=newViewCache.eventCache;if(eventSnap.isFullyInitialized()){const isLeafOrEmpty=eventSnap.getNode().isLeafNode()||eventSnap.getNode().isEmpty();const oldCompleteSnap=viewCacheGetCompleteEventSnap(oldViewCache);if(accumulator.length>0||!oldViewCache.eventCache.isFullyInitialized()||isLeafOrEmpty&&!eventSnap.getNode().equals(oldCompleteSnap)||!eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())){accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));}}}function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor,viewCache,changePath,writesCache,source,accumulator){const oldEventSnap=viewCache.eventCache;if(writeTreeRefShadowingWrite(writesCache,changePath)!=null){// we have a shadowing write, ignore changes\nreturn viewCache;}else{let newEventCache,serverNode;if(pathIsEmpty(changePath)){// TODO: figure out how this plays with \"sliding ack windows\"\nassert(viewCache.serverCache.isFullyInitialized(),'If change path is empty, we must have complete server data');if(viewCache.serverCache.isFiltered()){// We need to special case this, because we need to only apply writes to complete children, or\n// we might end up raising events for incomplete children. If the server data is filtered deep\n// writes cannot be guaranteed to be complete\nconst serverCache=viewCacheGetCompleteServerSnap(viewCache);const completeChildren=serverCache instanceof ChildrenNode?serverCache:ChildrenNode.EMPTY_NODE;const completeEventChildren=writeTreeRefCalcCompleteEventChildren(writesCache,completeChildren);newEventCache=viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(),completeEventChildren,accumulator);}else{const completeNode=writeTreeRefCalcCompleteEventCache(writesCache,viewCacheGetCompleteServerSnap(viewCache));newEventCache=viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(),completeNode,accumulator);}}else{const childKey=pathGetFront(changePath);if(childKey==='.priority'){assert(pathGetLength(changePath)===1,\"Can't have a priority with additional path components\");const oldEventNode=oldEventSnap.getNode();serverNode=viewCache.serverCache.getNode();// we might have overwrites for this priority\nconst updatedPriority=writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache,changePath,oldEventNode,serverNode);if(updatedPriority!=null){newEventCache=viewProcessor.filter.updatePriority(oldEventNode,updatedPriority);}else{// priority didn't change, keep old node\nnewEventCache=oldEventSnap.getNode();}}else{const childChangePath=pathPopFront(changePath);// update child\nlet newEventChild;if(oldEventSnap.isCompleteForChild(childKey)){serverNode=viewCache.serverCache.getNode();const eventChildUpdate=writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache,changePath,oldEventSnap.getNode(),serverNode);if(eventChildUpdate!=null){newEventChild=oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath,eventChildUpdate);}else{// Nothing changed, just keep the old child\nnewEventChild=oldEventSnap.getNode().getImmediateChild(childKey);}}else{newEventChild=writeTreeRefCalcCompleteChild(writesCache,childKey,viewCache.serverCache);}if(newEventChild!=null){newEventCache=viewProcessor.filter.updateChild(oldEventSnap.getNode(),childKey,newEventChild,childChangePath,source,accumulator);}else{// no complete child available or no change\nnewEventCache=oldEventSnap.getNode();}}}return viewCacheUpdateEventSnap(viewCache,newEventCache,oldEventSnap.isFullyInitialized()||pathIsEmpty(changePath),viewProcessor.filter.filtersNodes());}}function viewProcessorApplyServerOverwrite(viewProcessor,oldViewCache,changePath,changedSnap,writesCache,completeCache,filterServerNode,accumulator){const oldServerSnap=oldViewCache.serverCache;let newServerCache;const serverFilter=filterServerNode?viewProcessor.filter:viewProcessor.filter.getIndexedFilter();if(pathIsEmpty(changePath)){newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),changedSnap,null);}else if(serverFilter.filtersNodes()&&!oldServerSnap.isFiltered()){// we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\nconst newServerNode=oldServerSnap.getNode().updateChild(changePath,changedSnap);newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),newServerNode,null);}else{const childKey=pathGetFront(changePath);if(!oldServerSnap.isCompleteForPath(changePath)&&pathGetLength(changePath)>1){// We don't update incomplete nodes with updates intended for other listeners\nreturn oldViewCache;}const childChangePath=pathPopFront(changePath);const childNode=oldServerSnap.getNode().getImmediateChild(childKey);const newChildNode=childNode.updateChild(childChangePath,changedSnap);if(childKey==='.priority'){newServerCache=serverFilter.updatePriority(oldServerSnap.getNode(),newChildNode);}else{newServerCache=serverFilter.updateChild(oldServerSnap.getNode(),childKey,newChildNode,childChangePath,NO_COMPLETE_CHILD_SOURCE,null);}}const newViewCache=viewCacheUpdateServerSnap(oldViewCache,newServerCache,oldServerSnap.isFullyInitialized()||pathIsEmpty(changePath),serverFilter.filtersNodes());const source=new WriteTreeCompleteChildSource(writesCache,newViewCache,completeCache);return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor,newViewCache,changePath,writesCache,source,accumulator);}function viewProcessorApplyUserOverwrite(viewProcessor,oldViewCache,changePath,changedSnap,writesCache,completeCache,accumulator){const oldEventSnap=oldViewCache.eventCache;let newViewCache,newEventCache;const source=new WriteTreeCompleteChildSource(writesCache,oldViewCache,completeCache);if(pathIsEmpty(changePath)){newEventCache=viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(),changedSnap,accumulator);newViewCache=viewCacheUpdateEventSnap(oldViewCache,newEventCache,true,viewProcessor.filter.filtersNodes());}else{const childKey=pathGetFront(changePath);if(childKey==='.priority'){newEventCache=viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(),changedSnap);newViewCache=viewCacheUpdateEventSnap(oldViewCache,newEventCache,oldEventSnap.isFullyInitialized(),oldEventSnap.isFiltered());}else{const childChangePath=pathPopFront(changePath);const oldChild=oldEventSnap.getNode().getImmediateChild(childKey);let newChild;if(pathIsEmpty(childChangePath)){// Child overwrite, we can replace the child\nnewChild=changedSnap;}else{const childNode=source.getCompleteChild(childKey);if(childNode!=null){if(pathGetBack(childChangePath)==='.priority'&&childNode.getChild(pathParent(childChangePath)).isEmpty()){// This is a priority update on an empty node. If this node exists on the server, the\n// server will send down the priority in the update, so ignore for now\nnewChild=childNode;}else{newChild=childNode.updateChild(childChangePath,changedSnap);}}else{// There is no complete child node available\nnewChild=ChildrenNode.EMPTY_NODE;}}if(!oldChild.equals(newChild)){const newEventSnap=viewProcessor.filter.updateChild(oldEventSnap.getNode(),childKey,newChild,childChangePath,source,accumulator);newViewCache=viewCacheUpdateEventSnap(oldViewCache,newEventSnap,oldEventSnap.isFullyInitialized(),viewProcessor.filter.filtersNodes());}else{newViewCache=oldViewCache;}}}return newViewCache;}function viewProcessorCacheHasChild(viewCache,childKey){return viewCache.eventCache.isCompleteForChild(childKey);}function viewProcessorApplyUserMerge(viewProcessor,viewCache,path,changedChildren,writesCache,serverCache,accumulator){// HACK: In the case of a limit query, there may be some changes that bump things out of the\n// window leaving room for new items.  It's important we process these changes first, so we\n// iterate the changes twice, first processing any that affect items currently in view.\n// TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n// and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n// not the other.\nlet curViewCache=viewCache;changedChildren.foreach((relativePath,childNode)=>{const writePath=pathChild(path,relativePath);if(viewProcessorCacheHasChild(viewCache,pathGetFront(writePath))){curViewCache=viewProcessorApplyUserOverwrite(viewProcessor,curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});changedChildren.foreach((relativePath,childNode)=>{const writePath=pathChild(path,relativePath);if(!viewProcessorCacheHasChild(viewCache,pathGetFront(writePath))){curViewCache=viewProcessorApplyUserOverwrite(viewProcessor,curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});return curViewCache;}function viewProcessorApplyMerge(viewProcessor,node,merge){merge.foreach((relativePath,childNode)=>{node=node.updateChild(relativePath,childNode);});return node;}function viewProcessorApplyServerMerge(viewProcessor,viewCache,path,changedChildren,writesCache,serverCache,filterServerNode,accumulator){// If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n// wait for the complete data update coming soon.\nif(viewCache.serverCache.getNode().isEmpty()&&!viewCache.serverCache.isFullyInitialized()){return viewCache;}// HACK: In the case of a limit query, there may be some changes that bump things out of the\n// window leaving room for new items.  It's important we process these changes first, so we\n// iterate the changes twice, first processing any that affect items currently in view.\n// TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n// and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n// not the other.\nlet curViewCache=viewCache;let viewMergeTree;if(pathIsEmpty(path)){viewMergeTree=changedChildren;}else{viewMergeTree=new ImmutableTree(null).setTree(path,changedChildren);}const serverNode=viewCache.serverCache.getNode();viewMergeTree.children.inorderTraversal((childKey,childTree)=>{if(serverNode.hasChild(childKey)){const serverChild=viewCache.serverCache.getNode().getImmediateChild(childKey);const newChild=viewProcessorApplyMerge(viewProcessor,serverChild,childTree);curViewCache=viewProcessorApplyServerOverwrite(viewProcessor,curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});viewMergeTree.children.inorderTraversal((childKey,childMergeTree)=>{const isUnknownDeepMerge=!viewCache.serverCache.isCompleteForChild(childKey)&&childMergeTree.value===null;if(!serverNode.hasChild(childKey)&&!isUnknownDeepMerge){const serverChild=viewCache.serverCache.getNode().getImmediateChild(childKey);const newChild=viewProcessorApplyMerge(viewProcessor,serverChild,childMergeTree);curViewCache=viewProcessorApplyServerOverwrite(viewProcessor,curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});return curViewCache;}function viewProcessorAckUserWrite(viewProcessor,viewCache,ackPath,affectedTree,writesCache,completeCache,accumulator){if(writeTreeRefShadowingWrite(writesCache,ackPath)!=null){return viewCache;}// Only filter server node if it is currently filtered\nconst filterServerNode=viewCache.serverCache.isFiltered();// Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n// now that it won't be shadowed.\nconst serverCache=viewCache.serverCache;if(affectedTree.value!=null){// This is an overwrite.\nif(pathIsEmpty(ackPath)&&serverCache.isFullyInitialized()||serverCache.isCompleteForPath(ackPath)){return viewProcessorApplyServerOverwrite(viewProcessor,viewCache,ackPath,serverCache.getNode().getChild(ackPath),writesCache,completeCache,filterServerNode,accumulator);}else if(pathIsEmpty(ackPath)){// This is a goofy edge case where we are acking data at this location but don't have full data.  We\n// should just re-apply whatever we have in our cache as a merge.\nlet changedChildren=new ImmutableTree(null);serverCache.getNode().forEachChild(KEY_INDEX,(name,node)=>{changedChildren=changedChildren.set(new Path(name),node);});return viewProcessorApplyServerMerge(viewProcessor,viewCache,ackPath,changedChildren,writesCache,completeCache,filterServerNode,accumulator);}else{return viewCache;}}else{// This is a merge.\nlet changedChildren=new ImmutableTree(null);affectedTree.foreach((mergePath,value)=>{const serverCachePath=pathChild(ackPath,mergePath);if(serverCache.isCompleteForPath(serverCachePath)){changedChildren=changedChildren.set(mergePath,serverCache.getNode().getChild(serverCachePath));}});return viewProcessorApplyServerMerge(viewProcessor,viewCache,ackPath,changedChildren,writesCache,completeCache,filterServerNode,accumulator);}}function viewProcessorListenComplete(viewProcessor,viewCache,path,writesCache,accumulator){const oldServerNode=viewCache.serverCache;const newViewCache=viewCacheUpdateServerSnap(viewCache,oldServerNode.getNode(),oldServerNode.isFullyInitialized()||pathIsEmpty(path),oldServerNode.isFiltered());return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor,newViewCache,path,writesCache,NO_COMPLETE_CHILD_SOURCE,accumulator);}function viewProcessorRevertUserWrite(viewProcessor,viewCache,path,writesCache,completeServerCache,accumulator){let complete;if(writeTreeRefShadowingWrite(writesCache,path)!=null){return viewCache;}else{const source=new WriteTreeCompleteChildSource(writesCache,viewCache,completeServerCache);const oldEventCache=viewCache.eventCache.getNode();let newEventCache;if(pathIsEmpty(path)||pathGetFront(path)==='.priority'){let newNode;if(viewCache.serverCache.isFullyInitialized()){newNode=writeTreeRefCalcCompleteEventCache(writesCache,viewCacheGetCompleteServerSnap(viewCache));}else{const serverChildren=viewCache.serverCache.getNode();assert(serverChildren instanceof ChildrenNode,'serverChildren would be complete if leaf node');newNode=writeTreeRefCalcCompleteEventChildren(writesCache,serverChildren);}newNode=newNode;newEventCache=viewProcessor.filter.updateFullNode(oldEventCache,newNode,accumulator);}else{const childKey=pathGetFront(path);let newChild=writeTreeRefCalcCompleteChild(writesCache,childKey,viewCache.serverCache);if(newChild==null&&viewCache.serverCache.isCompleteForChild(childKey)){newChild=oldEventCache.getImmediateChild(childKey);}if(newChild!=null){newEventCache=viewProcessor.filter.updateChild(oldEventCache,childKey,newChild,pathPopFront(path),source,accumulator);}else if(viewCache.eventCache.getNode().hasChild(childKey)){// No complete child available, delete the existing one, if any\nnewEventCache=viewProcessor.filter.updateChild(oldEventCache,childKey,ChildrenNode.EMPTY_NODE,pathPopFront(path),source,accumulator);}else{newEventCache=oldEventCache;}if(newEventCache.isEmpty()&&viewCache.serverCache.isFullyInitialized()){// We might have reverted all child writes. Maybe the old event was a leaf node\ncomplete=writeTreeRefCalcCompleteEventCache(writesCache,viewCacheGetCompleteServerSnap(viewCache));if(complete.isLeafNode()){newEventCache=viewProcessor.filter.updateFullNode(newEventCache,complete,accumulator);}}}complete=viewCache.serverCache.isFullyInitialized()||writeTreeRefShadowingWrite(writesCache,newEmptyPath())!=null;return viewCacheUpdateEventSnap(viewCache,newEventCache,complete,viewProcessor.filter.filtersNodes());}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */class View{constructor(query_,initialViewCache){this.query_=query_;this.eventRegistrations_=[];const params=this.query_._queryParams;const indexFilter=new IndexedFilter(params.getIndex());const filter=queryParamsGetNodeFilter(params);this.processor_=newViewProcessor(filter);const initialServerCache=initialViewCache.serverCache;const initialEventCache=initialViewCache.eventCache;// Don't filter server node with other filter than index, wait for tagged listen\nconst serverSnap=indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE,initialServerCache.getNode(),null);const eventSnap=filter.updateFullNode(ChildrenNode.EMPTY_NODE,initialEventCache.getNode(),null);const newServerCache=new CacheNode(serverSnap,initialServerCache.isFullyInitialized(),indexFilter.filtersNodes());const newEventCache=new CacheNode(eventSnap,initialEventCache.isFullyInitialized(),filter.filtersNodes());this.viewCache_=newViewCache(newEventCache,newServerCache);this.eventGenerator_=new EventGenerator(this.query_);}get query(){return this.query_;}}function viewGetServerCache(view){return view.viewCache_.serverCache.getNode();}function viewGetCompleteNode(view){return viewCacheGetCompleteEventSnap(view.viewCache_);}function viewGetCompleteServerCache(view,path){const cache=viewCacheGetCompleteServerSnap(view.viewCache_);if(cache){// If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n// we need to see if it contains the child we're interested in.\nif(view.query._queryParams.loadsAllData()||!pathIsEmpty(path)&&!cache.getImmediateChild(pathGetFront(path)).isEmpty()){return cache.getChild(path);}}return null;}function viewIsEmpty(view){return view.eventRegistrations_.length===0;}function viewAddEventRegistration(view,eventRegistration){view.eventRegistrations_.push(eventRegistration);}/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */function viewRemoveEventRegistration(view,eventRegistration,cancelError){const cancelEvents=[];if(cancelError){assert(eventRegistration==null,'A cancel should cancel all event registrations.');const path=view.query._path;view.eventRegistrations_.forEach(registration=>{const maybeEvent=registration.createCancelEvent(cancelError,path);if(maybeEvent){cancelEvents.push(maybeEvent);}});}if(eventRegistration){let remaining=[];for(let i=0;i<view.eventRegistrations_.length;++i){const existing=view.eventRegistrations_[i];if(!existing.matches(eventRegistration)){remaining.push(existing);}else if(eventRegistration.hasAnyCallback()){// We're removing just this one\nremaining=remaining.concat(view.eventRegistrations_.slice(i+1));break;}}view.eventRegistrations_=remaining;}else{view.eventRegistrations_=[];}return cancelEvents;}/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */function viewApplyOperation(view,operation,writesCache,completeServerCache){if(operation.type===OperationType.MERGE&&operation.source.queryId!==null){assert(viewCacheGetCompleteServerSnap(view.viewCache_),'We should always have a full cache before handling merges');assert(viewCacheGetCompleteEventSnap(view.viewCache_),'Missing event cache, even though we have a server cache');}const oldViewCache=view.viewCache_;const result=viewProcessorApplyOperation(view.processor_,oldViewCache,operation,writesCache,completeServerCache);viewProcessorAssertIndexed(view.processor_,result.viewCache);assert(result.viewCache.serverCache.isFullyInitialized()||!oldViewCache.serverCache.isFullyInitialized(),'Once a server snap is complete, it should never go back');view.viewCache_=result.viewCache;return viewGenerateEventsForChanges_(view,result.changes,result.viewCache.eventCache.getNode(),null);}function viewGetInitialEvents(view,registration){const eventSnap=view.viewCache_.eventCache;const initialChanges=[];if(!eventSnap.getNode().isLeafNode()){const eventNode=eventSnap.getNode();eventNode.forEachChild(PRIORITY_INDEX,(key,childNode)=>{initialChanges.push(changeChildAdded(key,childNode));});}if(eventSnap.isFullyInitialized()){initialChanges.push(changeValue(eventSnap.getNode()));}return viewGenerateEventsForChanges_(view,initialChanges,eventSnap.getNode(),registration);}function viewGenerateEventsForChanges_(view,changes,eventCache,eventRegistration){const registrations=eventRegistration?[eventRegistration]:view.eventRegistrations_;return eventGeneratorGenerateEventsForChanges(view.eventGenerator_,changes,eventCache,registrations);}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let referenceConstructor$1;/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */class SyncPoint{constructor(){/**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */this.views=new Map();}}function syncPointSetReferenceConstructor(val){assert(!referenceConstructor$1,'__referenceConstructor has already been defined');referenceConstructor$1=val;}function syncPointGetReferenceConstructor(){assert(referenceConstructor$1,'Reference.ts has not been loaded');return referenceConstructor$1;}function syncPointIsEmpty(syncPoint){return syncPoint.views.size===0;}function syncPointApplyOperation(syncPoint,operation,writesCache,optCompleteServerCache){const queryId=operation.source.queryId;if(queryId!==null){const view=syncPoint.views.get(queryId);assert(view!=null,'SyncTree gave us an op for an invalid query.');return viewApplyOperation(view,operation,writesCache,optCompleteServerCache);}else{let events=[];for(const view of syncPoint.views.values()){events=events.concat(viewApplyOperation(view,operation,writesCache,optCompleteServerCache));}return events;}}/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */function syncPointGetView(syncPoint,query,writesCache,serverCache,serverCacheComplete){const queryId=query._queryIdentifier;const view=syncPoint.views.get(queryId);if(!view){// TODO: make writesCache take flag for complete server node\nlet eventCache=writeTreeRefCalcCompleteEventCache(writesCache,serverCacheComplete?serverCache:null);let eventCacheComplete=false;if(eventCache){eventCacheComplete=true;}else if(serverCache instanceof ChildrenNode){eventCache=writeTreeRefCalcCompleteEventChildren(writesCache,serverCache);eventCacheComplete=false;}else{eventCache=ChildrenNode.EMPTY_NODE;eventCacheComplete=false;}const viewCache=newViewCache(new CacheNode(eventCache,eventCacheComplete,false),new CacheNode(serverCache,serverCacheComplete,false));return new View(query,viewCache);}return view;}/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */function syncPointAddEventRegistration(syncPoint,query,eventRegistration,writesCache,serverCache,serverCacheComplete){const view=syncPointGetView(syncPoint,query,writesCache,serverCache,serverCacheComplete);if(!syncPoint.views.has(query._queryIdentifier)){syncPoint.views.set(query._queryIdentifier,view);}// This is guaranteed to exist now, we just created anything that was missing\nviewAddEventRegistration(view,eventRegistration);return viewGetInitialEvents(view,eventRegistration);}/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */function syncPointRemoveEventRegistration(syncPoint,query,eventRegistration,cancelError){const queryId=query._queryIdentifier;const removed=[];let cancelEvents=[];const hadCompleteView=syncPointHasCompleteView(syncPoint);if(queryId==='default'){// When you do ref.off(...), we search all views for the registration to remove.\nfor(const[viewQueryId,view]of syncPoint.views.entries()){cancelEvents=cancelEvents.concat(viewRemoveEventRegistration(view,eventRegistration,cancelError));if(viewIsEmpty(view)){syncPoint.views.delete(viewQueryId);// We'll deal with complete views later.\nif(!view.query._queryParams.loadsAllData()){removed.push(view.query);}}}}else{// remove the callback from the specific view.\nconst view=syncPoint.views.get(queryId);if(view){cancelEvents=cancelEvents.concat(viewRemoveEventRegistration(view,eventRegistration,cancelError));if(viewIsEmpty(view)){syncPoint.views.delete(queryId);// We'll deal with complete views later.\nif(!view.query._queryParams.loadsAllData()){removed.push(view.query);}}}}if(hadCompleteView&&!syncPointHasCompleteView(syncPoint)){// We removed our last complete view.\nremoved.push(new(syncPointGetReferenceConstructor())(query._repo,query._path));}return{removed,events:cancelEvents};}function syncPointGetQueryViews(syncPoint){const result=[];for(const view of syncPoint.views.values()){if(!view.query._queryParams.loadsAllData()){result.push(view);}}return result;}/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */function syncPointGetCompleteServerCache(syncPoint,path){let serverCache=null;for(const view of syncPoint.views.values()){serverCache=serverCache||viewGetCompleteServerCache(view,path);}return serverCache;}function syncPointViewForQuery(syncPoint,query){const params=query._queryParams;if(params.loadsAllData()){return syncPointGetCompleteView(syncPoint);}else{const queryId=query._queryIdentifier;return syncPoint.views.get(queryId);}}function syncPointViewExistsForQuery(syncPoint,query){return syncPointViewForQuery(syncPoint,query)!=null;}function syncPointHasCompleteView(syncPoint){return syncPointGetCompleteView(syncPoint)!=null;}function syncPointGetCompleteView(syncPoint){for(const view of syncPoint.views.values()){if(view.query._queryParams.loadsAllData()){return view;}}return null;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let referenceConstructor;function syncTreeSetReferenceConstructor(val){assert(!referenceConstructor,'__referenceConstructor has already been defined');referenceConstructor=val;}function syncTreeGetReferenceConstructor(){assert(referenceConstructor,'Reference.ts has not been loaded');return referenceConstructor;}/**\r\n * Static tracker for next query tag.\r\n */let syncTreeNextQueryTag_=1;/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */class SyncTree{/**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */constructor(listenProvider_){this.listenProvider_=listenProvider_;/**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */this.syncPointTree_=new ImmutableTree(null);/**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */this.pendingWriteTree_=newWriteTree();this.tagToQueryMap=new Map();this.queryToTagMap=new Map();}}/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyUserOverwrite(syncTree,path,newData,writeId,visible){// Record pending write.\nwriteTreeAddOverwrite(syncTree.pendingWriteTree_,path,newData,writeId,visible);if(!visible){return[];}else{return syncTreeApplyOperationToSyncPoints_(syncTree,new Overwrite(newOperationSourceUser(),path,newData));}}/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyUserMerge(syncTree,path,changedChildren,writeId){// Record pending merge.\nwriteTreeAddMerge(syncTree.pendingWriteTree_,path,changedChildren,writeId);const changeTree=ImmutableTree.fromObject(changedChildren);return syncTreeApplyOperationToSyncPoints_(syncTree,new Merge(newOperationSourceUser(),path,changeTree));}/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */function syncTreeAckUserWrite(syncTree,writeId,revert=false){const write=writeTreeGetWrite(syncTree.pendingWriteTree_,writeId);const needToReevaluate=writeTreeRemoveWrite(syncTree.pendingWriteTree_,writeId);if(!needToReevaluate){return[];}else{let affectedTree=new ImmutableTree(null);if(write.snap!=null){// overwrite\naffectedTree=affectedTree.set(newEmptyPath(),true);}else{each(write.children,pathString=>{affectedTree=affectedTree.set(new Path(pathString),true);});}return syncTreeApplyOperationToSyncPoints_(syncTree,new AckUserWrite(write.path,affectedTree,revert));}}/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyServerOverwrite(syncTree,path,newData){return syncTreeApplyOperationToSyncPoints_(syncTree,new Overwrite(newOperationSourceServer(),path,newData));}/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyServerMerge(syncTree,path,changedChildren){const changeTree=ImmutableTree.fromObject(changedChildren);return syncTreeApplyOperationToSyncPoints_(syncTree,new Merge(newOperationSourceServer(),path,changeTree));}/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyListenComplete(syncTree,path){return syncTreeApplyOperationToSyncPoints_(syncTree,new ListenComplete(newOperationSourceServer(),path));}/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyTaggedListenComplete(syncTree,path,tag){const queryKey=syncTreeQueryKeyForTag_(syncTree,tag);if(queryKey){const r=syncTreeParseQueryKey_(queryKey);const queryPath=r.path,queryId=r.queryId;const relativePath=newRelativePath(queryPath,path);const op=new ListenComplete(newOperationSourceServerTaggedQuery(queryId),relativePath);return syncTreeApplyTaggedOperation_(syncTree,queryPath,op);}else{// We've already removed the query. No big deal, ignore the update\nreturn[];}}/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */function syncTreeRemoveEventRegistration(syncTree,query,eventRegistration,cancelError,skipListenerDedup=false){// Find the syncPoint first. Then deal with whether or not it has matching listeners\nconst path=query._path;const maybeSyncPoint=syncTree.syncPointTree_.get(path);let cancelEvents=[];// A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n// other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n// not loadsAllData().\nif(maybeSyncPoint&&(query._queryIdentifier==='default'||syncPointViewExistsForQuery(maybeSyncPoint,query))){const removedAndEvents=syncPointRemoveEventRegistration(maybeSyncPoint,query,eventRegistration,cancelError);if(syncPointIsEmpty(maybeSyncPoint)){syncTree.syncPointTree_=syncTree.syncPointTree_.remove(path);}const removed=removedAndEvents.removed;cancelEvents=removedAndEvents.events;if(!skipListenerDedup){/**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */ // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n// queryId === 'default'\nconst removingDefault=-1!==removed.findIndex(query=>{return query._queryParams.loadsAllData();});const covered=syncTree.syncPointTree_.findOnPath(path,(relativePath,parentSyncPoint)=>syncPointHasCompleteView(parentSyncPoint));if(removingDefault&&!covered){const subtree=syncTree.syncPointTree_.subtree(path);// There are potentially child listeners. Determine what if any listens we need to send before executing the\n// removal\nif(!subtree.isEmpty()){// We need to fold over our subtree and collect the listeners to send\nconst newViews=syncTreeCollectDistinctViewsForSubTree_(subtree);// Ok, we've collected all the listens we need. Set them up.\nfor(let i=0;i<newViews.length;++i){const view=newViews[i],newQuery=view.query;const listener=syncTreeCreateListenerForView_(syncTree,view);syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery),syncTreeTagForQuery(syncTree,newQuery),listener.hashFn,listener.onComplete);}}// Otherwise there's nothing below us, so nothing we need to start listening on\n}// If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n// The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n// Also, note that if we have a cancelError, it's already been removed at the provider level.\nif(!covered&&removed.length>0&&!cancelError){// If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n// default. Otherwise, we need to iterate through and cancel each individual query\nif(removingDefault){// We don't tag default listeners\nconst defaultTag=null;syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query),defaultTag);}else{removed.forEach(queryToRemove=>{const tagToRemove=syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove),tagToRemove);});}}}// Now, clear all of the tags we're tracking for the removed listens\nsyncTreeRemoveTags_(syncTree,removed);}return cancelEvents;}/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyTaggedQueryOverwrite(syncTree,path,snap,tag){const queryKey=syncTreeQueryKeyForTag_(syncTree,tag);if(queryKey!=null){const r=syncTreeParseQueryKey_(queryKey);const queryPath=r.path,queryId=r.queryId;const relativePath=newRelativePath(queryPath,path);const op=new Overwrite(newOperationSourceServerTaggedQuery(queryId),relativePath,snap);return syncTreeApplyTaggedOperation_(syncTree,queryPath,op);}else{// Query must have been removed already\nreturn[];}}/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyTaggedQueryMerge(syncTree,path,changedChildren,tag){const queryKey=syncTreeQueryKeyForTag_(syncTree,tag);if(queryKey){const r=syncTreeParseQueryKey_(queryKey);const queryPath=r.path,queryId=r.queryId;const relativePath=newRelativePath(queryPath,path);const changeTree=ImmutableTree.fromObject(changedChildren);const op=new Merge(newOperationSourceServerTaggedQuery(queryId),relativePath,changeTree);return syncTreeApplyTaggedOperation_(syncTree,queryPath,op);}else{// We've already removed the query. No big deal, ignore the update\nreturn[];}}/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeAddEventRegistration(syncTree,query,eventRegistration,skipSetupListener=false){const path=query._path;let serverCache=null;let foundAncestorDefaultView=false;// Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n// Consider optimizing this once there's a better understanding of what actual behavior will be.\nsyncTree.syncPointTree_.foreachOnPath(path,(pathToSyncPoint,sp)=>{const relativePath=newRelativePath(pathToSyncPoint,path);serverCache=serverCache||syncPointGetCompleteServerCache(sp,relativePath);foundAncestorDefaultView=foundAncestorDefaultView||syncPointHasCompleteView(sp);});let syncPoint=syncTree.syncPointTree_.get(path);if(!syncPoint){syncPoint=new SyncPoint();syncTree.syncPointTree_=syncTree.syncPointTree_.set(path,syncPoint);}else{foundAncestorDefaultView=foundAncestorDefaultView||syncPointHasCompleteView(syncPoint);serverCache=serverCache||syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}let serverCacheComplete;if(serverCache!=null){serverCacheComplete=true;}else{serverCacheComplete=false;serverCache=ChildrenNode.EMPTY_NODE;const subtree=syncTree.syncPointTree_.subtree(path);subtree.foreachChild((childName,childSyncPoint)=>{const completeCache=syncPointGetCompleteServerCache(childSyncPoint,newEmptyPath());if(completeCache){serverCache=serverCache.updateImmediateChild(childName,completeCache);}});}const viewAlreadyExists=syncPointViewExistsForQuery(syncPoint,query);if(!viewAlreadyExists&&!query._queryParams.loadsAllData()){// We need to track a tag for this query\nconst queryKey=syncTreeMakeQueryKey_(query);assert(!syncTree.queryToTagMap.has(queryKey),'View does not exist, but we have a tag');const tag=syncTreeGetNextQueryTag_();syncTree.queryToTagMap.set(queryKey,tag);syncTree.tagToQueryMap.set(tag,queryKey);}const writesCache=writeTreeChildWrites(syncTree.pendingWriteTree_,path);let events=syncPointAddEventRegistration(syncPoint,query,eventRegistration,writesCache,serverCache,serverCacheComplete);if(!viewAlreadyExists&&!foundAncestorDefaultView&&!skipSetupListener){const view=syncPointViewForQuery(syncPoint,query);events=events.concat(syncTreeSetupListener_(syncTree,query,view));}return events;}/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */function syncTreeCalcCompleteEventCache(syncTree,path,writeIdsToExclude){const includeHiddenSets=true;const writeTree=syncTree.pendingWriteTree_;const serverCache=syncTree.syncPointTree_.findOnPath(path,(pathSoFar,syncPoint)=>{const relativePath=newRelativePath(pathSoFar,path);const serverCache=syncPointGetCompleteServerCache(syncPoint,relativePath);if(serverCache){return serverCache;}});return writeTreeCalcCompleteEventCache(writeTree,path,serverCache,writeIdsToExclude,includeHiddenSets);}function syncTreeGetServerValue(syncTree,query){const path=query._path;let serverCache=null;// Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n// Consider optimizing this once there's a better understanding of what actual behavior will be.\nsyncTree.syncPointTree_.foreachOnPath(path,(pathToSyncPoint,sp)=>{const relativePath=newRelativePath(pathToSyncPoint,path);serverCache=serverCache||syncPointGetCompleteServerCache(sp,relativePath);});let syncPoint=syncTree.syncPointTree_.get(path);if(!syncPoint){syncPoint=new SyncPoint();syncTree.syncPointTree_=syncTree.syncPointTree_.set(path,syncPoint);}else{serverCache=serverCache||syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}const serverCacheComplete=serverCache!=null;const serverCacheNode=serverCacheComplete?new CacheNode(serverCache,true,false):null;const writesCache=writeTreeChildWrites(syncTree.pendingWriteTree_,query._path);const view=syncPointGetView(syncPoint,query,writesCache,serverCacheComplete?serverCacheNode.getNode():ChildrenNode.EMPTY_NODE,serverCacheComplete);return viewGetCompleteNode(view);}/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */function syncTreeApplyOperationToSyncPoints_(syncTree,operation){return syncTreeApplyOperationHelper_(operation,syncTree.syncPointTree_,/*serverCache=*/null,writeTreeChildWrites(syncTree.pendingWriteTree_,newEmptyPath()));}/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */function syncTreeApplyOperationHelper_(operation,syncPointTree,serverCache,writesCache){if(pathIsEmpty(operation.path)){return syncTreeApplyOperationDescendantsHelper_(operation,syncPointTree,serverCache,writesCache);}else{const syncPoint=syncPointTree.get(newEmptyPath());// If we don't have cached server data, see if we can get it from this SyncPoint.\nif(serverCache==null&&syncPoint!=null){serverCache=syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}let events=[];const childName=pathGetFront(operation.path);const childOperation=operation.operationForChild(childName);const childTree=syncPointTree.children.get(childName);if(childTree&&childOperation){const childServerCache=serverCache?serverCache.getImmediateChild(childName):null;const childWritesCache=writeTreeRefChild(writesCache,childName);events=events.concat(syncTreeApplyOperationHelper_(childOperation,childTree,childServerCache,childWritesCache));}if(syncPoint){events=events.concat(syncPointApplyOperation(syncPoint,operation,writesCache,serverCache));}return events;}}/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */function syncTreeApplyOperationDescendantsHelper_(operation,syncPointTree,serverCache,writesCache){const syncPoint=syncPointTree.get(newEmptyPath());// If we don't have cached server data, see if we can get it from this SyncPoint.\nif(serverCache==null&&syncPoint!=null){serverCache=syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}let events=[];syncPointTree.children.inorderTraversal((childName,childTree)=>{const childServerCache=serverCache?serverCache.getImmediateChild(childName):null;const childWritesCache=writeTreeRefChild(writesCache,childName);const childOperation=operation.operationForChild(childName);if(childOperation){events=events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation,childTree,childServerCache,childWritesCache));}});if(syncPoint){events=events.concat(syncPointApplyOperation(syncPoint,operation,writesCache,serverCache));}return events;}function syncTreeCreateListenerForView_(syncTree,view){const query=view.query;const tag=syncTreeTagForQuery(syncTree,query);return{hashFn:()=>{const cache=viewGetServerCache(view)||ChildrenNode.EMPTY_NODE;return cache.hash();},onComplete:status=>{if(status==='ok'){if(tag){return syncTreeApplyTaggedListenComplete(syncTree,query._path,tag);}else{return syncTreeApplyListenComplete(syncTree,query._path);}}else{// If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n// Note that this may need to be scoped to just this listener if we change permissions on filtered children\nconst error=errorForServerCode(status,query);return syncTreeRemoveEventRegistration(syncTree,query,/*eventRegistration*/null,error);}}};}/**\r\n * Return the tag associated with the given query.\r\n */function syncTreeTagForQuery(syncTree,query){const queryKey=syncTreeMakeQueryKey_(query);return syncTree.queryToTagMap.get(queryKey);}/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */function syncTreeMakeQueryKey_(query){return query._path.toString()+'$'+query._queryIdentifier;}/**\r\n * Return the query associated with the given tag, if we have one\r\n */function syncTreeQueryKeyForTag_(syncTree,tag){return syncTree.tagToQueryMap.get(tag);}/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */function syncTreeParseQueryKey_(queryKey){const splitIndex=queryKey.indexOf('$');assert(splitIndex!==-1&&splitIndex<queryKey.length-1,'Bad queryKey.');return{queryId:queryKey.substr(splitIndex+1),path:new Path(queryKey.substr(0,splitIndex))};}/**\r\n * A helper method to apply tagged operations\r\n */function syncTreeApplyTaggedOperation_(syncTree,queryPath,operation){const syncPoint=syncTree.syncPointTree_.get(queryPath);assert(syncPoint,\"Missing sync point for query tag that we're tracking\");const writesCache=writeTreeChildWrites(syncTree.pendingWriteTree_,queryPath);return syncPointApplyOperation(syncPoint,operation,writesCache,null);}/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */function syncTreeCollectDistinctViewsForSubTree_(subtree){return subtree.fold((relativePath,maybeChildSyncPoint,childMap)=>{if(maybeChildSyncPoint&&syncPointHasCompleteView(maybeChildSyncPoint)){const completeView=syncPointGetCompleteView(maybeChildSyncPoint);return[completeView];}else{// No complete view here, flatten any deeper listens into an array\nlet views=[];if(maybeChildSyncPoint){views=syncPointGetQueryViews(maybeChildSyncPoint);}each(childMap,(_key,childViews)=>{views=views.concat(childViews);});return views;}});}/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */function syncTreeQueryForListening_(query){if(query._queryParams.loadsAllData()&&!query._queryParams.isDefault()){// We treat queries that load all data as default queries\n// Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n// from Query\nreturn new(syncTreeGetReferenceConstructor())(query._repo,query._path);}else{return query;}}function syncTreeRemoveTags_(syncTree,queries){for(let j=0;j<queries.length;++j){const removedQuery=queries[j];if(!removedQuery._queryParams.loadsAllData()){// We should have a tag for this\nconst removedQueryKey=syncTreeMakeQueryKey_(removedQuery);const removedQueryTag=syncTree.queryToTagMap.get(removedQueryKey);syncTree.queryToTagMap.delete(removedQueryKey);syncTree.tagToQueryMap.delete(removedQueryTag);}}}/**\r\n * Static accessor for query tags.\r\n */function syncTreeGetNextQueryTag_(){return syncTreeNextQueryTag_++;}/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */function syncTreeSetupListener_(syncTree,query,view){const path=query._path;const tag=syncTreeTagForQuery(syncTree,query);const listener=syncTreeCreateListenerForView_(syncTree,view);const events=syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query),tag,listener.hashFn,listener.onComplete);const subtree=syncTree.syncPointTree_.subtree(path);// The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n// may need to shadow other listens as well.\nif(tag){assert(!syncPointHasCompleteView(subtree.value),\"If we're adding a query, it shouldn't be shadowed\");}else{// Shadow everything at or below this location, this is a default listener.\nconst queriesToStop=subtree.fold((relativePath,maybeChildSyncPoint,childMap)=>{if(!pathIsEmpty(relativePath)&&maybeChildSyncPoint&&syncPointHasCompleteView(maybeChildSyncPoint)){return[syncPointGetCompleteView(maybeChildSyncPoint).query];}else{// No default listener here, flatten any deeper queries into an array\nlet queries=[];if(maybeChildSyncPoint){queries=queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view=>view.query));}each(childMap,(_key,childQueries)=>{queries=queries.concat(childQueries);});return queries;}});for(let i=0;i<queriesToStop.length;++i){const queryToStop=queriesToStop[i];syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop),syncTreeTagForQuery(syncTree,queryToStop));}}return events;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ExistingValueProvider{constructor(node_){this.node_=node_;}getImmediateChild(childName){const child=this.node_.getImmediateChild(childName);return new ExistingValueProvider(child);}node(){return this.node_;}}class DeferredValueProvider{constructor(syncTree,path){this.syncTree_=syncTree;this.path_=path;}getImmediateChild(childName){const childPath=pathChild(this.path_,childName);return new DeferredValueProvider(this.syncTree_,childPath);}node(){return syncTreeCalcCompleteEventCache(this.syncTree_,this.path_);}}/**\r\n * Generate placeholders for deferred values.\r\n */const generateWithValues=function(values){values=values||{};values['timestamp']=values['timestamp']||new Date().getTime();return values;};/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */const resolveDeferredLeafValue=function(value,existingVal,serverValues){if(!value||typeof value!=='object'){return value;}assert('.sv'in value,'Unexpected leaf node or priority contents');if(typeof value['.sv']==='string'){return resolveScalarDeferredValue(value['.sv'],existingVal,serverValues);}else if(typeof value['.sv']==='object'){return resolveComplexDeferredValue(value['.sv'],existingVal);}else{assert(false,'Unexpected server value: '+JSON.stringify(value,null,2));}};const resolveScalarDeferredValue=function(op,existing,serverValues){switch(op){case'timestamp':return serverValues['timestamp'];default:assert(false,'Unexpected server value: '+op);}};const resolveComplexDeferredValue=function(op,existing,unused){if(!op.hasOwnProperty('increment')){assert(false,'Unexpected server value: '+JSON.stringify(op,null,2));}const delta=op['increment'];if(typeof delta!=='number'){assert(false,'Unexpected increment value: '+delta);}const existingNode=existing.node();assert(existingNode!==null&&typeof existingNode!=='undefined','Expected ChildrenNode.EMPTY_NODE for nulls');// Incrementing a non-number sets the value to the incremented amount\nif(!existingNode.isLeafNode()){return delta;}const leaf=existingNode;const existingVal=leaf.getValue();if(typeof existingVal!=='number'){return delta;}// No need to do over/underflow arithmetic here because JS only handles floats under the covers\nreturn existingVal+delta;};/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */const resolveDeferredValueTree=function(path,node,syncTree,serverValues){return resolveDeferredValue(node,new DeferredValueProvider(syncTree,path),serverValues);};/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */const resolveDeferredValueSnapshot=function(node,existing,serverValues){return resolveDeferredValue(node,new ExistingValueProvider(existing),serverValues);};function resolveDeferredValue(node,existingVal,serverValues){const rawPri=node.getPriority().val();const priority=resolveDeferredLeafValue(rawPri,existingVal.getImmediateChild('.priority'),serverValues);let newNode;if(node.isLeafNode()){const leafNode=node;const value=resolveDeferredLeafValue(leafNode.getValue(),existingVal,serverValues);if(value!==leafNode.getValue()||priority!==leafNode.getPriority().val()){return new LeafNode(value,nodeFromJSON(priority));}else{return node;}}else{const childrenNode=node;newNode=childrenNode;if(priority!==childrenNode.getPriority().val()){newNode=newNode.updatePriority(new LeafNode(priority));}childrenNode.forEachChild(PRIORITY_INDEX,(childName,childNode)=>{const newChildNode=resolveDeferredValue(childNode,existingVal.getImmediateChild(childName),serverValues);if(newChildNode!==childNode){newNode=newNode.updateImmediateChild(childName,newChildNode);}});return newNode;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */class Tree{/**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */constructor(name='',parent=null,node={children:{},childCount:0}){this.name=name;this.parent=parent;this.node=node;}}/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */function treeSubTree(tree,pathObj){// TODO: Require pathObj to be Path?\nlet path=pathObj instanceof Path?pathObj:new Path(pathObj);let child=tree,next=pathGetFront(path);while(next!==null){const childNode=safeGet(child.node.children,next)||{children:{},childCount:0};child=new Tree(next,child,childNode);path=pathPopFront(path);next=pathGetFront(path);}return child;}/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */function treeGetValue(tree){return tree.node.value;}/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */function treeSetValue(tree,value){tree.node.value=value;treeUpdateParents(tree);}/**\r\n * @returns Whether the tree has any children.\r\n */function treeHasChildren(tree){return tree.node.childCount>0;}/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */function treeIsEmpty(tree){return treeGetValue(tree)===undefined&&!treeHasChildren(tree);}/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */function treeForEachChild(tree,action){each(tree.node.children,(child,childTree)=>{action(new Tree(child,tree,childTree));});}/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */function treeForEachDescendant(tree,action,includeSelf,childrenFirst){if(includeSelf&&!childrenFirst){action(tree);}treeForEachChild(tree,child=>{treeForEachDescendant(child,action,true,childrenFirst);});if(includeSelf&&childrenFirst){action(tree);}}/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */function treeForEachAncestor(tree,action,includeSelf){let node=includeSelf?tree:tree.parent;while(node!==null){if(action(node)){return true;}node=node.parent;}return false;}/**\r\n * @returns The path of this tree node, as a Path.\r\n */function treeGetPath(tree){return new Path(tree.parent===null?tree.name:treeGetPath(tree.parent)+'/'+tree.name);}/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */function treeUpdateParents(tree){if(tree.parent!==null){treeUpdateChild(tree.parent,tree.name,tree);}}/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */function treeUpdateChild(tree,childName,child){const childEmpty=treeIsEmpty(child);const childExists=contains(tree.node.children,childName);if(childEmpty&&childExists){delete tree.node.children[childName];tree.node.childCount--;treeUpdateParents(tree);}else if(!childEmpty&&!childExists){tree.node.children[childName]=child.node;tree.node.childCount++;treeUpdateParents(tree);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * True for invalid Firebase keys\r\n */const INVALID_KEY_REGEX_=/[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */const INVALID_PATH_REGEX_=/[\\[\\].#$\\u0000-\\u001F\\u007F]/;/**\r\n * Maximum number of characters to allow in leaf value\r\n */const MAX_LEAF_SIZE_=10*1024*1024;const isValidKey=function(key){return typeof key==='string'&&key.length!==0&&!INVALID_KEY_REGEX_.test(key);};const isValidPathString=function(pathString){return typeof pathString==='string'&&pathString.length!==0&&!INVALID_PATH_REGEX_.test(pathString);};const isValidRootPathString=function(pathString){if(pathString){// Allow '/.info/' at the beginning.\npathString=pathString.replace(/^\\/*\\.info(\\/|$)/,'/');}return isValidPathString(pathString);};const isValidPriority=function(priority){return priority===null||typeof priority==='string'||typeof priority==='number'&&!isInvalidJSONNumber(priority)||priority&&typeof priority==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncontains(priority,'.sv');};/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */const validateFirebaseDataArg=function(fnName,value,path,optional){if(optional&&value===undefined){return;}validateFirebaseData(errorPrefix(fnName,'value'),value,path);};/**\r\n * Validate a data object client-side before sending to server.\r\n */const validateFirebaseData=function(errorPrefix,data,path_){const path=path_ instanceof Path?new ValidationPath(path_,errorPrefix):path_;if(data===undefined){throw new Error(errorPrefix+'contains undefined '+validationPathToErrorString(path));}if(typeof data==='function'){throw new Error(errorPrefix+'contains a function '+validationPathToErrorString(path)+' with contents = '+data.toString());}if(isInvalidJSONNumber(data)){throw new Error(errorPrefix+'contains '+data.toString()+' '+validationPathToErrorString(path));}// Check max leaf size, but try to avoid the utf8 conversion if we can.\nif(typeof data==='string'&&data.length>MAX_LEAF_SIZE_/3&&stringLength(data)>MAX_LEAF_SIZE_){throw new Error(errorPrefix+'contains a string greater than '+MAX_LEAF_SIZE_+' utf8 bytes '+validationPathToErrorString(path)+\" ('\"+data.substring(0,50)+\"...')\");}// TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n// to save extra walking of large objects.\nif(data&&typeof data==='object'){let hasDotValue=false;let hasActualChild=false;each(data,(key,value)=>{if(key==='.value'){hasDotValue=true;}else if(key!=='.priority'&&key!=='.sv'){hasActualChild=true;if(!isValidKey(key)){throw new Error(errorPrefix+' contains an invalid key ('+key+') '+validationPathToErrorString(path)+'.  Keys must be non-empty strings '+'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');}}validationPathPush(path,key);validateFirebaseData(errorPrefix,value,path);validationPathPop(path);});if(hasDotValue&&hasActualChild){throw new Error(errorPrefix+' contains \".value\" child '+validationPathToErrorString(path)+' in addition to actual children.');}}};/**\r\n * Pre-validate paths passed in the firebase function.\r\n */const validateFirebaseMergePaths=function(errorPrefix,mergePaths){let i,curPath;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];const keys=pathSlice(curPath);for(let j=0;j<keys.length;j++){if(keys[j]==='.priority'&&j===keys.length-1);else if(!isValidKey(keys[j])){throw new Error(errorPrefix+'contains an invalid key ('+keys[j]+') in path '+curPath.toString()+'. Keys must be non-empty strings '+'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');}}}// Check that update keys are not descendants of each other.\n// We rely on the property that sorting guarantees that ancestors come\n// right before descendants.\nmergePaths.sort(pathCompare);let prevPath=null;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];if(prevPath!==null&&pathContains(prevPath,curPath)){throw new Error(errorPrefix+'contains a path '+prevPath.toString()+' that is ancestor of another path '+curPath.toString());}prevPath=curPath;}};/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */const validateFirebaseMergeDataArg=function(fnName,data,path,optional){if(optional&&data===undefined){return;}const errorPrefix$1=errorPrefix(fnName,'values');if(!(data&&typeof data==='object')||Array.isArray(data)){throw new Error(errorPrefix$1+' must be an object containing the children to replace.');}const mergePaths=[];each(data,(key,value)=>{const curPath=new Path(key);validateFirebaseData(errorPrefix$1,value,pathChild(path,curPath));if(pathGetBack(curPath)==='.priority'){if(!isValidPriority(value)){throw new Error(errorPrefix$1+\"contains an invalid value for '\"+curPath.toString()+\"', which must be a valid \"+'Firebase priority (a string, finite number, server value, or null).');}}mergePaths.push(curPath);});validateFirebaseMergePaths(errorPrefix$1,mergePaths);};const validatePriority=function(fnName,priority,optional){if(optional&&priority===undefined){return;}if(isInvalidJSONNumber(priority)){throw new Error(errorPrefix(fnName,'priority')+'is '+priority.toString()+', but must be a valid Firebase priority (a string, finite number, '+'server value, or null).');}// Special case to allow importing data with a .sv.\nif(!isValidPriority(priority)){throw new Error(errorPrefix(fnName,'priority')+'must be a valid Firebase priority '+'(a string, finite number, server value, or null).');}};const validateKey=function(fnName,argumentName,key,optional){if(optional&&key===undefined){return;}if(!isValidKey(key)){throw new Error(errorPrefix(fnName,argumentName)+'was an invalid key = \"'+key+'\".  Firebase keys must be non-empty strings and '+'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');}};/**\r\n * @internal\r\n */const validatePathString=function(fnName,argumentName,pathString,optional){if(optional&&pathString===undefined){return;}if(!isValidPathString(pathString)){throw new Error(errorPrefix(fnName,argumentName)+'was an invalid path = \"'+pathString+'\". Paths must be non-empty strings and '+'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');}};const validateRootPathString=function(fnName,argumentName,pathString,optional){if(pathString){// Allow '/.info/' at the beginning.\npathString=pathString.replace(/^\\/*\\.info(\\/|$)/,'/');}validatePathString(fnName,argumentName,pathString,optional);};/**\r\n * @internal\r\n */const validateWritablePath=function(fnName,path){if(pathGetFront(path)==='.info'){throw new Error(fnName+\" failed = Can't modify data under /.info/\");}};const validateUrl=function(fnName,parsedUrl){// TODO = Validate server better.\nconst pathString=parsedUrl.path.toString();if(!(typeof parsedUrl.repoInfo.host==='string')||parsedUrl.repoInfo.host.length===0||!isValidKey(parsedUrl.repoInfo.namespace)&&parsedUrl.repoInfo.host.split(':')[0]!=='localhost'||pathString.length!==0&&!isValidRootPathString(pathString)){throw new Error(errorPrefix(fnName,'url')+'must be a valid firebase URL and '+'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');}};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */class EventQueue{constructor(){this.eventLists_=[];/**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */this.recursionDepth_=0;}}/**\r\n * @param eventDataList - The new events to queue.\r\n */function eventQueueQueueEvents(eventQueue,eventDataList){// We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\nlet currList=null;for(let i=0;i<eventDataList.length;i++){const data=eventDataList[i];const path=data.getPath();if(currList!==null&&!pathEquals(path,currList.path)){eventQueue.eventLists_.push(currList);currList=null;}if(currList===null){currList={events:[],path};}currList.events.push(data);}if(currList){eventQueue.eventLists_.push(currList);}}/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */function eventQueueRaiseEventsAtPath(eventQueue,path,eventDataList){eventQueueQueueEvents(eventQueue,eventDataList);eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue,eventPath=>pathEquals(eventPath,path));}/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */function eventQueueRaiseEventsForChangedPath(eventQueue,changedPath,eventDataList){eventQueueQueueEvents(eventQueue,eventDataList);eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue,eventPath=>pathContains(eventPath,changedPath)||pathContains(changedPath,eventPath));}function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue,predicate){eventQueue.recursionDepth_++;let sentAll=true;for(let i=0;i<eventQueue.eventLists_.length;i++){const eventList=eventQueue.eventLists_[i];if(eventList){const eventPath=eventList.path;if(predicate(eventPath)){eventListRaise(eventQueue.eventLists_[i]);eventQueue.eventLists_[i]=null;}else{sentAll=false;}}}if(sentAll){eventQueue.eventLists_=[];}eventQueue.recursionDepth_--;}/**\r\n * Iterates through the list and raises each event\r\n */function eventListRaise(eventList){for(let i=0;i<eventList.events.length;i++){const eventData=eventList.events[i];if(eventData!==null){eventList.events[i]=null;const eventFn=eventData.getEventRunner();if(logger){log('event: '+eventData.toString());}exceptionGuard(eventFn);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const INTERRUPT_REASON='repo_interrupt';/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */const MAX_TRANSACTION_RETRIES=25;/**\r\n * A connection to a single data repository.\r\n */class Repo{constructor(repoInfo_,forceRestClient_,authTokenProvider_,appCheckProvider_){this.repoInfo_=repoInfo_;this.forceRestClient_=forceRestClient_;this.authTokenProvider_=authTokenProvider_;this.appCheckProvider_=appCheckProvider_;this.dataUpdateCount=0;this.statsListener_=null;this.eventQueue_=new EventQueue();this.nextWriteId_=1;this.interceptServerDataCallback_=null;/** A list of data pieces and paths to be set when this client disconnects. */this.onDisconnect_=newSparseSnapshotTree();/** Stores queues of outstanding transactions for Firebase locations. */this.transactionQueueTree_=new Tree();// TODO: This should be @private but it's used by test_access.js and internal.js\nthis.persistentConnection_=null;// This key is intentionally not updated if RepoInfo is later changed or replaced\nthis.key=this.repoInfo_.toURLString();}/**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */toString(){return(this.repoInfo_.secure?'https://':'http://')+this.repoInfo_.host;}}function repoStart(repo,appId,authOverride){repo.stats_=statsManagerGetCollection(repo.repoInfo_);if(repo.forceRestClient_||beingCrawled()){repo.server_=new ReadonlyRestClient(repo.repoInfo_,(pathString,data,isMerge,tag)=>{repoOnDataUpdate(repo,pathString,data,isMerge,tag);},repo.authTokenProvider_,repo.appCheckProvider_);// Minor hack: Fire onConnect immediately, since there's no actual connection.\nsetTimeout(()=>repoOnConnectStatus(repo,/* connectStatus= */true),0);}else{// Validate authOverride\nif(typeof authOverride!=='undefined'&&authOverride!==null){if(typeof authOverride!=='object'){throw new Error('Only objects are supported for option databaseAuthVariableOverride');}try{stringify(authOverride);}catch(e){throw new Error('Invalid authOverride provided: '+e);}}repo.persistentConnection_=new PersistentConnection(repo.repoInfo_,appId,(pathString,data,isMerge,tag)=>{repoOnDataUpdate(repo,pathString,data,isMerge,tag);},connectStatus=>{repoOnConnectStatus(repo,connectStatus);},updates=>{repoOnServerInfoUpdate(repo,updates);},repo.authTokenProvider_,repo.appCheckProvider_,authOverride);repo.server_=repo.persistentConnection_;}repo.authTokenProvider_.addTokenChangeListener(token=>{repo.server_.refreshAuthToken(token);});repo.appCheckProvider_.addTokenChangeListener(result=>{repo.server_.refreshAppCheckToken(result.token);});// In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n// we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\nrepo.statsReporter_=statsManagerGetOrCreateReporter(repo.repoInfo_,()=>new StatsReporter(repo.stats_,repo.server_));// Used for .info.\nrepo.infoData_=new SnapshotHolder();repo.infoSyncTree_=new SyncTree({startListening:(query,tag,currentHashFn,onComplete)=>{let infoEvents=[];const node=repo.infoData_.getNode(query._path);// This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n// on initial data...\nif(!node.isEmpty()){infoEvents=syncTreeApplyServerOverwrite(repo.infoSyncTree_,query._path,node);setTimeout(()=>{onComplete('ok');},0);}return infoEvents;},stopListening:()=>{}});repoUpdateInfo(repo,'connected',false);repo.serverSyncTree_=new SyncTree({startListening:(query,tag,currentHashFn,onComplete)=>{repo.server_.listen(query,currentHashFn,tag,(status,data)=>{const events=onComplete(status,data);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,query._path,events);});// No synchronous events for network-backed sync trees\nreturn[];},stopListening:(query,tag)=>{repo.server_.unlisten(query,tag);}});}/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */function repoServerTime(repo){const offsetNode=repo.infoData_.getNode(new Path('.info/serverTimeOffset'));const offset=offsetNode.val()||0;return new Date().getTime()+offset;}/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */function repoGenerateServerValues(repo){return generateWithValues({timestamp:repoServerTime(repo)});}/**\r\n * Called by realtime when we get new messages from the server.\r\n */function repoOnDataUpdate(repo,pathString,data,isMerge,tag){// For testing.\nrepo.dataUpdateCount++;const path=new Path(pathString);data=repo.interceptServerDataCallback_?repo.interceptServerDataCallback_(pathString,data):data;let events=[];if(tag){if(isMerge){const taggedChildren=map(data,raw=>nodeFromJSON(raw));events=syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_,path,taggedChildren,tag);}else{const taggedSnap=nodeFromJSON(data);events=syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_,path,taggedSnap,tag);}}else if(isMerge){const changedChildren=map(data,raw=>nodeFromJSON(raw));events=syncTreeApplyServerMerge(repo.serverSyncTree_,path,changedChildren);}else{const snap=nodeFromJSON(data);events=syncTreeApplyServerOverwrite(repo.serverSyncTree_,path,snap);}let affectedPath=path;if(events.length>0){// Since we have a listener outstanding for each transaction, receiving any events\n// is a proxy for some change having occurred.\naffectedPath=repoRerunTransactions(repo,path);}eventQueueRaiseEventsForChangedPath(repo.eventQueue_,affectedPath,events);}function repoOnConnectStatus(repo,connectStatus){repoUpdateInfo(repo,'connected',connectStatus);if(connectStatus===false){repoRunOnDisconnectEvents(repo);}}function repoOnServerInfoUpdate(repo,updates){each(updates,(key,value)=>{repoUpdateInfo(repo,key,value);});}function repoUpdateInfo(repo,pathString,value){const path=new Path('/.info/'+pathString);const newNode=nodeFromJSON(value);repo.infoData_.updateSnapshot(path,newNode);const events=syncTreeApplyServerOverwrite(repo.infoSyncTree_,path,newNode);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);}function repoGetNextWriteId(repo){return repo.nextWriteId_++;}/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */function repoGetValue(repo,query,eventRegistration){// Only active queries are cached. There is no persisted cache.\nconst cached=syncTreeGetServerValue(repo.serverSyncTree_,query);if(cached!=null){return Promise.resolve(cached);}return repo.server_.get(query).then(payload=>{const node=nodeFromJSON(payload).withIndex(query._queryParams.getIndex());/**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */syncTreeAddEventRegistration(repo.serverSyncTree_,query,eventRegistration,true);let events;if(query._queryParams.loadsAllData()){events=syncTreeApplyServerOverwrite(repo.serverSyncTree_,query._path,node);}else{const tag=syncTreeTagForQuery(repo.serverSyncTree_,query);events=syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_,query._path,node,tag);}/*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */eventQueueRaiseEventsForChangedPath(repo.eventQueue_,query._path,events);syncTreeRemoveEventRegistration(repo.serverSyncTree_,query,eventRegistration,null,true);return node;},err=>{repoLog(repo,'get for query '+stringify(query)+' failed: '+err);return Promise.reject(new Error(err));});}function repoSetWithPriority(repo,path,newVal,newPriority,onComplete){repoLog(repo,'set',{path:path.toString(),value:newVal,priority:newPriority});// TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n// (b) store unresolved paths on JSON parse\nconst serverValues=repoGenerateServerValues(repo);const newNodeUnresolved=nodeFromJSON(newVal,newPriority);const existing=syncTreeCalcCompleteEventCache(repo.serverSyncTree_,path);const newNode=resolveDeferredValueSnapshot(newNodeUnresolved,existing,serverValues);const writeId=repoGetNextWriteId(repo);const events=syncTreeApplyUserOverwrite(repo.serverSyncTree_,path,newNode,writeId,true);eventQueueQueueEvents(repo.eventQueue_,events);repo.server_.put(path.toString(),newNodeUnresolved.val(/*export=*/true),(status,errorReason)=>{const success=status==='ok';if(!success){warn('set at '+path+' failed: '+status);}const clearEvents=syncTreeAckUserWrite(repo.serverSyncTree_,writeId,!success);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,clearEvents);repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});const affectedPath=repoAbortTransactions(repo,path);repoRerunTransactions(repo,affectedPath);// We queued the events above, so just flush the queue here\neventQueueRaiseEventsForChangedPath(repo.eventQueue_,affectedPath,[]);}function repoUpdate(repo,path,childrenToMerge,onComplete){repoLog(repo,'update',{path:path.toString(),value:childrenToMerge});// Start with our existing data and merge each child into it.\nlet empty=true;const serverValues=repoGenerateServerValues(repo);const changedChildren={};each(childrenToMerge,(changedKey,changedValue)=>{empty=false;changedChildren[changedKey]=resolveDeferredValueTree(pathChild(path,changedKey),nodeFromJSON(changedValue),repo.serverSyncTree_,serverValues);});if(!empty){const writeId=repoGetNextWriteId(repo);const events=syncTreeApplyUserMerge(repo.serverSyncTree_,path,changedChildren,writeId);eventQueueQueueEvents(repo.eventQueue_,events);repo.server_.merge(path.toString(),childrenToMerge,(status,errorReason)=>{const success=status==='ok';if(!success){warn('update at '+path+' failed: '+status);}const clearEvents=syncTreeAckUserWrite(repo.serverSyncTree_,writeId,!success);const affectedPath=clearEvents.length>0?repoRerunTransactions(repo,path):path;eventQueueRaiseEventsForChangedPath(repo.eventQueue_,affectedPath,clearEvents);repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});each(childrenToMerge,changedPath=>{const affectedPath=repoAbortTransactions(repo,pathChild(path,changedPath));repoRerunTransactions(repo,affectedPath);});// We queued the events above, so just flush the queue here\neventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,[]);}else{log(\"update() called with empty data.  Don't do anything.\");repoCallOnCompleteCallback(repo,onComplete,'ok',undefined);}}/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */function repoRunOnDisconnectEvents(repo){repoLog(repo,'onDisconnectEvents');const serverValues=repoGenerateServerValues(repo);const resolvedOnDisconnectTree=newSparseSnapshotTree();sparseSnapshotTreeForEachTree(repo.onDisconnect_,newEmptyPath(),(path,node)=>{const resolved=resolveDeferredValueTree(path,node,repo.serverSyncTree_,serverValues);sparseSnapshotTreeRemember(resolvedOnDisconnectTree,path,resolved);});let events=[];sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree,newEmptyPath(),(path,snap)=>{events=events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_,path,snap));const affectedPath=repoAbortTransactions(repo,path);repoRerunTransactions(repo,affectedPath);});repo.onDisconnect_=newSparseSnapshotTree();eventQueueRaiseEventsForChangedPath(repo.eventQueue_,newEmptyPath(),events);}function repoOnDisconnectCancel(repo,path,onComplete){repo.server_.onDisconnectCancel(path.toString(),(status,errorReason)=>{if(status==='ok'){sparseSnapshotTreeForget(repo.onDisconnect_,path);}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoOnDisconnectSet(repo,path,value,onComplete){const newNode=nodeFromJSON(value);repo.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),(status,errorReason)=>{if(status==='ok'){sparseSnapshotTreeRemember(repo.onDisconnect_,path,newNode);}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoOnDisconnectSetWithPriority(repo,path,value,priority,onComplete){const newNode=nodeFromJSON(value,priority);repo.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),(status,errorReason)=>{if(status==='ok'){sparseSnapshotTreeRemember(repo.onDisconnect_,path,newNode);}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoOnDisconnectUpdate(repo,path,childrenToMerge,onComplete){if(isEmpty(childrenToMerge)){log(\"onDisconnect().update() called with empty data.  Don't do anything.\");repoCallOnCompleteCallback(repo,onComplete,'ok',undefined);return;}repo.server_.onDisconnectMerge(path.toString(),childrenToMerge,(status,errorReason)=>{if(status==='ok'){each(childrenToMerge,(childName,childNode)=>{const newChildNode=nodeFromJSON(childNode);sparseSnapshotTreeRemember(repo.onDisconnect_,pathChild(path,childName),newChildNode);});}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoAddEventCallbackForQuery(repo,query,eventRegistration){let events;if(pathGetFront(query._path)==='.info'){events=syncTreeAddEventRegistration(repo.infoSyncTree_,query,eventRegistration);}else{events=syncTreeAddEventRegistration(repo.serverSyncTree_,query,eventRegistration);}eventQueueRaiseEventsAtPath(repo.eventQueue_,query._path,events);}function repoRemoveEventCallbackForQuery(repo,query,eventRegistration){// These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n// a little bit by handling the return values anyways.\nlet events;if(pathGetFront(query._path)==='.info'){events=syncTreeRemoveEventRegistration(repo.infoSyncTree_,query,eventRegistration);}else{events=syncTreeRemoveEventRegistration(repo.serverSyncTree_,query,eventRegistration);}eventQueueRaiseEventsAtPath(repo.eventQueue_,query._path,events);}function repoInterrupt(repo){if(repo.persistentConnection_){repo.persistentConnection_.interrupt(INTERRUPT_REASON);}}function repoResume(repo){if(repo.persistentConnection_){repo.persistentConnection_.resume(INTERRUPT_REASON);}}function repoLog(repo,...varArgs){let prefix='';if(repo.persistentConnection_){prefix=repo.persistentConnection_.id+':';}log(prefix,...varArgs);}function repoCallOnCompleteCallback(repo,callback,status,errorReason){if(callback){exceptionGuard(()=>{if(status==='ok'){callback(null);}else{const code=(status||'error').toUpperCase();let message=code;if(errorReason){message+=': '+errorReason;}const error=new Error(message);// eslint-disable-next-line @typescript-eslint/no-explicit-any\nerror.code=code;callback(error);}});}}/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */function repoStartTransaction(repo,path,transactionUpdate,onComplete,unwatcher,applyLocally){repoLog(repo,'transaction on '+path);// Initialize transaction.\nconst transaction={path,update:transactionUpdate,onComplete,// One of TransactionStatus enums.\nstatus:null,// Used when combining transactions at different locations to figure out\n// which one goes first.\norder:LUIDGenerator(),// Whether to raise local events for this transaction.\napplyLocally,// Count of how many times we've retried the transaction.\nretryCount:0,// Function to call to clean up our .on() listener.\nunwatcher,// Stores why a transaction was aborted.\nabortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null};// Run transaction initially.\nconst currentState=repoGetLatestState(repo,path,undefined);transaction.currentInputSnapshot=currentState;const newVal=transaction.update(currentState.val());if(newVal===undefined){// Abort transaction.\ntransaction.unwatcher();transaction.currentOutputSnapshotRaw=null;transaction.currentOutputSnapshotResolved=null;if(transaction.onComplete){transaction.onComplete(null,false,transaction.currentInputSnapshot);}}else{validateFirebaseData('transaction failed: Data returned ',newVal,transaction.path);// Mark as run and add to our queue.\ntransaction.status=0/* TransactionStatus.RUN */;const queueNode=treeSubTree(repo.transactionQueueTree_,path);const nodeQueue=treeGetValue(queueNode)||[];nodeQueue.push(transaction);treeSetValue(queueNode,nodeQueue);// Update visibleData and raise events\n// Note: We intentionally raise events after updating all of our\n// transaction state, since the user could start new transactions from the\n// event callbacks.\nlet priorityForNode;if(typeof newVal==='object'&&newVal!==null&&contains(newVal,'.priority')){// eslint-disable-next-line @typescript-eslint/no-explicit-any\npriorityForNode=safeGet(newVal,'.priority');assert(isValidPriority(priorityForNode),'Invalid priority returned by transaction. '+'Priority must be a valid string, finite number, server value, or null.');}else{const currentNode=syncTreeCalcCompleteEventCache(repo.serverSyncTree_,path)||ChildrenNode.EMPTY_NODE;priorityForNode=currentNode.getPriority().val();}const serverValues=repoGenerateServerValues(repo);const newNodeUnresolved=nodeFromJSON(newVal,priorityForNode);const newNode=resolveDeferredValueSnapshot(newNodeUnresolved,currentState,serverValues);transaction.currentOutputSnapshotRaw=newNodeUnresolved;transaction.currentOutputSnapshotResolved=newNode;transaction.currentWriteId=repoGetNextWriteId(repo);const events=syncTreeApplyUserOverwrite(repo.serverSyncTree_,path,newNode,transaction.currentWriteId,transaction.applyLocally);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);repoSendReadyTransactions(repo,repo.transactionQueueTree_);}}/**\r\n * @param excludeSets - A specific set to exclude\r\n */function repoGetLatestState(repo,path,excludeSets){return syncTreeCalcCompleteEventCache(repo.serverSyncTree_,path,excludeSets)||ChildrenNode.EMPTY_NODE;}/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */function repoSendReadyTransactions(repo,node=repo.transactionQueueTree_){// Before recursing, make sure any completed transactions are removed.\nif(!node){repoPruneCompletedTransactionsBelowNode(repo,node);}if(treeGetValue(node)){const queue=repoBuildTransactionQueue(repo,node);assert(queue.length>0,'Sending zero length transaction queue');const allRun=queue.every(transaction=>transaction.status===0/* TransactionStatus.RUN */);// If they're all run (and not sent), we can send them.  Else, we must wait.\nif(allRun){repoSendTransactionQueue(repo,treeGetPath(node),queue);}}else if(treeHasChildren(node)){treeForEachChild(node,childNode=>{repoSendReadyTransactions(repo,childNode);});}}/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */function repoSendTransactionQueue(repo,path,queue){// Mark transactions as sent and increment retry count!\nconst setsToIgnore=queue.map(txn=>{return txn.currentWriteId;});const latestState=repoGetLatestState(repo,path,setsToIgnore);let snapToSend=latestState;const latestHash=latestState.hash();for(let i=0;i<queue.length;i++){const txn=queue[i];assert(txn.status===0/* TransactionStatus.RUN */,'tryToSendTransactionQueue_: items in queue should all be run.');txn.status=1/* TransactionStatus.SENT */;txn.retryCount++;const relativePath=newRelativePath(path,txn.path);// If we've gotten to this point, the output snapshot must be defined.\nsnapToSend=snapToSend.updateChild(relativePath/** @type {!Node} */,txn.currentOutputSnapshotRaw);}const dataToSend=snapToSend.val(true);const pathToSend=path;// Send the put.\nrepo.server_.put(pathToSend.toString(),dataToSend,status=>{repoLog(repo,'transaction put response',{path:pathToSend.toString(),status});let events=[];if(status==='ok'){// Queue up the callbacks and fire them after cleaning up all of our\n// transaction state, since the callback could trigger more\n// transactions or sets.\nconst callbacks=[];for(let i=0;i<queue.length;i++){queue[i].status=2/* TransactionStatus.COMPLETED */;events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,queue[i].currentWriteId));if(queue[i].onComplete){// We never unset the output snapshot, and given that this\n// transaction is complete, it should be set\ncallbacks.push(()=>queue[i].onComplete(null,true,queue[i].currentOutputSnapshotResolved));}queue[i].unwatcher();}// Now remove the completed transactions.\nrepoPruneCompletedTransactionsBelowNode(repo,treeSubTree(repo.transactionQueueTree_,path));// There may be pending transactions that we can now send.\nrepoSendReadyTransactions(repo,repo.transactionQueueTree_);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);// Finally, trigger onComplete callbacks.\nfor(let i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}}else{// transactions are no longer sent.  Update their status appropriately.\nif(status==='datastale'){for(let i=0;i<queue.length;i++){if(queue[i].status===3/* TransactionStatus.SENT_NEEDS_ABORT */){queue[i].status=4/* TransactionStatus.NEEDS_ABORT */;}else{queue[i].status=0/* TransactionStatus.RUN */;}}}else{warn('transaction at '+pathToSend.toString()+' failed: '+status);for(let i=0;i<queue.length;i++){queue[i].status=4/* TransactionStatus.NEEDS_ABORT */;queue[i].abortReason=status;}}repoRerunTransactions(repo,path);}},latestHash);}/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */function repoRerunTransactions(repo,changedPath){const rootMostTransactionNode=repoGetAncestorTransactionNode(repo,changedPath);const path=treeGetPath(rootMostTransactionNode);const queue=repoBuildTransactionQueue(repo,rootMostTransactionNode);repoRerunTransactionQueue(repo,queue,path);return path;}/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */function repoRerunTransactionQueue(repo,queue,path){if(queue.length===0){return;// Nothing to do!\n}// Queue up the callbacks and fire them after cleaning up all of our\n// transaction state, since the callback could trigger more transactions or\n// sets.\nconst callbacks=[];let events=[];// Ignore all of the sets we're going to re-run.\nconst txnsToRerun=queue.filter(q=>{return q.status===0/* TransactionStatus.RUN */;});const setsToIgnore=txnsToRerun.map(q=>{return q.currentWriteId;});for(let i=0;i<queue.length;i++){const transaction=queue[i];const relativePath=newRelativePath(path,transaction.path);let abortTransaction=false,abortReason;assert(relativePath!==null,'rerunTransactionsUnderNode_: relativePath should not be null.');if(transaction.status===4/* TransactionStatus.NEEDS_ABORT */){abortTransaction=true;abortReason=transaction.abortReason;events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,transaction.currentWriteId,true));}else if(transaction.status===0/* TransactionStatus.RUN */){if(transaction.retryCount>=MAX_TRANSACTION_RETRIES){abortTransaction=true;abortReason='maxretry';events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,transaction.currentWriteId,true));}else{// This code reruns a transaction\nconst currentNode=repoGetLatestState(repo,transaction.path,setsToIgnore);transaction.currentInputSnapshot=currentNode;const newData=queue[i].update(currentNode.val());if(newData!==undefined){validateFirebaseData('transaction failed: Data returned ',newData,transaction.path);let newDataNode=nodeFromJSON(newData);const hasExplicitPriority=typeof newData==='object'&&newData!=null&&contains(newData,'.priority');if(!hasExplicitPriority){// Keep the old priority if there wasn't a priority explicitly specified.\nnewDataNode=newDataNode.updatePriority(currentNode.getPriority());}const oldWriteId=transaction.currentWriteId;const serverValues=repoGenerateServerValues(repo);const newNodeResolved=resolveDeferredValueSnapshot(newDataNode,currentNode,serverValues);transaction.currentOutputSnapshotRaw=newDataNode;transaction.currentOutputSnapshotResolved=newNodeResolved;transaction.currentWriteId=repoGetNextWriteId(repo);// Mutates setsToIgnore in place\nsetsToIgnore.splice(setsToIgnore.indexOf(oldWriteId),1);events=events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_,transaction.path,newNodeResolved,transaction.currentWriteId,transaction.applyLocally));events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,oldWriteId,true));}else{abortTransaction=true;abortReason='nodata';events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,transaction.currentWriteId,true));}}}eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);events=[];if(abortTransaction){// Abort.\nqueue[i].status=2/* TransactionStatus.COMPLETED */;// Removing a listener can trigger pruning which can muck with\n// mergedData/visibleData (as it prunes data). So defer the unwatcher\n// until we're done.\n(function(unwatcher){setTimeout(unwatcher,Math.floor(0));})(queue[i].unwatcher);if(queue[i].onComplete){if(abortReason==='nodata'){callbacks.push(()=>queue[i].onComplete(null,false,queue[i].currentInputSnapshot));}else{callbacks.push(()=>queue[i].onComplete(new Error(abortReason),false,null));}}}}// Clean up completed transactions.\nrepoPruneCompletedTransactionsBelowNode(repo,repo.transactionQueueTree_);// Now fire callbacks, now that we're in a good, known state.\nfor(let i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}// Try to send the transaction result to the server.\nrepoSendReadyTransactions(repo,repo.transactionQueueTree_);}/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */function repoGetAncestorTransactionNode(repo,path){let front;// Start at the root and walk deeper into the tree towards path until we\n// find a node with pending transactions.\nlet transactionNode=repo.transactionQueueTree_;front=pathGetFront(path);while(front!==null&&treeGetValue(transactionNode)===undefined){transactionNode=treeSubTree(transactionNode,front);path=pathPopFront(path);front=pathGetFront(path);}return transactionNode;}/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */function repoBuildTransactionQueue(repo,transactionNode){// Walk any child transaction queues and aggregate them into a single queue.\nconst transactionQueue=[];repoAggregateTransactionQueuesForNode(repo,transactionNode,transactionQueue);// Sort them by the order the transactions were created.\ntransactionQueue.sort((a,b)=>a.order-b.order);return transactionQueue;}function repoAggregateTransactionQueuesForNode(repo,node,queue){const nodeQueue=treeGetValue(node);if(nodeQueue){for(let i=0;i<nodeQueue.length;i++){queue.push(nodeQueue[i]);}}treeForEachChild(node,child=>{repoAggregateTransactionQueuesForNode(repo,child,queue);});}/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */function repoPruneCompletedTransactionsBelowNode(repo,node){const queue=treeGetValue(node);if(queue){let to=0;for(let from=0;from<queue.length;from++){if(queue[from].status!==2/* TransactionStatus.COMPLETED */){queue[to]=queue[from];to++;}}queue.length=to;treeSetValue(node,queue.length>0?queue:undefined);}treeForEachChild(node,childNode=>{repoPruneCompletedTransactionsBelowNode(repo,childNode);});}/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */function repoAbortTransactions(repo,path){const affectedPath=treeGetPath(repoGetAncestorTransactionNode(repo,path));const transactionNode=treeSubTree(repo.transactionQueueTree_,path);treeForEachAncestor(transactionNode,node=>{repoAbortTransactionsOnNode(repo,node);});repoAbortTransactionsOnNode(repo,transactionNode);treeForEachDescendant(transactionNode,node=>{repoAbortTransactionsOnNode(repo,node);});return affectedPath;}/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */function repoAbortTransactionsOnNode(repo,node){const queue=treeGetValue(node);if(queue){// Queue up the callbacks and fire them after cleaning up all of our\n// transaction state, since the callback could trigger more transactions\n// or sets.\nconst callbacks=[];// Go through queue.  Any already-sent transactions must be marked for\n// abort, while the unsent ones can be immediately aborted and removed.\nlet events=[];let lastSent=-1;for(let i=0;i<queue.length;i++){if(queue[i].status===3/* TransactionStatus.SENT_NEEDS_ABORT */);else if(queue[i].status===1/* TransactionStatus.SENT */){assert(lastSent===i-1,'All SENT items should be at beginning of queue.');lastSent=i;// Mark transaction for abort when it comes back.\nqueue[i].status=3/* TransactionStatus.SENT_NEEDS_ABORT */;queue[i].abortReason='set';}else{assert(queue[i].status===0/* TransactionStatus.RUN */,'Unexpected transaction status in abort');// We can abort it immediately.\nqueue[i].unwatcher();events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,queue[i].currentWriteId,true));if(queue[i].onComplete){callbacks.push(queue[i].onComplete.bind(null,new Error('set'),false,null));}}}if(lastSent===-1){// We're not waiting for any sent transactions.  We can clear the queue.\ntreeSetValue(node,undefined);}else{// Remove the transactions we aborted.\nqueue.length=lastSent+1;}// Now fire the callbacks.\neventQueueRaiseEventsForChangedPath(repo.eventQueue_,treeGetPath(node),events);for(let i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function decodePath(pathString){let pathStringDecoded='';const pieces=pathString.split('/');for(let i=0;i<pieces.length;i++){if(pieces[i].length>0){let piece=pieces[i];try{piece=decodeURIComponent(piece.replace(/\\+/g,' '));}catch(e){}pathStringDecoded+='/'+piece;}}return pathStringDecoded;}/**\r\n * @returns key value hash\r\n */function decodeQuery(queryString){const results={};if(queryString.charAt(0)==='?'){queryString=queryString.substring(1);}for(const segment of queryString.split('&')){if(segment.length===0){continue;}const kv=segment.split('=');if(kv.length===2){results[decodeURIComponent(kv[0])]=decodeURIComponent(kv[1]);}else{warn(`Invalid query segment '${segment}' in query '${queryString}'`);}}return results;}const parseRepoInfo=function(dataURL,nodeAdmin){const parsedUrl=parseDatabaseURL(dataURL),namespace=parsedUrl.namespace;if(parsedUrl.domain==='firebase.com'){fatal(parsedUrl.host+' is no longer supported. '+'Please use <YOUR FIREBASE>.firebaseio.com instead');}// Catch common error of uninitialized namespace value.\nif((!namespace||namespace==='undefined')&&parsedUrl.domain!=='localhost'){fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');}if(!parsedUrl.secure){warnIfPageIsSecure();}const webSocketOnly=parsedUrl.scheme==='ws'||parsedUrl.scheme==='wss';return{repoInfo:new RepoInfo(parsedUrl.host,parsedUrl.secure,namespace,webSocketOnly,nodeAdmin,/*persistenceKey=*/'',/*includeNamespaceInQueryParams=*/namespace!==parsedUrl.subdomain),path:new Path(parsedUrl.pathString)};};const parseDatabaseURL=function(dataURL){// Default to empty strings in the event of a malformed string.\nlet host='',domain='',subdomain='',pathString='',namespace='';// Always default to SSL, unless otherwise specified.\nlet secure=true,scheme='https',port=443;// Don't do any validation here. The caller is responsible for validating the result of parsing.\nif(typeof dataURL==='string'){// Parse scheme.\nlet colonInd=dataURL.indexOf('//');if(colonInd>=0){scheme=dataURL.substring(0,colonInd-1);dataURL=dataURL.substring(colonInd+2);}// Parse host, path, and query string.\nlet slashInd=dataURL.indexOf('/');if(slashInd===-1){slashInd=dataURL.length;}let questionMarkInd=dataURL.indexOf('?');if(questionMarkInd===-1){questionMarkInd=dataURL.length;}host=dataURL.substring(0,Math.min(slashInd,questionMarkInd));if(slashInd<questionMarkInd){// For pathString, questionMarkInd will always come after slashInd\npathString=decodePath(dataURL.substring(slashInd,questionMarkInd));}const queryParams=decodeQuery(dataURL.substring(Math.min(dataURL.length,questionMarkInd)));// If we have a port, use scheme for determining if it's secure.\ncolonInd=host.indexOf(':');if(colonInd>=0){secure=scheme==='https'||scheme==='wss';port=parseInt(host.substring(colonInd+1),10);}else{colonInd=host.length;}const hostWithoutPort=host.slice(0,colonInd);if(hostWithoutPort.toLowerCase()==='localhost'){domain='localhost';}else if(hostWithoutPort.split('.').length<=2){domain=hostWithoutPort;}else{// Interpret the subdomain of a 3 or more component URL as the namespace name.\nconst dotInd=host.indexOf('.');subdomain=host.substring(0,dotInd).toLowerCase();domain=host.substring(dotInd+1);// Normalize namespaces to lowercase to share storage / connection.\nnamespace=subdomain;}// Always treat the value of the `ns` as the namespace name if it is present.\nif('ns'in queryParams){namespace=queryParams['ns'];}}return{host,port,domain,subdomain,secure,scheme,pathString,namespace};};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS='-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */const nextPushId=function(){// Timestamp of last push, used to prevent local collisions if you push twice\n// in one ms.\nlet lastPushTime=0;// We generate 72-bits of randomness which get turned into 12 characters and\n// appended to the timestamp to prevent collisions with other clients. We\n// store the last characters we generated because in the event of a collision,\n// we'll use those same characters except \"incremented\" by one.\nconst lastRandChars=[];return function(now){const duplicateTime=now===lastPushTime;lastPushTime=now;let i;const timeStampChars=new Array(8);for(i=7;i>=0;i--){timeStampChars[i]=PUSH_CHARS.charAt(now%64);// NOTE: Can't use << here because javascript will convert to int and lose\n// the upper bits.\nnow=Math.floor(now/64);}assert(now===0,'Cannot push at time == 0');let id=timeStampChars.join('');if(!duplicateTime){for(i=0;i<12;i++){lastRandChars[i]=Math.floor(Math.random()*64);}}else{// If the timestamp hasn't changed since last push, use the same random\n// number, except incremented by 1.\nfor(i=11;i>=0&&lastRandChars[i]===63;i--){lastRandChars[i]=0;}lastRandChars[i]++;}for(i=0;i<12;i++){id+=PUSH_CHARS.charAt(lastRandChars[i]);}assert(id.length===20,'nextPushId: Length should be 20.');return id;};}();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Encapsulates the data needed to raise an event\r\n */class DataEvent{/**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */constructor(eventType,eventRegistration,snapshot,prevName){this.eventType=eventType;this.eventRegistration=eventRegistration;this.snapshot=snapshot;this.prevName=prevName;}getPath(){const ref=this.snapshot.ref;if(this.eventType==='value'){return ref._path;}else{return ref.parent._path;}}getEventType(){return this.eventType;}getEventRunner(){return this.eventRegistration.getEventRunner(this);}toString(){return this.getPath().toString()+':'+this.eventType+':'+stringify(this.snapshot.exportVal());}}class CancelEvent{constructor(eventRegistration,error,path){this.eventRegistration=eventRegistration;this.error=error;this.path=path;}getPath(){return this.path;}getEventType(){return'cancel';}getEventRunner(){return this.eventRegistration.getEventRunner(this);}toString(){return this.path.toString()+':cancel';}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */class CallbackContext{constructor(snapshotCallback,cancelCallback){this.snapshotCallback=snapshotCallback;this.cancelCallback=cancelCallback;}onValue(expDataSnapshot,previousChildName){this.snapshotCallback.call(null,expDataSnapshot,previousChildName);}onCancel(error){assert(this.hasCancelCallback,'Raising a cancel event on a listener with no cancel callback');return this.cancelCallback.call(null,error);}get hasCancelCallback(){return!!this.cancelCallback;}matches(other){return this.snapshotCallback===other.snapshotCallback||this.snapshotCallback.userCallback!==undefined&&this.snapshotCallback.userCallback===other.snapshotCallback.userCallback&&this.snapshotCallback.context===other.snapshotCallback.context;}}/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */class OnDisconnect{/** @hideconstructor */constructor(_repo,_path){this._repo=_repo;this._path=_path;}/**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */cancel(){const deferred=new Deferred();repoOnDisconnectCancel(this._repo,this._path,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */remove(){validateWritablePath('OnDisconnect.remove',this._path);const deferred=new Deferred();repoOnDisconnectSet(this._repo,this._path,null,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */set(value){validateWritablePath('OnDisconnect.set',this._path);validateFirebaseDataArg('OnDisconnect.set',value,this._path,false);const deferred=new Deferred();repoOnDisconnectSet(this._repo,this._path,value,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */setWithPriority(value,priority){validateWritablePath('OnDisconnect.setWithPriority',this._path);validateFirebaseDataArg('OnDisconnect.setWithPriority',value,this._path,false);validatePriority('OnDisconnect.setWithPriority',priority,false);const deferred=new Deferred();repoOnDisconnectSetWithPriority(this._repo,this._path,value,priority,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */update(values){validateWritablePath('OnDisconnect.update',this._path);validateFirebaseMergeDataArg('OnDisconnect.update',values,this._path,false);const deferred=new Deferred();repoOnDisconnectUpdate(this._repo,this._path,values,deferred.wrapCallback(()=>{}));return deferred.promise;}}/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @internal\r\n */class QueryImpl{/**\r\n     * @hideconstructor\r\n     */constructor(_repo,_path,_queryParams,_orderByCalled){this._repo=_repo;this._path=_path;this._queryParams=_queryParams;this._orderByCalled=_orderByCalled;}get key(){if(pathIsEmpty(this._path)){return null;}else{return pathGetBack(this._path);}}get ref(){return new ReferenceImpl(this._repo,this._path);}get _queryIdentifier(){const obj=queryParamsGetQueryObject(this._queryParams);const id=ObjectToUniqueKey(obj);return id==='{}'?'default':id;}/**\r\n     * An object representation of the query parameters used by this Query.\r\n     */get _queryObject(){return queryParamsGetQueryObject(this._queryParams);}isEqual(other){other=getModularInstance(other);if(!(other instanceof QueryImpl)){return false;}const sameRepo=this._repo===other._repo;const samePath=pathEquals(this._path,other._path);const sameQueryIdentifier=this._queryIdentifier===other._queryIdentifier;return sameRepo&&samePath&&sameQueryIdentifier;}toJSON(){return this.toString();}toString(){return this._repo.toString()+pathToUrlEncodedString(this._path);}}/**\r\n * Validates that no other order by call has been made\r\n */function validateNoPreviousOrderByCall(query,fnName){if(query._orderByCalled===true){throw new Error(fnName+\": You can't combine multiple orderBy calls.\");}}/**\r\n * Validates start/end values for queries.\r\n */function validateQueryEndpoints(params){let startNode=null;let endNode=null;if(params.hasStart()){startNode=params.getIndexStartValue();}if(params.hasEnd()){endNode=params.getIndexEndValue();}if(params.getIndex()===KEY_INDEX){const tooManyArgsError='Query: When ordering by key, you may only pass one argument to '+'startAt(), endAt(), or equalTo().';const wrongArgTypeError='Query: When ordering by key, the argument passed to startAt(), startAfter(), '+'endAt(), endBefore(), or equalTo() must be a string.';if(params.hasStart()){const startName=params.getIndexStartName();if(startName!==MIN_NAME){throw new Error(tooManyArgsError);}else if(typeof startNode!=='string'){throw new Error(wrongArgTypeError);}}if(params.hasEnd()){const endName=params.getIndexEndName();if(endName!==MAX_NAME){throw new Error(tooManyArgsError);}else if(typeof endNode!=='string'){throw new Error(wrongArgTypeError);}}}else if(params.getIndex()===PRIORITY_INDEX){if(startNode!=null&&!isValidPriority(startNode)||endNode!=null&&!isValidPriority(endNode)){throw new Error('Query: When ordering by priority, the first argument passed to startAt(), '+'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value '+'(null, a number, or a string).');}}else{assert(params.getIndex()instanceof PathIndex||params.getIndex()===VALUE_INDEX,'unknown index type.');if(startNode!=null&&typeof startNode==='object'||endNode!=null&&typeof endNode==='object'){throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or '+'equalTo() cannot be an object.');}}}/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */function validateLimit(params){if(params.hasStart()&&params.hasEnd()&&params.hasLimit()&&!params.hasAnchoredLimit()){throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \"+'limitToFirst() or limitToLast() instead.');}}/**\r\n * @internal\r\n */class ReferenceImpl extends QueryImpl{/** @hideconstructor */constructor(repo,path){super(repo,path,new QueryParams(),false);}get parent(){const parentPath=pathParent(this._path);return parentPath===null?null:new ReferenceImpl(this._repo,parentPath);}get root(){let ref=this;while(ref.parent!==null){ref=ref.parent;}return ref;}}/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */class DataSnapshot{/**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */constructor(_node,/**\r\n     * The location of this DataSnapshot.\r\n     */ref,_index){this._node=_node;this.ref=ref;this._index=_index;}/**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */get priority(){// typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\nreturn this._node.getPriority().val();}/**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */get key(){return this.ref.key;}/** Returns the number of child properties of this `DataSnapshot`. */get size(){return this._node.numChildren();}/**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */child(path){const childPath=new Path(path);const childRef=child(this.ref,path);return new DataSnapshot(this._node.getChild(childPath),childRef,PRIORITY_INDEX);}/**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */exists(){return!this._node.isEmpty();}/**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nexportVal(){return this._node.val(true);}/**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */forEach(action){if(this._node.isLeafNode()){return false;}const childrenNode=this._node;// Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\nreturn!!childrenNode.forEachChild(this._index,(key,node)=>{return action(new DataSnapshot(node,child(this.ref,key),PRIORITY_INDEX));});}/**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */hasChild(path){const childPath=new Path(path);return!this._node.getChild(childPath).isEmpty();}/**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */hasChildren(){if(this._node.isLeafNode()){return false;}else{return!this._node.isEmpty();}}/**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */toJSON(){return this.exportVal();}/**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nval(){return this._node.val();}}/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */function ref(db,path){db=getModularInstance(db);db._checkNotDeleted('ref');return path!==undefined?child(db._root,path):db._root;}/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */function refFromURL(db,url){db=getModularInstance(db);db._checkNotDeleted('refFromURL');const parsedURL=parseRepoInfo(url,db._repo.repoInfo_.nodeAdmin);validateUrl('refFromURL',parsedURL);const repoInfo=parsedURL.repoInfo;if(!db._repo.repoInfo_.isCustomHost()&&repoInfo.host!==db._repo.repoInfo_.host){fatal('refFromURL'+': Host name does not match the current database: '+'(found '+repoInfo.host+' but expected '+db._repo.repoInfo_.host+')');}return ref(db,parsedURL.path.toString());}/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */function child(parent,path){parent=getModularInstance(parent);if(pathGetFront(parent._path)===null){validateRootPathString('child','path',path,false);}else{validatePathString('child','path',path,false);}return new ReferenceImpl(parent._repo,pathChild(parent._path,path));}/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */function onDisconnect(ref){ref=getModularInstance(ref);return new OnDisconnect(ref._repo,ref._path);}/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */function push(parent,value){parent=getModularInstance(parent);validateWritablePath('push',parent._path);validateFirebaseDataArg('push',value,parent._path,true);const now=repoServerTime(parent._repo);const name=nextPushId(now);// push() returns a ThennableReference whose promise is fulfilled with a\n// regular Reference. We use child() to create handles to two different\n// references. The first is turned into a ThennableReference below by adding\n// then() and catch() methods and is used as the return value of push(). The\n// second remains a regular Reference and is used as the fulfilled value of\n// the first ThennableReference.\nconst thennablePushRef=child(parent,name);const pushRef=child(parent,name);let promise;if(value!=null){promise=set(pushRef,value).then(()=>pushRef);}else{promise=Promise.resolve(pushRef);}thennablePushRef.then=promise.then.bind(promise);thennablePushRef.catch=promise.then.bind(promise,undefined);return thennablePushRef;}/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */function remove(ref){validateWritablePath('remove',ref._path);return set(ref,null);}/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */function set(ref,value){ref=getModularInstance(ref);validateWritablePath('set',ref._path);validateFirebaseDataArg('set',value,ref._path,false);const deferred=new Deferred();repoSetWithPriority(ref._repo,ref._path,value,/*priority=*/null,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */function setPriority(ref,priority){ref=getModularInstance(ref);validateWritablePath('setPriority',ref._path);validatePriority('setPriority',priority,false);const deferred=new Deferred();repoSetWithPriority(ref._repo,pathChild(ref._path,'.priority'),priority,null,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */function setWithPriority(ref,value,priority){validateWritablePath('setWithPriority',ref._path);validateFirebaseDataArg('setWithPriority',value,ref._path,false);validatePriority('setWithPriority',priority,false);if(ref.key==='.length'||ref.key==='.keys'){throw'setWithPriority failed: '+ref.key+' is a read-only object.';}const deferred=new Deferred();repoSetWithPriority(ref._repo,ref._path,value,priority,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */function update(ref,values){validateFirebaseMergeDataArg('update',values,ref._path,false);const deferred=new Deferred();repoUpdate(ref._repo,ref._path,values,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */function get(query){query=getModularInstance(query);const callbackContext=new CallbackContext(()=>{});const container=new ValueEventRegistration(callbackContext);return repoGetValue(query._repo,query,container).then(node=>{return new DataSnapshot(node,new ReferenceImpl(query._repo,query._path),query._queryParams.getIndex());});}/**\r\n * Represents registration for 'value' events.\r\n */class ValueEventRegistration{constructor(callbackContext){this.callbackContext=callbackContext;}respondsTo(eventType){return eventType==='value';}createEvent(change,query){const index=query._queryParams.getIndex();return new DataEvent('value',this,new DataSnapshot(change.snapshotNode,new ReferenceImpl(query._repo,query._path),index));}getEventRunner(eventData){if(eventData.getEventType()==='cancel'){return()=>this.callbackContext.onCancel(eventData.error);}else{return()=>this.callbackContext.onValue(eventData.snapshot,null);}}createCancelEvent(error,path){if(this.callbackContext.hasCancelCallback){return new CancelEvent(this,error,path);}else{return null;}}matches(other){if(!(other instanceof ValueEventRegistration)){return false;}else if(!other.callbackContext||!this.callbackContext){// If no callback specified, we consider it to match any callback.\nreturn true;}else{return other.callbackContext.matches(this.callbackContext);}}hasAnyCallback(){return this.callbackContext!==null;}}/**\r\n * Represents the registration of a child_x event.\r\n */class ChildEventRegistration{constructor(eventType,callbackContext){this.eventType=eventType;this.callbackContext=callbackContext;}respondsTo(eventType){let eventToCheck=eventType==='children_added'?'child_added':eventType;eventToCheck=eventToCheck==='children_removed'?'child_removed':eventToCheck;return this.eventType===eventToCheck;}createCancelEvent(error,path){if(this.callbackContext.hasCancelCallback){return new CancelEvent(this,error,path);}else{return null;}}createEvent(change,query){assert(change.childName!=null,'Child events should have a childName.');const childRef=child(new ReferenceImpl(query._repo,query._path),change.childName);const index=query._queryParams.getIndex();return new DataEvent(change.type,this,new DataSnapshot(change.snapshotNode,childRef,index),change.prevName);}getEventRunner(eventData){if(eventData.getEventType()==='cancel'){return()=>this.callbackContext.onCancel(eventData.error);}else{return()=>this.callbackContext.onValue(eventData.snapshot,eventData.prevName);}}matches(other){if(other instanceof ChildEventRegistration){return this.eventType===other.eventType&&(!this.callbackContext||!other.callbackContext||this.callbackContext.matches(other.callbackContext));}return false;}hasAnyCallback(){return!!this.callbackContext;}}function addEventListener(query,eventType,callback,cancelCallbackOrListenOptions,options){let cancelCallback;if(typeof cancelCallbackOrListenOptions==='object'){cancelCallback=undefined;options=cancelCallbackOrListenOptions;}if(typeof cancelCallbackOrListenOptions==='function'){cancelCallback=cancelCallbackOrListenOptions;}if(options&&options.onlyOnce){const userCallback=callback;const onceCallback=(dataSnapshot,previousChildName)=>{repoRemoveEventCallbackForQuery(query._repo,query,container);userCallback(dataSnapshot,previousChildName);};onceCallback.userCallback=callback.userCallback;onceCallback.context=callback.context;callback=onceCallback;}const callbackContext=new CallbackContext(callback,cancelCallback||undefined);const container=eventType==='value'?new ValueEventRegistration(callbackContext):new ChildEventRegistration(eventType,callbackContext);repoAddEventCallbackForQuery(query._repo,query,container);return()=>repoRemoveEventCallbackForQuery(query._repo,query,container);}function onValue(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'value',callback,cancelCallbackOrListenOptions,options);}function onChildAdded(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_added',callback,cancelCallbackOrListenOptions,options);}function onChildChanged(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_changed',callback,cancelCallbackOrListenOptions,options);}function onChildMoved(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_moved',callback,cancelCallbackOrListenOptions,options);}function onChildRemoved(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_removed',callback,cancelCallbackOrListenOptions,options);}/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */function off(query,eventType,callback){let container=null;const expCallback=callback?new CallbackContext(callback):null;if(eventType==='value'){container=new ValueEventRegistration(expCallback);}else if(eventType){container=new ChildEventRegistration(eventType,expCallback);}repoRemoveEventCallbackForQuery(query._repo,query,container);}/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */class QueryConstraint{}class QueryEndAtConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('endAt',this._value,query._path,true);const newParams=queryParamsEndAt(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasEnd()){throw new Error('endAt: Starting point was already set (by another call to endAt, '+'endBefore or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */function endAt(value,key){validateKey('endAt','key',key,true);return new QueryEndAtConstraint(value,key);}class QueryEndBeforeConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('endBefore',this._value,query._path,false);const newParams=queryParamsEndBefore(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasEnd()){throw new Error('endBefore: Starting point was already set (by another call to endAt, '+'endBefore or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */function endBefore(value,key){validateKey('endBefore','key',key,true);return new QueryEndBeforeConstraint(value,key);}class QueryStartAtConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('startAt',this._value,query._path,true);const newParams=queryParamsStartAt(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasStart()){throw new Error('startAt: Starting point was already set (by another call to startAt, '+'startBefore or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */function startAt(value=null,key){validateKey('startAt','key',key,true);return new QueryStartAtConstraint(value,key);}class QueryStartAfterConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('startAfter',this._value,query._path,false);const newParams=queryParamsStartAfter(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasStart()){throw new Error('startAfter: Starting point was already set (by another call to startAt, '+'startAfter, or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */function startAfter(value,key){validateKey('startAfter','key',key,true);return new QueryStartAfterConstraint(value,key);}class QueryLimitToFirstConstraint extends QueryConstraint{constructor(_limit){super();this._limit=_limit;}_apply(query){if(query._queryParams.hasLimit()){throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst '+'or limitToLast).');}return new QueryImpl(query._repo,query._path,queryParamsLimitToFirst(query._queryParams,this._limit),query._orderByCalled);}}/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */function limitToFirst(limit){if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('limitToFirst: First argument must be a positive integer.');}return new QueryLimitToFirstConstraint(limit);}class QueryLimitToLastConstraint extends QueryConstraint{constructor(_limit){super();this._limit=_limit;}_apply(query){if(query._queryParams.hasLimit()){throw new Error('limitToLast: Limit was already set (by another call to limitToFirst '+'or limitToLast).');}return new QueryImpl(query._repo,query._path,queryParamsLimitToLast(query._queryParams,this._limit),query._orderByCalled);}}/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */function limitToLast(limit){if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('limitToLast: First argument must be a positive integer.');}return new QueryLimitToLastConstraint(limit);}class QueryOrderByChildConstraint extends QueryConstraint{constructor(_path){super();this._path=_path;}_apply(query){validateNoPreviousOrderByCall(query,'orderByChild');const parsedPath=new Path(this._path);if(pathIsEmpty(parsedPath)){throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');}const index=new PathIndex(parsedPath);const newParams=queryParamsOrderBy(query._queryParams,index);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */function orderByChild(path){if(path==='$key'){throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');}else if(path==='$priority'){throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');}else if(path==='$value'){throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');}validatePathString('orderByChild','path',path,false);return new QueryOrderByChildConstraint(path);}class QueryOrderByKeyConstraint extends QueryConstraint{_apply(query){validateNoPreviousOrderByCall(query,'orderByKey');const newParams=queryParamsOrderBy(query._queryParams,KEY_INDEX);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */function orderByKey(){return new QueryOrderByKeyConstraint();}class QueryOrderByPriorityConstraint extends QueryConstraint{_apply(query){validateNoPreviousOrderByCall(query,'orderByPriority');const newParams=queryParamsOrderBy(query._queryParams,PRIORITY_INDEX);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */function orderByPriority(){return new QueryOrderByPriorityConstraint();}class QueryOrderByValueConstraint extends QueryConstraint{_apply(query){validateNoPreviousOrderByCall(query,'orderByValue');const newParams=queryParamsOrderBy(query._queryParams,VALUE_INDEX);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */function orderByValue(){return new QueryOrderByValueConstraint();}class QueryEqualToValueConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('equalTo',this._value,query._path,false);if(query._queryParams.hasStart()){throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or '+'equalTo).');}if(query._queryParams.hasEnd()){throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or '+'equalTo).');}return new QueryEndAtConstraint(this._value,this._key)._apply(new QueryStartAtConstraint(this._value,this._key)._apply(query));}}/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */function equalTo(value,key){validateKey('equalTo','key',key,true);return new QueryEqualToValueConstraint(value,key);}/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */function query(query,...queryConstraints){let queryImpl=getModularInstance(query);for(const constraint of queryConstraints){queryImpl=constraint._apply(queryImpl);}return queryImpl;}/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */syncPointSetReferenceConstructor(ReferenceImpl);syncTreeSetReferenceConstructor(ReferenceImpl);/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */const FIREBASE_DATABASE_EMULATOR_HOST_VAR='FIREBASE_DATABASE_EMULATOR_HOST';/**\r\n * Creates and caches `Repo` instances.\r\n */const repos={};/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */let useRestClient=false;/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */function repoManagerApplyEmulatorSettings(repo,host,port,tokenProvider){repo.repoInfo_=new RepoInfo(`${host}:${port}`,/* secure= */false,repo.repoInfo_.namespace,repo.repoInfo_.webSocketOnly,repo.repoInfo_.nodeAdmin,repo.repoInfo_.persistenceKey,repo.repoInfo_.includeNamespaceInQueryParams,/*isUsingEmulator=*/true);if(tokenProvider){repo.authTokenProvider_=tokenProvider;}}/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */function repoManagerDatabaseFromApp(app,authProvider,appCheckProvider,url,nodeAdmin){let dbUrl=url||app.options.databaseURL;if(dbUrl===undefined){if(!app.options.projectId){fatal(\"Can't determine Firebase Database URL. Be sure to include \"+' a Project ID when calling firebase.initializeApp().');}log('Using default host for project ',app.options.projectId);dbUrl=`${app.options.projectId}-default-rtdb.firebaseio.com`;}let parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);let repoInfo=parsedUrl.repoInfo;let isEmulator;let dbEmulatorHost=undefined;if(typeof process!=='undefined'&&process.env){dbEmulatorHost=process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];}if(dbEmulatorHost){isEmulator=true;dbUrl=`http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);repoInfo=parsedUrl.repoInfo;}else{isEmulator=!parsedUrl.repoInfo.secure;}const authTokenProvider=nodeAdmin&&isEmulator?new EmulatorTokenProvider(EmulatorTokenProvider.OWNER):new FirebaseAuthTokenProvider(app.name,app.options,authProvider);validateUrl('Invalid Firebase Database URL',parsedUrl);if(!pathIsEmpty(parsedUrl.path)){fatal('Database URL must point to the root of a Firebase Database '+'(not including a child path).');}const repo=repoManagerCreateRepo(repoInfo,app,authTokenProvider,new AppCheckTokenProvider(app.name,appCheckProvider));return new Database(repo,app);}/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */function repoManagerDeleteRepo(repo,appName){const appRepos=repos[appName];// This should never happen...\nif(!appRepos||appRepos[repo.key]!==repo){fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);}repoInterrupt(repo);delete appRepos[repo.key];}/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */function repoManagerCreateRepo(repoInfo,app,authTokenProvider,appCheckProvider){let appRepos=repos[app.name];if(!appRepos){appRepos={};repos[app.name]=appRepos;}let repo=appRepos[repoInfo.toURLString()];if(repo){fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');}repo=new Repo(repoInfo,useRestClient,authTokenProvider,appCheckProvider);appRepos[repoInfo.toURLString()]=repo;return repo;}/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */function repoManagerForceRestClient(forceRestClient){useRestClient=forceRestClient;}/**\r\n * Class representing a Firebase Realtime Database.\r\n */class Database{/** @hideconstructor */constructor(_repoInternal,/** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */app){this._repoInternal=_repoInternal;this.app=app;/** Represents a `Database` instance. */this['type']='database';/** Track if the instance has been used (root or repo accessed) */this._instanceStarted=false;}get _repo(){if(!this._instanceStarted){repoStart(this._repoInternal,this.app.options.appId,this.app.options['databaseAuthVariableOverride']);this._instanceStarted=true;}return this._repoInternal;}get _root(){if(!this._rootInternal){this._rootInternal=new ReferenceImpl(this._repo,newEmptyPath());}return this._rootInternal;}_delete(){if(this._rootInternal!==null){repoManagerDeleteRepo(this._repo,this.app.name);this._repoInternal=null;this._rootInternal=null;}return Promise.resolve();}_checkNotDeleted(apiName){if(this._rootInternal===null){fatal('Cannot call '+apiName+' on a deleted database.');}}}function checkTransportInit(){if(TransportManager.IS_TRANSPORT_INITIALIZED){warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');}}/**\r\n * Force the use of websockets instead of longPolling.\r\n */function forceWebSockets(){checkTransportInit();BrowserPollConnection.forceDisallow();}/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */function forceLongPolling(){checkTransportInit();WebSocketConnection.forceDisallow();BrowserPollConnection.forceAllow();}/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */function getDatabase(app=getApp(),url){const db=_getProvider(app,'database').getImmediate({identifier:url});if(!db._instanceStarted){const emulator=getDefaultEmulatorHostnameAndPort('database');if(emulator){connectDatabaseEmulator(db,...emulator);}}return db;}/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */function connectDatabaseEmulator(db,host,port,options={}){db=getModularInstance(db);db._checkNotDeleted('useEmulator');if(db._instanceStarted){fatal('Cannot call useEmulator() after instance has already been initialized.');}const repo=db._repoInternal;let tokenProvider=undefined;if(repo.repoInfo_.nodeAdmin){if(options.mockUserToken){fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');}tokenProvider=new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);}else if(options.mockUserToken){const token=typeof options.mockUserToken==='string'?options.mockUserToken:createMockUserToken(options.mockUserToken,db.app.options.projectId);tokenProvider=new EmulatorTokenProvider(token);}// Modify the repo to apply emulator settings\nrepoManagerApplyEmulatorSettings(repo,host,port,tokenProvider);}/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */function goOffline(db){db=getModularInstance(db);db._checkNotDeleted('goOffline');repoInterrupt(db._repo);}/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */function goOnline(db){db=getModularInstance(db);db._checkNotDeleted('goOnline');repoResume(db._repo);}function enableLogging(logger,persistent){enableLogging$1(logger,persistent);}/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function registerDatabase(variant){setSDKVersion(SDK_VERSION$1);_registerComponent(new Component('database',(container,{instanceIdentifier:url})=>{const app=container.getProvider('app').getImmediate();const authProvider=container.getProvider('auth-internal');const appCheckProvider=container.getProvider('app-check-internal');return repoManagerDatabaseFromApp(app,authProvider,appCheckProvider,url);},\"PUBLIC\"/* ComponentType.PUBLIC */).setMultipleInstances(true));registerVersion(name,version,variant);// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name,version,'esm2017');}/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const SERVER_TIMESTAMP={'.sv':'timestamp'};/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */function serverTimestamp(){return SERVER_TIMESTAMP;}/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */function increment(delta){return{'.sv':{'increment':delta}};}/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */class TransactionResult{/** @hideconstructor */constructor(/** Whether the transaction was successfully committed. */committed,/** The resulting data snapshot. */snapshot){this.committed=committed;this.snapshot=snapshot;}/** Returns a JSON-serializable representation of this object. */toJSON(){return{committed:this.committed,snapshot:this.snapshot.toJSON()};}}/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */function runTransaction(ref,// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate,options){var _a;ref=getModularInstance(ref);validateWritablePath('Reference.transaction',ref._path);if(ref.key==='.length'||ref.key==='.keys'){throw'Reference.transaction failed: '+ref.key+' is a read-only object.';}const applyLocally=(_a=options===null||options===void 0?void 0:options.applyLocally)!==null&&_a!==void 0?_a:true;const deferred=new Deferred();const promiseComplete=(error,committed,node)=>{let dataSnapshot=null;if(error){deferred.reject(error);}else{dataSnapshot=new DataSnapshot(node,new ReferenceImpl(ref._repo,ref._path),PRIORITY_INDEX);deferred.resolve(new TransactionResult(committed,dataSnapshot));}};// Add a watch to make sure we get server updates.\nconst unwatcher=onValue(ref,()=>{});repoStartTransaction(ref._repo,ref._path,transactionUpdate,promiseComplete,unwatcher,applyLocally);return deferred.promise;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */PersistentConnection;// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen=function(pathString,onComplete){this.sendRequest('q',{p:pathString},onComplete);};// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo=function(data,onEcho){this.sendRequest('echo',{d:data},onEcho);};// RealTimeConnection properties that we use in tests.\nConnection;/**\r\n * @internal\r\n */const hijackHash=function(newHash){const oldPut=PersistentConnection.prototype.put;PersistentConnection.prototype.put=function(pathString,data,onComplete,hash){if(hash!==undefined){hash=newHash();}oldPut.call(this,pathString,data,onComplete,hash);};return function(){PersistentConnection.prototype.put=oldPut;};};RepoInfo;/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */const forceRestClient=function(forceRestClient){repoManagerForceRestClient(forceRestClient);};/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */registerDatabase();export{DataSnapshot,Database,OnDisconnect,QueryConstraint,TransactionResult,QueryImpl as _QueryImpl,QueryParams as _QueryParams,ReferenceImpl as _ReferenceImpl,forceRestClient as _TEST_ACCESS_forceRestClient,hijackHash as _TEST_ACCESS_hijackHash,repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp,setSDKVersion as _setSDKVersion,validatePathString as _validatePathString,validateWritablePath as _validateWritablePath,child,connectDatabaseEmulator,enableLogging,endAt,endBefore,equalTo,forceLongPolling,forceWebSockets,get,getDatabase,goOffline,goOnline,increment,limitToFirst,limitToLast,off,onChildAdded,onChildChanged,onChildMoved,onChildRemoved,onDisconnect,onValue,orderByChild,orderByKey,orderByPriority,orderByValue,push,query,ref,refFromURL,remove,runTransaction,serverTimestamp,set,setPriority,setWithPriority,startAfter,startAt,update};","map":{"version":3,"mappings":"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","names":["SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","constructor","domStorage_","set","key","value","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appCheckProvider","appName_","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","each","StatsCollection","incrementCounter","amount","counters_","deepCopy","collections","reporters","statsManagerGetCollection","hashString","creatorFunction","PacketReceiver","onMessage_","closeAfter","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","handleResponse","requestNum","pendingResponses","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","bytesSent","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","outstandingRequests","size","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","options","device","headers","platform","env","process","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","isInMemoryStorage","appendFrame_","frames","totalFrames","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","keepaliveTimer","clearInterval","setInterval","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","pendingDataMessages","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","trigger","eventType","listeners_","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","isMobileCordova","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pieceNum","pieces_","pathOrString","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","childPathObj","childPieces","pathIsEmpty","outerPath","innerPath","outer","inner","newRelativePath","left","right","leftKeys","rightKeys","cmp","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","Map","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","requestCBHash_","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","undefined","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","forceTokenRefresh_","all","interrupt","interruptReasons_","resume","isEmpty","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","securityDebugCallback_","console","replace","queries","values","clientName","isReactNative","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","MAX_NODE","setMaxNode","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","lazyHash_","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexSet_","indexes_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","Object","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","NAME_COMPARATOR","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","NAME_ONLY_COMPARATOR","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","changeChildRemoved","changeChildAdded","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","reverse_","withinEndPost","withinStartPost","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","withinDirectionalStart","withinDirectionalEnd","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","hasLimit","limitSet_","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","newLimit","newParams","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listenId","thisListen","listens_","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","getNode","rootNode_","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","tree","sparseSnapshotTreeForget","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","server_","statsListener_","collection","reportStats_","reportedStats","haveStatsToReport","statsToReport_","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","changeChildMoved","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","newViewCache","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","pathChild","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","shadowingNode","compoundWriteIsEmpty","applySubtreeWrite","writeTree","priorityWrite","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","record","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","pathContains","writeTreeResetTree_","compoundWriteRemoveWrite","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","compoundWriteChildCompoundWrite","compoundWriteHasCompleteWrite","layeredCache","compoundWriteApply","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","ChildChangeAccumulator","oldChange","changeMap","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","writeTreeRefCalcIndexedSlice","newViewProcessor","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","writeTreeRefShadowingWrite","completeEventChildren","writeTreeRefCalcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","cache","viewIsEmpty","eventRegistrations_","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewProcessorAssertIndexed","viewGenerateEventsForChanges_","initialChanges","eventNode","referenceConstructor","SyncPoint","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","viewAddEventRegistration","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","viewGetCompleteServerCache","syncPointGetCompleteView","syncPointViewForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","writeTreeGetWrite","needToReevaluate","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","skipListenerDedup","maybeSyncPoint","syncPointTree_","syncPointViewExistsForQuery","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","syncPointGetCompleteServerCache","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","writeTreeChildWrites","syncPointAddEventRegistration","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","writeTreeRefChild","syncTreeApplyListenComplete","errorForServerCode","syncTreeRemoveEventRegistration","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","pathObj","treeGetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachDescendant","includeSelf","childrenFirst","treeForEachChild","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","validationPathPush","validateFirebaseMergePaths","mergePaths","curPath","pathCompare","prevPath","validateFirebaseMergeDataArg","validatePriority","validateKey","argumentName","validateRootPathString","validatePathString","validateUrl","parsedUrl","EventQueue","eventQueue","eventDataList","currList","getPath","pathEquals","eventLists_","eventQueueRaiseEventsAtPath","eventQueueQueueEvents","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoOnServerInfoUpdate","statsReporter_","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","repoServerTime","offsetNode","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","nextWriteId_","repoGetValue","cached","syncTreeGetServerValue","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","treeSubTree","transactionQueueTree_","nodeQueue","treeSetValue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","cancelCallback","snapshotCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","validateWritablePath","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","parsedURL","thennablePushRef","pushRef","callbackContext","container","ValueEventRegistration","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","QueryEndBeforeConstraint","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","QueryLimitToFirstConstraint","_limit","queryParamsLimitToFirst","limitToFirst","limit","QueryLimitToLastConstraint","queryParamsLimitToLast","limitToLast","QueryOrderByChildConstraint","parsedPath","queryParamsOrderBy","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","checkTransportInit","forceWebSockets","forceLongPolling","getDatabase","getApp","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","enableLoggingImpl","registerDatabase","variant","_registerComponent","Component","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","repoStartTransaction","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut"],"sources":["../src/core/version.ts","../src/core/storage/DOMStorageWrapper.ts","../src/core/storage/MemoryStorage.ts","../src/core/storage/storage.ts","../src/core/util/util.ts","../src/core/AppCheckTokenProvider.ts","../src/core/AuthTokenProvider.ts","../src/realtime/Constants.ts","../src/core/RepoInfo.ts","../src/core/stats/StatsCollection.ts","../src/core/stats/StatsManager.ts","../src/realtime/polling/PacketReceiver.ts","../src/realtime/BrowserPollConnection.ts","../src/realtime/WebSocketConnection.ts","../src/realtime/TransportManager.ts","../src/realtime/Connection.ts","../src/core/ServerActions.ts","../src/core/util/EventEmitter.ts","../src/core/util/OnlineMonitor.ts","../src/core/util/Path.ts","../src/core/util/VisibilityMonitor.ts","../src/core/PersistentConnection.ts","../src/core/snap/Node.ts","../src/core/snap/indexes/Index.ts","../src/core/snap/indexes/KeyIndex.ts","../src/core/util/SortedMap.ts","../src/core/snap/comparators.ts","../src/core/snap/snap.ts","../src/core/snap/LeafNode.ts","../src/core/snap/indexes/PriorityIndex.ts","../src/core/snap/childSet.ts","../src/core/snap/IndexMap.ts","../src/core/snap/ChildrenNode.ts","../src/core/snap/nodeFromJSON.ts","../src/core/snap/indexes/PathIndex.ts","../src/core/snap/indexes/ValueIndex.ts","../src/core/view/Change.ts","../src/core/view/filter/IndexedFilter.ts","../src/core/view/filter/RangedFilter.ts","../src/core/view/filter/LimitedFilter.ts","../src/core/view/QueryParams.ts","../src/core/ReadonlyRestClient.ts","../src/core/SnapshotHolder.ts","../src/core/SparseSnapshotTree.ts","../src/core/stats/StatsListener.ts","../src/core/stats/StatsReporter.ts","../src/core/operation/Operation.ts","../src/core/operation/AckUserWrite.ts","../src/core/operation/ListenComplete.ts","../src/core/operation/Overwrite.ts","../src/core/operation/Merge.ts","../src/core/view/CacheNode.ts","../src/core/view/EventGenerator.ts","../src/core/view/ViewCache.ts","../src/core/util/ImmutableTree.ts","../src/core/CompoundWrite.ts","../src/core/WriteTree.ts","../src/core/view/ChildChangeAccumulator.ts","../src/core/view/CompleteChildSource.ts","../src/core/view/ViewProcessor.ts","../src/core/view/View.ts","../src/core/SyncPoint.ts","../src/core/SyncTree.ts","../src/core/util/ServerValues.ts","../src/core/util/Tree.ts","../src/core/util/validation.ts","../src/core/view/EventQueue.ts","../src/core/Repo.ts","../src/core/util/libs/parser.ts","../src/core/util/NextPushId.ts","../src/core/view/Event.ts","../src/core/view/EventRegistration.ts","../src/api/OnDisconnect.ts","../src/api/Reference_impl.ts","../src/api/Database.ts","../src/register.ts","../src/api/ServerValue.ts","../src/api/Transaction.ts","../src/api/test_access.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}